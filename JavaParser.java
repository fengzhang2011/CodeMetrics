// $ANTLR 3.4 Java.g 2012-03-07 00:52:11

// Should be replaced for individual needs.
//package com.habelitz.jsobjectizer.unmarshaller.antlrbridge.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
 * An ANTLRv3 capable Java 1.5 grammar for building ASTs.
 *
 * Note that there's also the tree grammar 'JavaTreeParser.g' that can be fed
 * with this grammer's output.
 *
 *
 * Please report any detected errors or even suggestions regarding this grammar
 * to
 *
 *          dieter [D O T] habelitz [A T] habelitz [D O T] com
 *
 *      with the subject
 *
 *          jsom grammar: [your subject note]
 *
 * To generate a parser based on this grammar you'll need ANTLRv3, which you 
 * can get from 'http://www.antlr.org'.
 *
 * 
 * Change and version log (year-month-day):
 * ----------------------------------------
 * 
 * 2008-04-03	First release version published.
 * 2008-04-16   Bug-fix (not grammar specific!): the flag 'mHasError' will be 
 				set to 'true' now if an error occurs.
 * 2008-04-16   Some changes within the lexer grammar regarding comments; 
 *              furthermore, the flag 'preserveWhitespacesAndComments' has been
 *              replaced by four flags: 'mPreserveWhitespaces', 
 *              'mPreserveJavaDocComments', 'mPreserveBlockComments' and 
 *              'mPreserveLineComments'. I.e., whitespaces and all kinds of
 *				comments can be preserved or thrown away independently.
 * 2008-05-13	Grammar rule 'enumScopeDeclarations' fixed; constants are
 *			    optional not obligatory.
 * 2008-06-11   Resolving of cast expressions fixed; very simple parenthesized
 *              expressions have been recognized as type casts.
 * 2008-08-13	Rule 'switchBlockLabels' fixed.
 * 2008-08-22   New token for new line characters introduces; in previous
 *              versions new line characters have been tokenized as whitespaces.
 * 2010-09-02   Annotation initializers within parentheses are optional not
 *				obligatory (i.e. @AnyAnnotation() is valid).
 * 2011-01-11   Separate sub-rule for each statement type.
 * 2011-01-11   Preserve empty statements.
 * 2011-03-14   Recognize generic type arguments correctly for all kinds of
 *              super constructor calls.
 * 2011-08-27   Problem with the closing brackets of nested generic type 
 *              parameter/argument lists fixed.
 * 2011-10-12   Support of hexadecimal floating point literals.
 *
 * ----------------------------------------------------------------------------
 * license agreement
 * ----------------------------------------------------------------------------
 *
 * This grammar is published under the ...
 *
 * BSD license
 * 
 * Copyright (c) 2007-2011 by HABELITZ Software Developments
 *
 * All rights reserved.
 * 
 * http://www.habelitz.com
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY HABELITZ SOFTWARE DEVELOPMENTS ('HSD') ``AS IS'' 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL 'HSD' BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AND", "AND_ASSIGN", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "ASSERT", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "BLOCK_COMMENT", "BLOCK_SCOPE", "BOOLEAN", "BREAK", "BYTE", "CASE", "CAST_EXPR", "CATCH", "CATCH_CLAUSE_LIST", "CHAR", "CHARACTER_LITERAL", "CLASS", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "COLON", "COMMA", "CONSTRUCTOR_DECL", "CONTINUE", "DEC", "DECIMAL_FP_LITERAL", "DECIMAL_LITERAL", "DEFAULT", "DIV", "DIV_ASSIGN", "DO", "DOT", "DOTSTAR", "DOUBLE", "ELLIPSIS", "ELSE", "ENUM", "ENUM_TOP_LEVEL_SCOPE", "EQUAL", "ESCAPE_SEQUENCE", "EXPONENT", "EXPR", "EXTENDS", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATING_POINT_LITERAL", "FLOAT_TYPE_SUFFIX", "FOR", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "GREATER_OR_EQUAL", "GREATER_THAN", "HEXADECIMAL_FP_LITERAL", "HEX_DIGIT", "HEX_LITERAL", "HEX_PREFIX", "IDENT", "IF", "IMPLEMENTS", "IMPLEMENTS_CLAUSE", "IMPORT", "INC", "INSTANCEOF", "INT", "INTEGER_TYPE_SUFFIX", "INTERFACE", "INTERFACE_TOP_LEVEL_SCOPE", "JAVADOC_COMMENT", "JAVA_ID_PART", "JAVA_ID_START", "JAVA_SOURCE", "LABELED_STATEMENT", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LINE_COMMENT", "LOCAL_MODIFIER_LIST", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LONG", "LPAREN", "METHOD_CALL", "MINUS", "MINUS_ASSIGN", "MOD", "MODIFIER_LIST", "MOD_ASSIGN", "NATIVE", "NEW", "NL", "NOT", "NOT_EQUAL", "NULL", "OCTAL_ESCAPE", "OCTAL_LITERAL", "OR", "OR_ASSIGN", "PACKAGE", "PARENTESIZED_EXPR", "PLUS", "PLUS_ASSIGN", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "PRIVATE", "PROTECTED", "PUBLIC", "QUALIFIED_TYPE_IDENT", "QUESTION", "RBRACK", "RCURLY", "RETURN", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "SHORT", "SIGNED_INTEGER", "STAR", "STAR_ASSIGN", "STATIC", "STATIC_ARRAY_CREATOR", "STRICTFP", "STRING_LITERAL", "SUPER", "SUPER_CONSTRUCTOR_CALL", "SWITCH", "SWITCH_BLOCK_LABEL_LIST", "SYNCHRONIZED", "THIS", "THIS_CONSTRUCTOR_CALL", "THROW", "THROWS", "THROWS_CLAUSE", "TRANSIENT", "TRUE", "TRY", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "UNICODE_ESCAPE", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VOID", "VOID_METHOD_DECL", "VOLATILE", "WHILE", "WS", "XOR", "XOR_ASSIGN"
    };

    public static final int EOF=-1;
    public static final int ABSTRACT=4;
    public static final int AND=5;
    public static final int AND_ASSIGN=6;
    public static final int ANNOTATION_INIT_ARRAY_ELEMENT=7;
    public static final int ANNOTATION_INIT_BLOCK=8;
    public static final int ANNOTATION_INIT_DEFAULT_KEY=9;
    public static final int ANNOTATION_INIT_KEY_LIST=10;
    public static final int ANNOTATION_LIST=11;
    public static final int ANNOTATION_METHOD_DECL=12;
    public static final int ANNOTATION_SCOPE=13;
    public static final int ANNOTATION_TOP_LEVEL_SCOPE=14;
    public static final int ARGUMENT_LIST=15;
    public static final int ARRAY_DECLARATOR=16;
    public static final int ARRAY_DECLARATOR_LIST=17;
    public static final int ARRAY_ELEMENT_ACCESS=18;
    public static final int ARRAY_INITIALIZER=19;
    public static final int ASSERT=20;
    public static final int ASSIGN=21;
    public static final int AT=22;
    public static final int BIT_SHIFT_RIGHT=23;
    public static final int BIT_SHIFT_RIGHT_ASSIGN=24;
    public static final int BLOCK_COMMENT=25;
    public static final int BLOCK_SCOPE=26;
    public static final int BOOLEAN=27;
    public static final int BREAK=28;
    public static final int BYTE=29;
    public static final int CASE=30;
    public static final int CAST_EXPR=31;
    public static final int CATCH=32;
    public static final int CATCH_CLAUSE_LIST=33;
    public static final int CHAR=34;
    public static final int CHARACTER_LITERAL=35;
    public static final int CLASS=36;
    public static final int CLASS_CONSTRUCTOR_CALL=37;
    public static final int CLASS_INSTANCE_INITIALIZER=38;
    public static final int CLASS_STATIC_INITIALIZER=39;
    public static final int CLASS_TOP_LEVEL_SCOPE=40;
    public static final int COLON=41;
    public static final int COMMA=42;
    public static final int CONSTRUCTOR_DECL=43;
    public static final int CONTINUE=44;
    public static final int DEC=45;
    public static final int DECIMAL_FP_LITERAL=46;
    public static final int DECIMAL_LITERAL=47;
    public static final int DEFAULT=48;
    public static final int DIV=49;
    public static final int DIV_ASSIGN=50;
    public static final int DO=51;
    public static final int DOT=52;
    public static final int DOTSTAR=53;
    public static final int DOUBLE=54;
    public static final int ELLIPSIS=55;
    public static final int ELSE=56;
    public static final int ENUM=57;
    public static final int ENUM_TOP_LEVEL_SCOPE=58;
    public static final int EQUAL=59;
    public static final int ESCAPE_SEQUENCE=60;
    public static final int EXPONENT=61;
    public static final int EXPR=62;
    public static final int EXTENDS=63;
    public static final int EXTENDS_BOUND_LIST=64;
    public static final int EXTENDS_CLAUSE=65;
    public static final int FALSE=66;
    public static final int FINAL=67;
    public static final int FINALLY=68;
    public static final int FLOAT=69;
    public static final int FLOATING_POINT_LITERAL=70;
    public static final int FLOAT_TYPE_SUFFIX=71;
    public static final int FOR=72;
    public static final int FORMAL_PARAM_LIST=73;
    public static final int FORMAL_PARAM_STD_DECL=74;
    public static final int FORMAL_PARAM_VARARG_DECL=75;
    public static final int FOR_CONDITION=76;
    public static final int FOR_EACH=77;
    public static final int FOR_INIT=78;
    public static final int FOR_UPDATE=79;
    public static final int FUNCTION_METHOD_DECL=80;
    public static final int GENERIC_TYPE_ARG_LIST=81;
    public static final int GENERIC_TYPE_PARAM_LIST=82;
    public static final int GREATER_OR_EQUAL=83;
    public static final int GREATER_THAN=84;
    public static final int HEXADECIMAL_FP_LITERAL=85;
    public static final int HEX_DIGIT=86;
    public static final int HEX_LITERAL=87;
    public static final int HEX_PREFIX=88;
    public static final int IDENT=89;
    public static final int IF=90;
    public static final int IMPLEMENTS=91;
    public static final int IMPLEMENTS_CLAUSE=92;
    public static final int IMPORT=93;
    public static final int INC=94;
    public static final int INSTANCEOF=95;
    public static final int INT=96;
    public static final int INTEGER_TYPE_SUFFIX=97;
    public static final int INTERFACE=98;
    public static final int INTERFACE_TOP_LEVEL_SCOPE=99;
    public static final int JAVADOC_COMMENT=100;
    public static final int JAVA_ID_PART=101;
    public static final int JAVA_ID_START=102;
    public static final int JAVA_SOURCE=103;
    public static final int LABELED_STATEMENT=104;
    public static final int LBRACK=105;
    public static final int LCURLY=106;
    public static final int LESS_OR_EQUAL=107;
    public static final int LESS_THAN=108;
    public static final int LINE_COMMENT=109;
    public static final int LOCAL_MODIFIER_LIST=110;
    public static final int LOGICAL_AND=111;
    public static final int LOGICAL_NOT=112;
    public static final int LOGICAL_OR=113;
    public static final int LONG=114;
    public static final int LPAREN=115;
    public static final int METHOD_CALL=116;
    public static final int MINUS=117;
    public static final int MINUS_ASSIGN=118;
    public static final int MOD=119;
    public static final int MODIFIER_LIST=120;
    public static final int MOD_ASSIGN=121;
    public static final int NATIVE=122;
    public static final int NEW=123;
    public static final int NL=124;
    public static final int NOT=125;
    public static final int NOT_EQUAL=126;
    public static final int NULL=127;
    public static final int OCTAL_ESCAPE=128;
    public static final int OCTAL_LITERAL=129;
    public static final int OR=130;
    public static final int OR_ASSIGN=131;
    public static final int PACKAGE=132;
    public static final int PARENTESIZED_EXPR=133;
    public static final int PLUS=134;
    public static final int PLUS_ASSIGN=135;
    public static final int POST_DEC=136;
    public static final int POST_INC=137;
    public static final int PRE_DEC=138;
    public static final int PRE_INC=139;
    public static final int PRIVATE=140;
    public static final int PROTECTED=141;
    public static final int PUBLIC=142;
    public static final int QUALIFIED_TYPE_IDENT=143;
    public static final int QUESTION=144;
    public static final int RBRACK=145;
    public static final int RCURLY=146;
    public static final int RETURN=147;
    public static final int RPAREN=148;
    public static final int SEMI=149;
    public static final int SHIFT_LEFT=150;
    public static final int SHIFT_LEFT_ASSIGN=151;
    public static final int SHIFT_RIGHT=152;
    public static final int SHIFT_RIGHT_ASSIGN=153;
    public static final int SHORT=154;
    public static final int SIGNED_INTEGER=155;
    public static final int STAR=156;
    public static final int STAR_ASSIGN=157;
    public static final int STATIC=158;
    public static final int STATIC_ARRAY_CREATOR=159;
    public static final int STRICTFP=160;
    public static final int STRING_LITERAL=161;
    public static final int SUPER=162;
    public static final int SUPER_CONSTRUCTOR_CALL=163;
    public static final int SWITCH=164;
    public static final int SWITCH_BLOCK_LABEL_LIST=165;
    public static final int SYNCHRONIZED=166;
    public static final int THIS=167;
    public static final int THIS_CONSTRUCTOR_CALL=168;
    public static final int THROW=169;
    public static final int THROWS=170;
    public static final int THROWS_CLAUSE=171;
    public static final int TRANSIENT=172;
    public static final int TRUE=173;
    public static final int TRY=174;
    public static final int TYPE=175;
    public static final int UNARY_MINUS=176;
    public static final int UNARY_PLUS=177;
    public static final int UNICODE_ESCAPE=178;
    public static final int VAR_DECLARATION=179;
    public static final int VAR_DECLARATOR=180;
    public static final int VAR_DECLARATOR_LIST=181;
    public static final int VOID=182;
    public static final int VOID_METHOD_DECL=183;
    public static final int VOLATILE=184;
    public static final int WHILE=185;
    public static final int WS=186;
    public static final int XOR=187;
    public static final int XOR_ASSIGN=188;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public JavaParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public JavaParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[375+1];
         

    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "Java.g"; }


        
    private boolean mMessageCollectionEnabled = false;
    private List<String> mMessages;

    private CodeMetrics metric = CodeMetrics.instance();

    // Used by the rule 'genericTypeListClosing' - see the comments stated there.
    private List<Integer> mGenTypeRewindStack = new ArrayList<Integer>();

    /**
     * Switches error message collection on or of.
     * <p>
     * The standard destination for parser error messages is <code>
     * System.err</code>. However, if <code>true</code> gets passed to this method 
     * this default behavior will be switched off and all error messages will be 
     * collected instead of writing them to an output stream.
     * <p>
     * The default value is <code>false</code>.
     *
     * @param pNewState  <code>true</code> if error messages should be collected.
     */
    public void enableErrorMessageCollection(boolean pNewState) {

        mMessageCollectionEnabled = pNewState;
        if (mMessages == null && mMessageCollectionEnabled) {
            mMessages = new ArrayList<String>();
        }
    }

    /**
     * Collects an error message or passes the error message to <code>
     * super.emitErrorMessage(...)</code>.
     * <p>
     * The actual behavior depends on whether collecting error messages has been 
     * enabled or not.
     *
     * @param pMessage  The error message.
     */
    @Override
    public void emitErrorMessage(String pMessage) {

        if (mMessageCollectionEnabled) {
            mMessages.add(pMessage);
        } else {
            super.emitErrorMessage(pMessage);
        }
    }

    /**
     * Returns collected error messages.
     * <p>
     * This method returns a copy of the internal list of error messages and clears
     * the internal list.
     * <p>
     * Note that calling this method equals to a <code>getMessages(null)</code>
     * call.
     *
     * @see #getMessages(List)
     *
     * @return  A list holding collected error messages or <code>null</code> if
     *          collecting error messages is disabled. Of course, the returned list 
     *		    may be empty if no error message has been emitted.
     */
    public List<String> getMessages() {

    	return getMessages(null);
    }

    /**
     * Returns collected error messages.
     *
     * @param pUserList  If this argument is not <code>null</code> the error
     *                   messages will be added to this list and it's this list that
     *                   will be returned. Otherwise a copy of the internal list of 
     *                   error messages will be created and returned. The internal
     *                   list will be cleared just before the method returns.
     *
     * @return  A list holding collected error messages. If collecting error 
     *          messages is disabled <code>null</code> will be returned, even if the 
     *			argument <code>pUserList</code> is not <code>null</code>.
     */
    public List<String> getMessages(List<String> pUserList) {

    	if (!mMessageCollectionEnabled) {
    	    return null;
    	}
    	List<String> result = pUserList;
    	if (result == null) {
    		result = new ArrayList<String>();
    	}
    	result.addAll(mMessages);
        mMessages.clear();
        
        return result;
    }

    /**
     * Tells if there is any collected error messages.
     *
     * @return  <code>true</code> if there is at least one collected error message.
     */
    public boolean hasErrors() {

        return mMessages != null && mMessages.size() > 0;
    }


    public static class javaSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "javaSource"
    // Java.g:543:1: javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
    public final JavaParser.javaSource_return javaSource() throws RecognitionException {
        JavaParser.javaSource_return retval = new JavaParser.javaSource_return();
        retval.start = input.LT(1);

        int javaSource_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.compilationUnit_return compilationUnit1 =null;


        RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // Java.g:544:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
            // Java.g:544:9: compilationUnit
            {
            pushFollow(FOLLOW_compilationUnit_in_javaSource4508);
            compilationUnit1=compilationUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compilationUnit.add(compilationUnit1.getTree());

            // AST REWRITE
            // elements: compilationUnit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 545:9: -> ^( JAVA_SOURCE compilationUnit )
            {
                // Java.g:545:13: ^( JAVA_SOURCE compilationUnit )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(JAVA_SOURCE, "JAVA_SOURCE")
                , root_1);

                adaptor.addChild(root_1, stream_compilationUnit.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 1, javaSource_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "javaSource"


    public static class compilationUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compilationUnit"
    // Java.g:548:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);

        int compilationUnit_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.annotationList_return annotationList2 =null;

        JavaParser.packageDeclaration_return packageDeclaration3 =null;

        JavaParser.importDeclaration_return importDeclaration4 =null;

        JavaParser.typeDecls_return typeDecls5 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // Java.g:549:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
            // Java.g:549:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_annotationList_in_compilationUnit4544);
            annotationList2=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList2.getTree());

            // Java.g:550:9: ( packageDeclaration )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==PACKAGE) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // Java.g:550:9: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit4555);
                    packageDeclaration3=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageDeclaration3.getTree());

                    }
                    break;

            }


            // Java.g:551:9: ( importDeclaration )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==IMPORT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // Java.g:551:9: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit4567);
            	    importDeclaration4=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            // Java.g:552:9: ( typeDecls )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==ABSTRACT||LA3_0==AT||LA3_0==BOOLEAN||LA3_0==BYTE||LA3_0==CHAR||LA3_0==CLASS||LA3_0==DOUBLE||LA3_0==ENUM||LA3_0==FINAL||LA3_0==FLOAT||LA3_0==IDENT||LA3_0==INT||LA3_0==INTERFACE||LA3_0==LESS_THAN||LA3_0==LONG||LA3_0==NATIVE||(LA3_0 >= PRIVATE && LA3_0 <= PUBLIC)||LA3_0==SEMI||LA3_0==SHORT||LA3_0==STATIC||LA3_0==STRICTFP||LA3_0==SYNCHRONIZED||LA3_0==TRANSIENT||LA3_0==VOID||LA3_0==VOLATILE) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // Java.g:552:9: typeDecls
            	    {
            	    pushFollow(FOLLOW_typeDecls_in_compilationUnit4579);
            	    typeDecls5=typeDecls();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecls5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 2, compilationUnit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compilationUnit"


    public static class typeDecls_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeDecls"
    // Java.g:555:1: typeDecls : ( typeDeclaration | SEMI !);
    public final JavaParser.typeDecls_return typeDecls() throws RecognitionException {
        JavaParser.typeDecls_return retval = new JavaParser.typeDecls_return();
        retval.start = input.LT(1);

        int typeDecls_StartIndex = input.index();

        CommonTree root_0 = null;

        Token SEMI7=null;
        JavaParser.typeDeclaration_return typeDeclaration6 =null;


        CommonTree SEMI7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // Java.g:556:5: ( typeDeclaration | SEMI !)
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==ABSTRACT||LA4_0==AT||LA4_0==BOOLEAN||LA4_0==BYTE||LA4_0==CHAR||LA4_0==CLASS||LA4_0==DOUBLE||LA4_0==ENUM||LA4_0==FINAL||LA4_0==FLOAT||LA4_0==IDENT||LA4_0==INT||LA4_0==INTERFACE||LA4_0==LESS_THAN||LA4_0==LONG||LA4_0==NATIVE||(LA4_0 >= PRIVATE && LA4_0 <= PUBLIC)||LA4_0==SHORT||LA4_0==STATIC||LA4_0==STRICTFP||LA4_0==SYNCHRONIZED||LA4_0==TRANSIENT||LA4_0==VOID||LA4_0==VOLATILE) ) {
                alt4=1;
            }
            else if ( (LA4_0==SEMI) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }
            switch (alt4) {
                case 1 :
                    // Java.g:556:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_typeDeclaration_in_typeDecls4599);
                    typeDeclaration6=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration6.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:557:9: SEMI !
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    SEMI7=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDecls4609); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 3, typeDecls_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeDecls"


    public static class packageDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "packageDeclaration"
    // Java.g:560:1: packageDeclaration : PACKAGE ^ qualifiedIdentifier SEMI !;
    public final JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        JavaParser.packageDeclaration_return retval = new JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);

        int packageDeclaration_StartIndex = input.index();

        CommonTree root_0 = null;

        Token PACKAGE8=null;
        Token SEMI10=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier9 =null;


        CommonTree PACKAGE8_tree=null;
        CommonTree SEMI10_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // Java.g:561:5: ( PACKAGE ^ qualifiedIdentifier SEMI !)
            // Java.g:561:9: PACKAGE ^ qualifiedIdentifier SEMI !
            {
            root_0 = (CommonTree)adaptor.nil();


            PACKAGE8=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration4629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE8_tree = 
            (CommonTree)adaptor.create(PACKAGE8)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(PACKAGE8_tree, root_0);
            }

            pushFollow(FOLLOW_qualifiedIdentifier_in_packageDeclaration4632);
            qualifiedIdentifier9=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier9.getTree());

            SEMI10=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration4634); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 4, packageDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"


    public static class importDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importDeclaration"
    // Java.g:564:1: importDeclaration : IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !;
    public final JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        JavaParser.importDeclaration_return retval = new JavaParser.importDeclaration_return();
        retval.start = input.LT(1);

        int importDeclaration_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IMPORT11=null;
        Token STATIC12=null;
        Token DOTSTAR14=null;
        Token SEMI15=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier13 =null;


        CommonTree IMPORT11_tree=null;
        CommonTree STATIC12_tree=null;
        CommonTree DOTSTAR14_tree=null;
        CommonTree SEMI15_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // Java.g:565:5: ( IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !)
            // Java.g:565:9: IMPORT ^ ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI !
            {
            root_0 = (CommonTree)adaptor.nil();


            IMPORT11=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration4660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT11_tree = 
            (CommonTree)adaptor.create(IMPORT11)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(IMPORT11_tree, root_0);
            }

            // Java.g:565:17: ( STATIC )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==STATIC) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Java.g:565:17: STATIC
                    {
                    STATIC12=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration4663); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC12_tree = 
                    (CommonTree)adaptor.create(STATIC12)
                    ;
                    adaptor.addChild(root_0, STATIC12_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_qualifiedIdentifier_in_importDeclaration4666);
            qualifiedIdentifier13=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier13.getTree());

            // Java.g:565:45: ( DOTSTAR )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==DOTSTAR) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // Java.g:565:45: DOTSTAR
                    {
                    DOTSTAR14=(Token)match(input,DOTSTAR,FOLLOW_DOTSTAR_in_importDeclaration4668); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOTSTAR14_tree = 
                    (CommonTree)adaptor.create(DOTSTAR14)
                    ;
                    adaptor.addChild(root_0, DOTSTAR14_tree);
                    }

                    }
                    break;

            }


            SEMI15=(Token)match(input,SEMI,FOLLOW_SEMI_in_importDeclaration4671); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 5, importDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importDeclaration"


    public static class typeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeDeclaration"
    // Java.g:568:1: typeDeclaration : modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
    public final JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        JavaParser.typeDeclaration_return retval = new JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);

        int typeDeclaration_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.modifierList_return modifierList16 =null;

        JavaParser.classTypeDeclaration_return classTypeDeclaration17 =null;

        JavaParser.interfaceTypeDeclaration_return interfaceTypeDeclaration18 =null;

        JavaParser.enumTypeDeclaration_return enumTypeDeclaration19 =null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration20 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // Java.g:569:5: ( modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
            // Java.g:569:9: modifierList ! ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_modifierList_in_typeDeclaration4695);
            modifierList16=modifierList();

            state._fsp--;
            if (state.failed) return retval;

            // Java.g:570:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            int alt7=4;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt7=1;
                }
                break;
            case INTERFACE:
                {
                alt7=2;
                }
                break;
            case ENUM:
                {
                alt7=3;
                }
                break;
            case AT:
                {
                alt7=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // Java.g:570:13: classTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_classTypeDeclaration_in_typeDeclaration4710);
                    classTypeDeclaration17=classTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeDeclaration17.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:571:13: interfaceTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4725);
                    interfaceTypeDeclaration18=interfaceTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceTypeDeclaration18.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:572:13: enumTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_enumTypeDeclaration_in_typeDeclaration4740);
                    enumTypeDeclaration19=enumTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumTypeDeclaration19.getTree());

                    }
                    break;
                case 4 :
                    // Java.g:573:13: annotationTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_typeDeclaration4755);
                    annotationTypeDeclaration20=annotationTypeDeclaration((modifierList16!=null?((CommonTree)modifierList16.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration20.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 6, typeDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"


    public static class classTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classTypeDeclaration"
    // Java.g:577:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
    public final JavaParser.classTypeDeclaration_return classTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.classTypeDeclaration_return retval = new JavaParser.classTypeDeclaration_return();
        retval.start = input.LT(1);

        int classTypeDeclaration_StartIndex = input.index();

        CommonTree root_0 = null;

        Token CLASS21=null;
        Token IDENT22=null;
        JavaParser.genericTypeParameterList_return genericTypeParameterList23 =null;

        JavaParser.classExtendsClause_return classExtendsClause24 =null;

        JavaParser.implementsClause_return implementsClause25 =null;

        JavaParser.classBody_return classBody26 =null;


        CommonTree CLASS21_tree=null;
        CommonTree IDENT22_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // Java.g:578:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
            // Java.g:578:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
            {
            CLASS21=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDeclaration4790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(CLASS21);


            IDENT22=(Token)match(input,IDENT,FOLLOW_IDENT_in_classTypeDeclaration4792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT22);


            // Java.g:578:21: ( genericTypeParameterList )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==LESS_THAN) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // Java.g:578:21: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_classTypeDeclaration4794);
                    genericTypeParameterList23=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList23.getTree());

                    }
                    break;

            }


            // Java.g:578:47: ( classExtendsClause )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==EXTENDS) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // Java.g:578:47: classExtendsClause
                    {
                    pushFollow(FOLLOW_classExtendsClause_in_classTypeDeclaration4797);
                    classExtendsClause24=classExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classExtendsClause.add(classExtendsClause24.getTree());

                    }
                    break;

            }


            // Java.g:578:67: ( implementsClause )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==IMPLEMENTS) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // Java.g:578:67: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_classTypeDeclaration4800);
                    implementsClause25=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause25.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_classBody_in_classTypeDeclaration4803);
            classBody26=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody26.getTree());

            // AST REWRITE
            // elements: implementsClause, CLASS, classBody, classExtendsClause, genericTypeParameterList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 579:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
            {
                // Java.g:579:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_CLASS.nextNode()
                , root_1);

                adaptor.addChild(root_1, modifiers);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                // Java.g:579:40: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();

                // Java.g:579:66: ( classExtendsClause )?
                if ( stream_classExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_classExtendsClause.nextTree());

                }
                stream_classExtendsClause.reset();

                // Java.g:579:86: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();

                adaptor.addChild(root_1, stream_classBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 7, classTypeDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classTypeDeclaration"


    public static class classExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classExtendsClause"
    // Java.g:582:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
    public final JavaParser.classExtendsClause_return classExtendsClause() throws RecognitionException {
        JavaParser.classExtendsClause_return retval = new JavaParser.classExtendsClause_return();
        retval.start = input.LT(1);

        int classExtendsClause_StartIndex = input.index();

        CommonTree root_0 = null;

        Token EXTENDS27=null;
        JavaParser.type_return type28 =null;


        CommonTree EXTENDS27_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // Java.g:583:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
            // Java.g:583:9: EXTENDS type
            {
            EXTENDS27=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_classExtendsClause4856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS27);


            pushFollow(FOLLOW_type_in_classExtendsClause4858);
            type28=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type28.getTree());

            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 584:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
            {
                // Java.g:584:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS27, "EXTENDS_CLAUSE")
                , root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 8, classExtendsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classExtendsClause"


    public static class interfaceExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interfaceExtendsClause"
    // Java.g:587:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
    public final JavaParser.interfaceExtendsClause_return interfaceExtendsClause() throws RecognitionException {
        JavaParser.interfaceExtendsClause_return retval = new JavaParser.interfaceExtendsClause_return();
        retval.start = input.LT(1);

        int interfaceExtendsClause_StartIndex = input.index();

        CommonTree root_0 = null;

        Token EXTENDS29=null;
        JavaParser.typeList_return typeList30 =null;


        CommonTree EXTENDS29_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // Java.g:588:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
            // Java.g:588:9: EXTENDS typeList
            {
            EXTENDS29=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceExtendsClause4902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS29);


            pushFollow(FOLLOW_typeList_in_interfaceExtendsClause4904);
            typeList30=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList30.getTree());

            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 589:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
            {
                // Java.g:589:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS29, "EXTENDS_CLAUSE")
                , root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 9, interfaceExtendsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interfaceExtendsClause"


    public static class implementsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementsClause"
    // Java.g:592:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
    public final JavaParser.implementsClause_return implementsClause() throws RecognitionException {
        JavaParser.implementsClause_return retval = new JavaParser.implementsClause_return();
        retval.start = input.LT(1);

        int implementsClause_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IMPLEMENTS31=null;
        JavaParser.typeList_return typeList32 =null;


        CommonTree IMPLEMENTS31_tree=null;
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // Java.g:593:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
            // Java.g:593:9: IMPLEMENTS typeList
            {
            IMPLEMENTS31=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_implementsClause4948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPLEMENTS.add(IMPLEMENTS31);


            pushFollow(FOLLOW_typeList_in_implementsClause4950);
            typeList32=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList32.getTree());

            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 594:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
            {
                // Java.g:594:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(IMPLEMENTS_CLAUSE, IMPLEMENTS31, "IMPLEMENTS_CLAUSE")
                , root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 10, implementsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implementsClause"


    public static class genericTypeParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "genericTypeParameterList"
    // Java.g:597:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
    public final JavaParser.genericTypeParameterList_return genericTypeParameterList() throws RecognitionException {
        JavaParser.genericTypeParameterList_return retval = new JavaParser.genericTypeParameterList_return();
        retval.start = input.LT(1);

        int genericTypeParameterList_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LESS_THAN33=null;
        Token COMMA35=null;
        JavaParser.genericTypeParameter_return genericTypeParameter34 =null;

        JavaParser.genericTypeParameter_return genericTypeParameter36 =null;

        JavaParser.genericTypeListClosing_return genericTypeListClosing37 =null;


        CommonTree LESS_THAN33_tree=null;
        CommonTree COMMA35_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // Java.g:598:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
            // Java.g:598:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
            {
            LESS_THAN33=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeParameterList4995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN33);


            pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList4997);
            genericTypeParameter34=genericTypeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter34.getTree());

            // Java.g:598:40: ( COMMA genericTypeParameter )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==COMMA) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // Java.g:598:41: COMMA genericTypeParameter
            	    {
            	    COMMA35=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeParameterList5000); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA35);


            	    pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5002);
            	    genericTypeParameter36=genericTypeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter36.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeParameterList5006);
            genericTypeListClosing37=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing37.getTree());

            // AST REWRITE
            // elements: genericTypeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 599:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
            {
                // Java.g:599:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(GENERIC_TYPE_PARAM_LIST, LESS_THAN33, "GENERIC_TYPE_PARAM_LIST")
                , root_1);

                if ( !(stream_genericTypeParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameter.nextTree());

                }
                stream_genericTypeParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 11, genericTypeParameterList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "genericTypeParameterList"


    public static class genericTypeListClosing_return extends ParserRuleReturnScope {
        public int closingBracketsCount;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "genericTypeListClosing"
    // Java.g:602:1: genericTypeListClosing returns [int closingBracketsCount] : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT (count= genericTypeListClosing )? |) ;
    public final JavaParser.genericTypeListClosing_return genericTypeListClosing() throws RecognitionException {
        JavaParser.genericTypeListClosing_return retval = new JavaParser.genericTypeListClosing_return();
        retval.start = input.LT(1);

        int genericTypeListClosing_StartIndex = input.index();

        CommonTree root_0 = null;

        Token GREATER_THAN38=null;
        Token SHIFT_RIGHT39=null;
        Token BIT_SHIFT_RIGHT40=null;
        JavaParser.genericTypeListClosing_return count =null;


        CommonTree GREATER_THAN38_tree=null;
        CommonTree SHIFT_RIGHT39_tree=null;
        CommonTree BIT_SHIFT_RIGHT40_tree=null;


                retval.closingBracketsCount = 0;
            
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // Java.g:625:5: ( ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT (count= genericTypeListClosing )? |) )
            // Java.g:625:9: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT (count= genericTypeListClosing )? |)
            {
            root_0 = (CommonTree)adaptor.nil();


            // Java.g:625:9: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT (count= genericTypeListClosing )? |)
            int alt13=4;
            switch ( input.LA(1) ) {
            case GREATER_THAN:
                {
                int LA13_1 = input.LA(2);

                if ( (synpred14_Java()) ) {
                    alt13=1;
                }
                else if ( (true) ) {
                    alt13=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;

                }
                }
                break;
            case SHIFT_RIGHT:
                {
                int LA13_2 = input.LA(2);

                if ( (synpred15_Java()) ) {
                    alt13=2;
                }
                else if ( (true) ) {
                    alt13=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 2, input);

                    throw nvae;

                }
                }
                break;
            case BIT_SHIFT_RIGHT:
                {
                int LA13_3 = input.LA(2);

                if ( (synpred17_Java()) ) {
                    alt13=3;
                }
                else if ( (true) ) {
                    alt13=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 3, input);

                    throw nvae;

                }
                }
                break;
            case EOF:
            case AND:
            case AND_ASSIGN:
            case ASSIGN:
            case BIT_SHIFT_RIGHT_ASSIGN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case COLON:
            case COMMA:
            case DIV_ASSIGN:
            case DOT:
            case DOUBLE:
            case ELLIPSIS:
            case EQUAL:
            case EXTENDS:
            case FLOAT:
            case IDENT:
            case IMPLEMENTS:
            case INT:
            case LBRACK:
            case LCURLY:
            case LOGICAL_AND:
            case LOGICAL_OR:
            case LONG:
            case LPAREN:
            case MINUS_ASSIGN:
            case MOD_ASSIGN:
            case NOT_EQUAL:
            case OR:
            case OR_ASSIGN:
            case PLUS_ASSIGN:
            case QUESTION:
            case RBRACK:
            case RCURLY:
            case RPAREN:
            case SEMI:
            case SHIFT_LEFT_ASSIGN:
            case SHIFT_RIGHT_ASSIGN:
            case SHORT:
            case STAR_ASSIGN:
            case SUPER:
            case THIS:
            case VOID:
            case XOR:
            case XOR_ASSIGN:
                {
                alt13=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // Java.g:625:13: GREATER_THAN
                    {
                    GREATER_THAN38=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_genericTypeListClosing5158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN38_tree = 
                    (CommonTree)adaptor.create(GREATER_THAN38)
                    ;
                    adaptor.addChild(root_0, GREATER_THAN38_tree);
                    }

                    if ( state.backtracking==0 ) {
                                    retval.closingBracketsCount++;
                                }

                    }
                    break;
                case 2 :
                    // Java.g:628:13: SHIFT_RIGHT
                    {
                    SHIFT_RIGHT39=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT39_tree = 
                    (CommonTree)adaptor.create(SHIFT_RIGHT39)
                    ;
                    adaptor.addChild(root_0, SHIFT_RIGHT39_tree);
                    }

                    if ( state.backtracking==0 ) { 
                                    retval.closingBracketsCount = 2;
                                }

                    }
                    break;
                case 3 :
                    // Java.g:631:13: BIT_SHIFT_RIGHT (count= genericTypeListClosing )?
                    {
                    BIT_SHIFT_RIGHT40=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5190); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIT_SHIFT_RIGHT40_tree = 
                    (CommonTree)adaptor.create(BIT_SHIFT_RIGHT40)
                    ;
                    adaptor.addChild(root_0, BIT_SHIFT_RIGHT40_tree);
                    }

                    if ( state.backtracking==0 ) { 
                                    retval.closingBracketsCount = 3; 
                                }

                    // Java.g:635:13: (count= genericTypeListClosing )?
                    int alt12=2;
                    switch ( input.LA(1) ) {
                        case GREATER_THAN:
                            {
                            int LA12_1 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case SHIFT_RIGHT:
                            {
                            int LA12_2 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case BIT_SHIFT_RIGHT:
                            {
                            int LA12_3 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case EXTENDS:
                            {
                            int LA12_4 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case IMPLEMENTS:
                            {
                            int LA12_5 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case LCURLY:
                            {
                            int LA12_6 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case SHORT:
                            {
                            int LA12_7 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA12_8 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case VOID:
                            {
                            int LA12_9 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case EOF:
                            {
                            int LA12_10 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case DOT:
                            {
                            int LA12_11 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case LBRACK:
                            {
                            int LA12_12 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case AND:
                            {
                            int LA12_13 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case COMMA:
                            {
                            int LA12_14 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case LPAREN:
                            {
                            int LA12_15 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case SUPER:
                            {
                            int LA12_16 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case THIS:
                            {
                            int LA12_17 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case ELLIPSIS:
                            {
                            int LA12_18 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case EQUAL:
                            {
                            int LA12_19 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case NOT_EQUAL:
                            {
                            int LA12_20 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case XOR:
                            {
                            int LA12_21 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case OR:
                            {
                            int LA12_22 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case LOGICAL_AND:
                            {
                            int LA12_23 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case LOGICAL_OR:
                            {
                            int LA12_24 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA12_25 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case RPAREN:
                            {
                            int LA12_26 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case RCURLY:
                            {
                            int LA12_27 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case SEMI:
                            {
                            int LA12_28 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case ASSIGN:
                            {
                            int LA12_29 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case PLUS_ASSIGN:
                            {
                            int LA12_30 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case MINUS_ASSIGN:
                            {
                            int LA12_31 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case STAR_ASSIGN:
                            {
                            int LA12_32 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case DIV_ASSIGN:
                            {
                            int LA12_33 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case AND_ASSIGN:
                            {
                            int LA12_34 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case OR_ASSIGN:
                            {
                            int LA12_35 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case XOR_ASSIGN:
                            {
                            int LA12_36 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case MOD_ASSIGN:
                            {
                            int LA12_37 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case SHIFT_LEFT_ASSIGN:
                            {
                            int LA12_38 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case SHIFT_RIGHT_ASSIGN:
                            {
                            int LA12_39 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case BIT_SHIFT_RIGHT_ASSIGN:
                            {
                            int LA12_40 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case COLON:
                            {
                            int LA12_41 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case RBRACK:
                            {
                            int LA12_42 = input.LA(2);

                            if ( (synpred16_Java()) ) {
                                alt12=1;
                            }
                            }
                            break;
                    }

                    switch (alt12) {
                        case 1 :
                            // Java.g:635:17: count= genericTypeListClosing
                            {
                            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeListClosing5227);
                            count=genericTypeListClosing();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, count.getTree());

                            if ( state.backtracking==0 ) { 
                                                retval.closingBracketsCount += (count!=null?count.closingBracketsCount:0);
                                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Java.g:642:9: 
                    {
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                        // If necessary update the token stream position; there's nothing to
                        // do if 'closingBracketsCount == 1'.
                		
                        if (retval.closingBracketsCount == 0) {
                            // Rewind the token stream to the position of the last 
                            // remembered closing bracket.
                            int size = mGenTypeRewindStack.size();
                            if (size > 0) {
                                getTokenStream().rewind(
                                    mGenTypeRewindStack.remove(size - 1).intValue());
                            }
                        } else if (retval.closingBracketsCount > 1) {
                            // Remember the current token stream position for more than one
                            // closing brackets.
                            Integer position = new Integer(getTokenStream().mark());
                            while (retval.closingBracketsCount > 1) {
                            	mGenTypeRewindStack.add(position);
                            	retval.closingBracketsCount--;
                            }
                        }
                    }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 12, genericTypeListClosing_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "genericTypeListClosing"


    public static class genericTypeParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "genericTypeParameter"
    // Java.g:667:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
    public final JavaParser.genericTypeParameter_return genericTypeParameter() throws RecognitionException {
        JavaParser.genericTypeParameter_return retval = new JavaParser.genericTypeParameter_return();
        retval.start = input.LT(1);

        int genericTypeParameter_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IDENT41=null;
        JavaParser.bound_return bound42 =null;


        CommonTree IDENT41_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // Java.g:668:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
            // Java.g:668:9: IDENT ( bound )?
            {
            IDENT41=(Token)match(input,IDENT,FOLLOW_IDENT_in_genericTypeParameter5316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT41);


            // Java.g:668:15: ( bound )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==EXTENDS) ) {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==BOOLEAN||LA14_1==BYTE||LA14_1==CHAR||LA14_1==DOUBLE||LA14_1==FLOAT||LA14_1==INT||LA14_1==LONG||LA14_1==SHORT) ) {
                    int LA14_3 = input.LA(3);

                    if ( (synpred18_Java()) ) {
                        alt14=1;
                    }
                }
                else if ( (LA14_1==IDENT) ) {
                    int LA14_4 = input.LA(3);

                    if ( (synpred18_Java()) ) {
                        alt14=1;
                    }
                }
            }
            switch (alt14) {
                case 1 :
                    // Java.g:668:15: bound
                    {
                    pushFollow(FOLLOW_bound_in_genericTypeParameter5318);
                    bound42=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound42.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: IDENT, bound
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 669:9: -> ^( IDENT ( bound )? )
            {
                // Java.g:669:13: ^( IDENT ( bound )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_IDENT.nextNode()
                , root_1);

                // Java.g:669:21: ( bound )?
                if ( stream_bound.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound.nextTree());

                }
                stream_bound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 13, genericTypeParameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "genericTypeParameter"


    public static class bound_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bound"
    // Java.g:672:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
    public final JavaParser.bound_return bound() throws RecognitionException {
        JavaParser.bound_return retval = new JavaParser.bound_return();
        retval.start = input.LT(1);

        int bound_StartIndex = input.index();

        CommonTree root_0 = null;

        Token EXTENDS43=null;
        Token AND45=null;
        JavaParser.type_return type44 =null;

        JavaParser.type_return type46 =null;


        CommonTree EXTENDS43_tree=null;
        CommonTree AND45_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // Java.g:673:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
            // Java.g:673:9: EXTENDS type ( AND type )*
            {
            EXTENDS43=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_bound5364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS43);


            pushFollow(FOLLOW_type_in_bound5366);
            type44=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type44.getTree());

            // Java.g:673:22: ( AND type )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==AND) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // Java.g:673:23: AND type
            	    {
            	    AND45=(Token)match(input,AND,FOLLOW_AND_in_bound5369); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND.add(AND45);


            	    pushFollow(FOLLOW_type_in_bound5371);
            	    type46=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(type46.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 674:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
            {
                // Java.g:674:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(EXTENDS_BOUND_LIST, EXTENDS43, "EXTENDS_BOUND_LIST")
                , root_1);

                if ( !(stream_type.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 14, bound_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bound"


    public static class enumTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumTypeDeclaration"
    // Java.g:677:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
    public final JavaParser.enumTypeDeclaration_return enumTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.enumTypeDeclaration_return retval = new JavaParser.enumTypeDeclaration_return();
        retval.start = input.LT(1);

        int enumTypeDeclaration_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ENUM47=null;
        Token IDENT48=null;
        JavaParser.implementsClause_return implementsClause49 =null;

        JavaParser.enumBody_return enumBody50 =null;


        CommonTree ENUM47_tree=null;
        CommonTree IDENT48_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // Java.g:678:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
            // Java.g:678:9: ENUM IDENT ( implementsClause )? enumBody
            {
            ENUM47=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumTypeDeclaration5412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM47);


            IDENT48=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumTypeDeclaration5414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT48);


            // Java.g:678:20: ( implementsClause )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==IMPLEMENTS) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // Java.g:678:20: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_enumTypeDeclaration5416);
                    implementsClause49=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause49.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_enumBody_in_enumTypeDeclaration5419);
            enumBody50=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody50.getTree());

            // AST REWRITE
            // elements: enumBody, implementsClause, IDENT, ENUM
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 679:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
            {
                // Java.g:679:13: ^( ENUM IDENT ( implementsClause )? enumBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_ENUM.nextNode()
                , root_1);

                adaptor.addChild(root_1, modifiers);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                // Java.g:679:39: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();

                adaptor.addChild(root_1, stream_enumBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 15, enumTypeDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumTypeDeclaration"


    public static class enumBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumBody"
    // Java.g:682:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] ( enumScopeDeclarations )* ) ;
    public final JavaParser.enumBody_return enumBody() throws RecognitionException {
        JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
        retval.start = input.LT(1);

        int enumBody_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LCURLY51=null;
        Token RCURLY53=null;
        JavaParser.enumScopeDeclarations_return enumScopeDeclarations52 =null;


        CommonTree LCURLY51_tree=null;
        CommonTree RCURLY53_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // Java.g:683:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] ( enumScopeDeclarations )* ) )
            // Java.g:683:9: LCURLY enumScopeDeclarations RCURLY
            {
            LCURLY51=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_enumBody5466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY51);


            pushFollow(FOLLOW_enumScopeDeclarations_in_enumBody5468);
            enumScopeDeclarations52=enumScopeDeclarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumScopeDeclarations.add(enumScopeDeclarations52.getTree());

            RCURLY53=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_enumBody5470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY53);


            // AST REWRITE
            // elements: enumScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 684:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] ( enumScopeDeclarations )* )
            {
                // Java.g:684:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] ( enumScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(ENUM_TOP_LEVEL_SCOPE, LCURLY51, "ENUM_TOP_LEVEL_SCOPE")
                , root_1);

                // Java.g:684:69: ( enumScopeDeclarations )*
                while ( stream_enumScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumScopeDeclarations.nextTree());

                }
                stream_enumScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 16, enumBody_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumBody"


    public static class enumScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumScopeDeclarations"
    // Java.g:687:1: enumScopeDeclarations : ( enumConstants )? ( COMMA !)? ( enumClassScopeDeclarations )? ;
    public final JavaParser.enumScopeDeclarations_return enumScopeDeclarations() throws RecognitionException {
        JavaParser.enumScopeDeclarations_return retval = new JavaParser.enumScopeDeclarations_return();
        retval.start = input.LT(1);

        int enumScopeDeclarations_StartIndex = input.index();

        CommonTree root_0 = null;

        Token COMMA55=null;
        JavaParser.enumConstants_return enumConstants54 =null;

        JavaParser.enumClassScopeDeclarations_return enumClassScopeDeclarations56 =null;


        CommonTree COMMA55_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // Java.g:688:5: ( ( enumConstants )? ( COMMA !)? ( enumClassScopeDeclarations )? )
            // Java.g:688:9: ( enumConstants )? ( COMMA !)? ( enumClassScopeDeclarations )?
            {
            root_0 = (CommonTree)adaptor.nil();


            // Java.g:688:9: ( enumConstants )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==AT||LA17_0==IDENT) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // Java.g:688:9: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumScopeDeclarations5508);
                    enumConstants54=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstants54.getTree());

                    }
                    break;

            }


            // Java.g:688:24: ( COMMA !)?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==COMMA) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Java.g:688:25: COMMA !
                    {
                    COMMA55=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumScopeDeclarations5512); if (state.failed) return retval;

                    }
                    break;

            }


            // Java.g:688:34: ( enumClassScopeDeclarations )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==SEMI) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // Java.g:688:34: enumClassScopeDeclarations
                    {
                    pushFollow(FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5517);
                    enumClassScopeDeclarations56=enumClassScopeDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumClassScopeDeclarations56.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 17, enumScopeDeclarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumScopeDeclarations"


    public static class enumClassScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumClassScopeDeclarations"
    // Java.g:691:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JavaParser.enumClassScopeDeclarations_return enumClassScopeDeclarations() throws RecognitionException {
        JavaParser.enumClassScopeDeclarations_return retval = new JavaParser.enumClassScopeDeclarations_return();
        retval.start = input.LT(1);

        int enumClassScopeDeclarations_StartIndex = input.index();

        CommonTree root_0 = null;

        Token SEMI57=null;
        JavaParser.classScopeDeclarations_return classScopeDeclarations58 =null;


        CommonTree SEMI57_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // Java.g:692:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // Java.g:692:9: SEMI ( classScopeDeclarations )*
            {
            SEMI57=(Token)match(input,SEMI,FOLLOW_SEMI_in_enumClassScopeDeclarations5537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI57);


            // Java.g:692:14: ( classScopeDeclarations )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==ABSTRACT||LA20_0==AT||LA20_0==BOOLEAN||LA20_0==BYTE||LA20_0==CHAR||LA20_0==CLASS||LA20_0==DOUBLE||LA20_0==ENUM||LA20_0==FINAL||LA20_0==FLOAT||LA20_0==IDENT||LA20_0==INT||LA20_0==INTERFACE||LA20_0==LCURLY||LA20_0==LESS_THAN||LA20_0==LONG||LA20_0==NATIVE||(LA20_0 >= PRIVATE && LA20_0 <= PUBLIC)||LA20_0==SEMI||LA20_0==SHORT||LA20_0==STATIC||LA20_0==STRICTFP||LA20_0==SYNCHRONIZED||LA20_0==TRANSIENT||LA20_0==VOID||LA20_0==VOLATILE) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // Java.g:692:14: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5539);
            	    classScopeDeclarations58=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations58.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 693:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // Java.g:693:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, SEMI57, "CLASS_TOP_LEVEL_SCOPE")
                , root_1);

                // Java.g:693:69: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 18, enumClassScopeDeclarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumClassScopeDeclarations"


    public static class enumConstants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumConstants"
    // Java.g:696:1: enumConstants : enumConstant ( COMMA ! enumConstant )* ;
    public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
        retval.start = input.LT(1);

        int enumConstants_StartIndex = input.index();

        CommonTree root_0 = null;

        Token COMMA60=null;
        JavaParser.enumConstant_return enumConstant59 =null;

        JavaParser.enumConstant_return enumConstant61 =null;


        CommonTree COMMA60_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // Java.g:697:5: ( enumConstant ( COMMA ! enumConstant )* )
            // Java.g:697:9: enumConstant ( COMMA ! enumConstant )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_enumConstant_in_enumConstants5578);
            enumConstant59=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant59.getTree());

            // Java.g:697:22: ( COMMA ! enumConstant )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==COMMA) ) {
                    int LA21_1 = input.LA(2);

                    if ( (LA21_1==AT||LA21_1==IDENT) ) {
                        alt21=1;
                    }


                }


                switch (alt21) {
            	case 1 :
            	    // Java.g:697:23: COMMA ! enumConstant
            	    {
            	    COMMA60=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants5581); if (state.failed) return retval;

            	    pushFollow(FOLLOW_enumConstant_in_enumConstants5584);
            	    enumConstant61=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant61.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 19, enumConstants_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumConstants"


    public static class enumConstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumConstant"
    // Java.g:700:1: enumConstant : annotationList IDENT ^ ( arguments )? ( classBody )? ;
    public final JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        JavaParser.enumConstant_return retval = new JavaParser.enumConstant_return();
        retval.start = input.LT(1);

        int enumConstant_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IDENT63=null;
        JavaParser.annotationList_return annotationList62 =null;

        JavaParser.arguments_return arguments64 =null;

        JavaParser.classBody_return classBody65 =null;


        CommonTree IDENT63_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // Java.g:701:5: ( annotationList IDENT ^ ( arguments )? ( classBody )? )
            // Java.g:701:9: annotationList IDENT ^ ( arguments )? ( classBody )?
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_annotationList_in_enumConstant5609);
            annotationList62=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList62.getTree());

            IDENT63=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumConstant5611); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT63_tree = 
            (CommonTree)adaptor.create(IDENT63)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT63_tree, root_0);
            }

            // Java.g:701:31: ( arguments )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==LPAREN) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // Java.g:701:31: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant5614);
                    arguments64=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments64.getTree());

                    }
                    break;

            }


            // Java.g:701:42: ( classBody )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LCURLY) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // Java.g:701:42: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant5617);
                    classBody65=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody65.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 20, enumConstant_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumConstant"


    public static class interfaceTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interfaceTypeDeclaration"
    // Java.g:704:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
    public final JavaParser.interfaceTypeDeclaration_return interfaceTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.interfaceTypeDeclaration_return retval = new JavaParser.interfaceTypeDeclaration_return();
        retval.start = input.LT(1);

        int interfaceTypeDeclaration_StartIndex = input.index();

        CommonTree root_0 = null;

        Token INTERFACE66=null;
        Token IDENT67=null;
        JavaParser.genericTypeParameterList_return genericTypeParameterList68 =null;

        JavaParser.interfaceExtendsClause_return interfaceExtendsClause69 =null;

        JavaParser.interfaceBody_return interfaceBody70 =null;


        CommonTree INTERFACE66_tree=null;
        CommonTree IDENT67_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // Java.g:705:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
            // Java.g:705:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
            {
            INTERFACE66=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceTypeDeclaration5642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE66);


            IDENT67=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceTypeDeclaration5644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT67);


            // Java.g:705:25: ( genericTypeParameterList )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LESS_THAN) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Java.g:705:25: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5646);
                    genericTypeParameterList68=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList68.getTree());

                    }
                    break;

            }


            // Java.g:705:51: ( interfaceExtendsClause )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==EXTENDS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // Java.g:705:51: interfaceExtendsClause
                    {
                    pushFollow(FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5649);
                    interfaceExtendsClause69=interfaceExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceExtendsClause.add(interfaceExtendsClause69.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_interfaceBody_in_interfaceTypeDeclaration5652);
            interfaceBody70=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody70.getTree());

            // AST REWRITE
            // elements: genericTypeParameterList, interfaceBody, IDENT, INTERFACE, interfaceExtendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 706:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
            {
                // Java.g:706:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_INTERFACE.nextNode()
                , root_1);

                adaptor.addChild(root_1, modifiers);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                // Java.g:706:44: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();

                // Java.g:706:70: ( interfaceExtendsClause )?
                if ( stream_interfaceExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceExtendsClause.nextTree());

                }
                stream_interfaceExtendsClause.reset();

                adaptor.addChild(root_1, stream_interfaceBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 21, interfaceTypeDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interfaceTypeDeclaration"


    public static class typeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeList"
    // Java.g:709:1: typeList : type ( COMMA ! type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);

        int typeList_StartIndex = input.index();

        CommonTree root_0 = null;

        Token COMMA72=null;
        JavaParser.type_return type71 =null;

        JavaParser.type_return type73 =null;


        CommonTree COMMA72_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // Java.g:710:5: ( type ( COMMA ! type )* )
            // Java.g:710:9: type ( COMMA ! type )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_type_in_typeList5702);
            type71=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type71.getTree());

            // Java.g:710:14: ( COMMA ! type )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==COMMA) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // Java.g:710:15: COMMA ! type
            	    {
            	    COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5705); if (state.failed) return retval;

            	    pushFollow(FOLLOW_type_in_typeList5708);
            	    type73=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type73.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 22, typeList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeList"


    public static class classBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classBody"
    // Java.g:713:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);

        int classBody_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LCURLY74=null;
        Token RCURLY76=null;
        JavaParser.classScopeDeclarations_return classScopeDeclarations75 =null;


        CommonTree LCURLY74_tree=null;
        CommonTree RCURLY76_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // Java.g:714:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // Java.g:714:9: LCURLY ( classScopeDeclarations )* RCURLY
            {
            LCURLY74=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_classBody5733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY74);


            // Java.g:714:16: ( classScopeDeclarations )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==ABSTRACT||LA27_0==AT||LA27_0==BOOLEAN||LA27_0==BYTE||LA27_0==CHAR||LA27_0==CLASS||LA27_0==DOUBLE||LA27_0==ENUM||LA27_0==FINAL||LA27_0==FLOAT||LA27_0==IDENT||LA27_0==INT||LA27_0==INTERFACE||LA27_0==LCURLY||LA27_0==LESS_THAN||LA27_0==LONG||LA27_0==NATIVE||(LA27_0 >= PRIVATE && LA27_0 <= PUBLIC)||LA27_0==SEMI||LA27_0==SHORT||LA27_0==STATIC||LA27_0==STRICTFP||LA27_0==SYNCHRONIZED||LA27_0==TRANSIENT||LA27_0==VOID||LA27_0==VOLATILE) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // Java.g:714:16: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_classBody5735);
            	    classScopeDeclarations75=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations75.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            RCURLY76=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_classBody5738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY76);


            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 715:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // Java.g:715:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, LCURLY74, "CLASS_TOP_LEVEL_SCOPE")
                , root_1);

                // Java.g:715:71: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 23, classBody_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classBody"


    public static class interfaceBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interfaceBody"
    // Java.g:718:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);

        int interfaceBody_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LCURLY77=null;
        Token RCURLY79=null;
        JavaParser.interfaceScopeDeclarations_return interfaceScopeDeclarations78 =null;


        CommonTree LCURLY77_tree=null;
        CommonTree RCURLY79_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // Java.g:719:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
            // Java.g:719:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
            {
            LCURLY77=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_interfaceBody5780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY77);


            // Java.g:719:16: ( interfaceScopeDeclarations )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==ABSTRACT||LA28_0==AT||LA28_0==BOOLEAN||LA28_0==BYTE||LA28_0==CHAR||LA28_0==CLASS||LA28_0==DOUBLE||LA28_0==ENUM||LA28_0==FINAL||LA28_0==FLOAT||LA28_0==IDENT||LA28_0==INT||LA28_0==INTERFACE||LA28_0==LESS_THAN||LA28_0==LONG||LA28_0==NATIVE||(LA28_0 >= PRIVATE && LA28_0 <= PUBLIC)||LA28_0==SEMI||LA28_0==SHORT||LA28_0==STATIC||LA28_0==STRICTFP||LA28_0==SYNCHRONIZED||LA28_0==TRANSIENT||LA28_0==VOID||LA28_0==VOLATILE) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // Java.g:719:16: interfaceScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_interfaceScopeDeclarations_in_interfaceBody5782);
            	    interfaceScopeDeclarations78=interfaceScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceScopeDeclarations.add(interfaceScopeDeclarations78.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            RCURLY79=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_interfaceBody5785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY79);


            // AST REWRITE
            // elements: interfaceScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 720:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
            {
                // Java.g:720:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY77, "CLASS_TOP_LEVEL_SCOPE")
                , root_1);

                // Java.g:720:75: ( interfaceScopeDeclarations )*
                while ( stream_interfaceScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceScopeDeclarations.nextTree());

                }
                stream_interfaceScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 24, interfaceBody_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interfaceBody"


    public static class classScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classScopeDeclarations"
    // Java.g:723:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
    public final JavaParser.classScopeDeclarations_return classScopeDeclarations() throws RecognitionException {
        JavaParser.classScopeDeclarations_return retval = new JavaParser.classScopeDeclarations_return();
        retval.start = input.LT(1);

        int classScopeDeclarations_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ident=null;
        Token STATIC81=null;
        Token IDENT86=null;
        Token SEMI91=null;
        Token VOID92=null;
        Token IDENT93=null;
        Token SEMI97=null;
        Token SEMI103=null;
        Token SEMI105=null;
        JavaParser.block_return block80 =null;

        JavaParser.block_return block82 =null;

        JavaParser.modifierList_return modifierList83 =null;

        JavaParser.genericTypeParameterList_return genericTypeParameterList84 =null;

        JavaParser.type_return type85 =null;

        JavaParser.formalParameterList_return formalParameterList87 =null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList88 =null;

        JavaParser.throwsClause_return throwsClause89 =null;

        JavaParser.block_return block90 =null;

        JavaParser.formalParameterList_return formalParameterList94 =null;

        JavaParser.throwsClause_return throwsClause95 =null;

        JavaParser.block_return block96 =null;

        JavaParser.formalParameterList_return formalParameterList98 =null;

        JavaParser.throwsClause_return throwsClause99 =null;

        JavaParser.block_return block100 =null;

        JavaParser.type_return type101 =null;

        JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList102 =null;

        JavaParser.typeDeclaration_return typeDeclaration104 =null;


        CommonTree ident_tree=null;
        CommonTree STATIC81_tree=null;
        CommonTree IDENT86_tree=null;
        CommonTree SEMI91_tree=null;
        CommonTree VOID92_tree=null;
        CommonTree IDENT93_tree=null;
        CommonTree SEMI97_tree=null;
        CommonTree SEMI103_tree=null;
        CommonTree SEMI105_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // Java.g:724:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
            int alt38=5;
            switch ( input.LA(1) ) {
            case LCURLY:
                {
                alt38=1;
                }
                break;
            case STATIC:
                {
                int LA38_2 = input.LA(2);

                if ( (synpred34_Java()) ) {
                    alt38=2;
                }
                else if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 2, input);

                    throw nvae;

                }
                }
                break;
            case PUBLIC:
                {
                int LA38_3 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 3, input);

                    throw nvae;

                }
                }
                break;
            case PROTECTED:
                {
                int LA38_4 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 4, input);

                    throw nvae;

                }
                }
                break;
            case PRIVATE:
                {
                int LA38_5 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 5, input);

                    throw nvae;

                }
                }
                break;
            case ABSTRACT:
                {
                int LA38_6 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 6, input);

                    throw nvae;

                }
                }
                break;
            case NATIVE:
                {
                int LA38_7 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 7, input);

                    throw nvae;

                }
                }
                break;
            case SYNCHRONIZED:
                {
                int LA38_8 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 8, input);

                    throw nvae;

                }
                }
                break;
            case TRANSIENT:
                {
                int LA38_9 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 9, input);

                    throw nvae;

                }
                }
                break;
            case VOLATILE:
                {
                int LA38_10 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 10, input);

                    throw nvae;

                }
                }
                break;
            case STRICTFP:
                {
                int LA38_11 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 11, input);

                    throw nvae;

                }
                }
                break;
            case FINAL:
                {
                int LA38_12 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 12, input);

                    throw nvae;

                }
                }
                break;
            case AT:
                {
                int LA38_13 = input.LA(2);

                if ( (synpred45_Java()) ) {
                    alt38=3;
                }
                else if ( (synpred46_Java()) ) {
                    alt38=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 13, input);

                    throw nvae;

                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case IDENT:
            case INT:
            case LESS_THAN:
            case LONG:
            case SHORT:
            case VOID:
                {
                alt38=3;
                }
                break;
            case CLASS:
            case ENUM:
            case INTERFACE:
                {
                alt38=4;
                }
                break;
            case SEMI:
                {
                alt38=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }

            switch (alt38) {
                case 1 :
                    // Java.g:724:9: block
                    {
                    pushFollow(FOLLOW_block_in_classScopeDeclarations5823);
                    block80=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block80.getTree());

                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 724:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
                    {
                        // Java.g:724:29: ^( CLASS_INSTANCE_INITIALIZER block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER")
                        , root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:725:9: STATIC block
                    {
                    STATIC81=(Token)match(input,STATIC,FOLLOW_STATIC_in_classScopeDeclarations5852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STATIC.add(STATIC81);


                    pushFollow(FOLLOW_block_in_classScopeDeclarations5854);
                    block82=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block82.getTree());

                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 725:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                    {
                        // Java.g:725:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(CLASS_STATIC_INITIALIZER, STATIC81, "CLASS_STATIC_INITIALIZER")
                        , root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Java.g:726:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_classScopeDeclarations5877);
                    modifierList83=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList83.getTree());

                    // Java.g:727:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt37=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt37=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA37_2 = input.LA(2);

                        if ( (synpred44_Java()) ) {
                            alt37=1;
                        }
                        else if ( (true) ) {
                            alt37=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 37, 2, input);

                            throw nvae;

                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA37_3 = input.LA(2);

                        if ( (synpred44_Java()) ) {
                            alt37=1;
                        }
                        else if ( (true) ) {
                            alt37=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 37, 3, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 37, 0, input);

                        throw nvae;

                    }

                    switch (alt37) {
                        case 1 :
                            // Java.g:727:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            {
                            // Java.g:727:13: ( genericTypeParameterList )?
                            int alt29=2;
                            int LA29_0 = input.LA(1);

                            if ( (LA29_0==LESS_THAN) ) {
                                alt29=1;
                            }
                            switch (alt29) {
                                case 1 :
                                    // Java.g:727:13: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_classScopeDeclarations5891);
                                    genericTypeParameterList84=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList84.getTree());

                                    }
                                    break;

                            }


                            // Java.g:728:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            int alt36=3;
                            switch ( input.LA(1) ) {
                            case BOOLEAN:
                            case BYTE:
                            case CHAR:
                            case DOUBLE:
                            case FLOAT:
                            case INT:
                            case LONG:
                            case SHORT:
                                {
                                alt36=1;
                                }
                                break;
                            case IDENT:
                                {
                                int LA36_2 = input.LA(2);

                                if ( (LA36_2==DOT||LA36_2==IDENT||LA36_2==LBRACK||LA36_2==LESS_THAN) ) {
                                    alt36=1;
                                }
                                else if ( (LA36_2==LPAREN) ) {
                                    alt36=3;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 36, 2, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case VOID:
                                {
                                alt36=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 36, 0, input);

                                throw nvae;

                            }

                            switch (alt36) {
                                case 1 :
                                    // Java.g:728:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                                    {
                                    pushFollow(FOLLOW_type_in_classScopeDeclarations5910);
                                    type85=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type85.getTree());

                                    IDENT86=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5912); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT86);


                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5914);
                                    formalParameterList87=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList87.getTree());

                                    // Java.g:728:48: ( arrayDeclaratorList )?
                                    int alt30=2;
                                    int LA30_0 = input.LA(1);

                                    if ( (LA30_0==LBRACK) ) {
                                        alt30=1;
                                    }
                                    switch (alt30) {
                                        case 1 :
                                            // Java.g:728:48: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5916);
                                            arrayDeclaratorList88=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList88.getTree());

                                            }
                                            break;

                                    }


                                    // Java.g:728:69: ( throwsClause )?
                                    int alt31=2;
                                    int LA31_0 = input.LA(1);

                                    if ( (LA31_0==THROWS) ) {
                                        alt31=1;
                                    }
                                    switch (alt31) {
                                        case 1 :
                                            // Java.g:728:69: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5919);
                                            throwsClause89=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause89.getTree());

                                            }
                                            break;

                                    }


                                    // Java.g:728:83: ( block | SEMI )
                                    int alt32=2;
                                    int LA32_0 = input.LA(1);

                                    if ( (LA32_0==LCURLY) ) {
                                        alt32=1;
                                    }
                                    else if ( (LA32_0==SEMI) ) {
                                        alt32=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 32, 0, input);

                                        throw nvae;

                                    }
                                    switch (alt32) {
                                        case 1 :
                                            // Java.g:728:84: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5923);
                                            block90=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block90.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // Java.g:728:92: SEMI
                                            {
                                            SEMI91=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations5927); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI91);


                                            }
                                            break;

                                    }


                                    // AST REWRITE
                                    // elements: genericTypeParameterList, formalParameterList, arrayDeclaratorList, IDENT, type, modifierList, block, throwsClause
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 729:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                    {
                                        // Java.g:729:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL")
                                        , root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());

                                        // Java.g:729:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();

                                        adaptor.addChild(root_1, stream_type.nextTree());

                                        adaptor.addChild(root_1, 
                                        stream_IDENT.nextNode()
                                        );

                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                                        // Java.g:729:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();

                                        // Java.g:729:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        // Java.g:729:149: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;
                                case 2 :
                                    // Java.g:730:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                                    {
                                    VOID92=(Token)match(input,VOID,FOLLOW_VOID_in_classScopeDeclarations5989); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID92);


                                    IDENT93=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5991); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT93);


                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5993);
                                    formalParameterList94=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList94.getTree());

                                    // Java.g:730:48: ( throwsClause )?
                                    int alt33=2;
                                    int LA33_0 = input.LA(1);

                                    if ( (LA33_0==THROWS) ) {
                                        alt33=1;
                                    }
                                    switch (alt33) {
                                        case 1 :
                                            // Java.g:730:48: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5995);
                                            throwsClause95=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause95.getTree());

                                            }
                                            break;

                                    }


                                    // Java.g:730:62: ( block | SEMI )
                                    int alt34=2;
                                    int LA34_0 = input.LA(1);

                                    if ( (LA34_0==LCURLY) ) {
                                        alt34=1;
                                    }
                                    else if ( (LA34_0==SEMI) ) {
                                        alt34=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 34, 0, input);

                                        throw nvae;

                                    }
                                    switch (alt34) {
                                        case 1 :
                                            // Java.g:730:63: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5999);
                                            block96=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block96.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // Java.g:730:71: SEMI
                                            {
                                            SEMI97=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6003); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI97);


                                            }
                                            break;

                                    }


                                    // AST REWRITE
                                    // elements: throwsClause, genericTypeParameterList, block, formalParameterList, IDENT, modifierList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 731:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                    {
                                        // Java.g:731:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL")
                                        , root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());

                                        // Java.g:731:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();

                                        adaptor.addChild(root_1, 
                                        stream_IDENT.nextNode()
                                        );

                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                                        // Java.g:731:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        // Java.g:731:119: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;
                                case 3 :
                                    // Java.g:732:17: ident= IDENT formalParameterList ( throwsClause )? block
                                    {
                                    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6062); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(ident);


                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6064);
                                    formalParameterList98=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList98.getTree());

                                    // Java.g:732:49: ( throwsClause )?
                                    int alt35=2;
                                    int LA35_0 = input.LA(1);

                                    if ( (LA35_0==THROWS) ) {
                                        alt35=1;
                                    }
                                    switch (alt35) {
                                        case 1 :
                                            // Java.g:732:49: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6066);
                                            throwsClause99=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause99.getTree());

                                            }
                                            break;

                                    }


                                    pushFollow(FOLLOW_block_in_classScopeDeclarations6069);
                                    block100=block();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_block.add(block100.getTree());

                                    // AST REWRITE
                                    // elements: block, formalParameterList, modifierList, throwsClause, genericTypeParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 733:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                    {
                                        // Java.g:733:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL")
                                        , root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());

                                        // Java.g:733:81: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();

                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                                        // Java.g:733:127: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_1, stream_block.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // Java.g:735:13: type classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_classScopeDeclarations6133);
                            type101=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type101.getTree());

                            pushFollow(FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations6135);
                            classFieldDeclaratorList102=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList102.getTree());

                            SEMI103=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6137); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI103);


                            // AST REWRITE
                            // elements: classFieldDeclaratorList, modifierList, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 736:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // Java.g:736:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION")
                                , root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());

                                adaptor.addChild(root_1, stream_type.nextTree());

                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Java.g:738:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_typeDeclaration_in_classScopeDeclarations6182);
                    typeDeclaration104=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration104.getTree());

                    }
                    break;
                case 5 :
                    // Java.g:739:9: SEMI !
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    SEMI105=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6192); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 25, classScopeDeclarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classScopeDeclarations"


    public static class interfaceScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interfaceScopeDeclarations"
    // Java.g:742:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !);
    public final JavaParser.interfaceScopeDeclarations_return interfaceScopeDeclarations() throws RecognitionException {
        JavaParser.interfaceScopeDeclarations_return retval = new JavaParser.interfaceScopeDeclarations_return();
        retval.start = input.LT(1);

        int interfaceScopeDeclarations_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IDENT109=null;
        Token SEMI113=null;
        Token VOID114=null;
        Token IDENT115=null;
        Token SEMI118=null;
        Token SEMI121=null;
        Token SEMI123=null;
        JavaParser.modifierList_return modifierList106 =null;

        JavaParser.genericTypeParameterList_return genericTypeParameterList107 =null;

        JavaParser.type_return type108 =null;

        JavaParser.formalParameterList_return formalParameterList110 =null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList111 =null;

        JavaParser.throwsClause_return throwsClause112 =null;

        JavaParser.formalParameterList_return formalParameterList116 =null;

        JavaParser.throwsClause_return throwsClause117 =null;

        JavaParser.type_return type119 =null;

        JavaParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList120 =null;

        JavaParser.typeDeclaration_return typeDeclaration122 =null;


        CommonTree IDENT109_tree=null;
        CommonTree SEMI113_tree=null;
        CommonTree VOID114_tree=null;
        CommonTree IDENT115_tree=null;
        CommonTree SEMI118_tree=null;
        CommonTree SEMI121_tree=null;
        CommonTree SEMI123_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // Java.g:743:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI !)
            int alt45=3;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                int LA45_1 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 1, input);

                    throw nvae;

                }
                }
                break;
            case PROTECTED:
                {
                int LA45_2 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 2, input);

                    throw nvae;

                }
                }
                break;
            case PRIVATE:
                {
                int LA45_3 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 3, input);

                    throw nvae;

                }
                }
                break;
            case STATIC:
                {
                int LA45_4 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 4, input);

                    throw nvae;

                }
                }
                break;
            case ABSTRACT:
                {
                int LA45_5 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 5, input);

                    throw nvae;

                }
                }
                break;
            case NATIVE:
                {
                int LA45_6 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 6, input);

                    throw nvae;

                }
                }
                break;
            case SYNCHRONIZED:
                {
                int LA45_7 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 7, input);

                    throw nvae;

                }
                }
                break;
            case TRANSIENT:
                {
                int LA45_8 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 8, input);

                    throw nvae;

                }
                }
                break;
            case VOLATILE:
                {
                int LA45_9 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 9, input);

                    throw nvae;

                }
                }
                break;
            case STRICTFP:
                {
                int LA45_10 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 10, input);

                    throw nvae;

                }
                }
                break;
            case FINAL:
                {
                int LA45_11 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 11, input);

                    throw nvae;

                }
                }
                break;
            case AT:
                {
                int LA45_12 = input.LA(2);

                if ( (synpred53_Java()) ) {
                    alt45=1;
                }
                else if ( (synpred54_Java()) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 12, input);

                    throw nvae;

                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case IDENT:
            case INT:
            case LESS_THAN:
            case LONG:
            case SHORT:
            case VOID:
                {
                alt45=1;
                }
                break;
            case CLASS:
            case ENUM:
            case INTERFACE:
                {
                alt45=2;
                }
                break;
            case SEMI:
                {
                alt45=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }

            switch (alt45) {
                case 1 :
                    // Java.g:743:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_interfaceScopeDeclarations6224);
                    modifierList106=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList106.getTree());

                    // Java.g:744:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    int alt44=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt44=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA44_2 = input.LA(2);

                        if ( (synpred52_Java()) ) {
                            alt44=1;
                        }
                        else if ( (true) ) {
                            alt44=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 44, 2, input);

                            throw nvae;

                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA44_3 = input.LA(2);

                        if ( (synpred52_Java()) ) {
                            alt44=1;
                        }
                        else if ( (true) ) {
                            alt44=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 44, 3, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 44, 0, input);

                        throw nvae;

                    }

                    switch (alt44) {
                        case 1 :
                            // Java.g:744:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            {
                            // Java.g:744:13: ( genericTypeParameterList )?
                            int alt39=2;
                            int LA39_0 = input.LA(1);

                            if ( (LA39_0==LESS_THAN) ) {
                                alt39=1;
                            }
                            switch (alt39) {
                                case 1 :
                                    // Java.g:744:13: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6238);
                                    genericTypeParameterList107=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList107.getTree());

                                    }
                                    break;

                            }


                            // Java.g:745:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            int alt43=2;
                            int LA43_0 = input.LA(1);

                            if ( (LA43_0==BOOLEAN||LA43_0==BYTE||LA43_0==CHAR||LA43_0==DOUBLE||LA43_0==FLOAT||LA43_0==IDENT||LA43_0==INT||LA43_0==LONG||LA43_0==SHORT) ) {
                                alt43=1;
                            }
                            else if ( (LA43_0==VOID) ) {
                                alt43=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 43, 0, input);

                                throw nvae;

                            }
                            switch (alt43) {
                                case 1 :
                                    // Java.g:745:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                                    {
                                    pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6257);
                                    type108=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type108.getTree());

                                    IDENT109=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6259); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT109);


                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6261);
                                    formalParameterList110=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList110.getTree());

                                    // Java.g:745:48: ( arrayDeclaratorList )?
                                    int alt40=2;
                                    int LA40_0 = input.LA(1);

                                    if ( (LA40_0==LBRACK) ) {
                                        alt40=1;
                                    }
                                    switch (alt40) {
                                        case 1 :
                                            // Java.g:745:48: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6263);
                                            arrayDeclaratorList111=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList111.getTree());

                                            }
                                            break;

                                    }


                                    // Java.g:745:69: ( throwsClause )?
                                    int alt41=2;
                                    int LA41_0 = input.LA(1);

                                    if ( (LA41_0==THROWS) ) {
                                        alt41=1;
                                    }
                                    switch (alt41) {
                                        case 1 :
                                            // Java.g:745:69: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6266);
                                            throwsClause112=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause112.getTree());

                                            }
                                            break;

                                    }


                                    SEMI113=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6269); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI113);


                                    // AST REWRITE
                                    // elements: arrayDeclaratorList, throwsClause, IDENT, type, modifierList, genericTypeParameterList, formalParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 746:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                    {
                                        // Java.g:746:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL")
                                        , root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());

                                        // Java.g:746:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();

                                        adaptor.addChild(root_1, stream_type.nextTree());

                                        adaptor.addChild(root_1, 
                                        stream_IDENT.nextNode()
                                        );

                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                                        // Java.g:746:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();

                                        // Java.g:746:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;
                                case 2 :
                                    // Java.g:747:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                                    {
                                    VOID114=(Token)match(input,VOID,FOLLOW_VOID_in_interfaceScopeDeclarations6327); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID114);


                                    IDENT115=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6329); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT115);


                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6331);
                                    formalParameterList116=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList116.getTree());

                                    // Java.g:747:48: ( throwsClause )?
                                    int alt42=2;
                                    int LA42_0 = input.LA(1);

                                    if ( (LA42_0==THROWS) ) {
                                        alt42=1;
                                    }
                                    switch (alt42) {
                                        case 1 :
                                            // Java.g:747:48: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6333);
                                            throwsClause117=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause117.getTree());

                                            }
                                            break;

                                    }


                                    SEMI118=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6336); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI118);


                                    // AST REWRITE
                                    // elements: modifierList, formalParameterList, IDENT, genericTypeParameterList, throwsClause
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 748:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                    {
                                        // Java.g:748:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL")
                                        , root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());

                                        // Java.g:748:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();

                                        adaptor.addChild(root_1, 
                                        stream_IDENT.nextNode()
                                        );

                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                                        // Java.g:748:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // Java.g:750:13: type interfaceFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6399);
                            type119=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type119.getTree());

                            pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6401);
                            interfaceFieldDeclaratorList120=interfaceFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceFieldDeclaratorList.add(interfaceFieldDeclaratorList120.getTree());

                            SEMI121=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6403); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI121);


                            // AST REWRITE
                            // elements: interfaceFieldDeclaratorList, type, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 751:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                            {
                                // Java.g:751:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION")
                                , root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());

                                adaptor.addChild(root_1, stream_type.nextTree());

                                adaptor.addChild(root_1, stream_interfaceFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Java.g:753:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6448);
                    typeDeclaration122=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration122.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:754:9: SEMI !
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    SEMI123=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6458); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 26, interfaceScopeDeclarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interfaceScopeDeclarations"


    public static class classFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFieldDeclaratorList"
    // Java.g:757:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
    public final JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList() throws RecognitionException {
        JavaParser.classFieldDeclaratorList_return retval = new JavaParser.classFieldDeclaratorList_return();
        retval.start = input.LT(1);

        int classFieldDeclaratorList_StartIndex = input.index();

        CommonTree root_0 = null;

        Token COMMA125=null;
        JavaParser.classFieldDeclarator_return classFieldDeclarator124 =null;

        JavaParser.classFieldDeclarator_return classFieldDeclarator126 =null;


        CommonTree COMMA125_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // Java.g:758:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
            // Java.g:758:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
            {
            pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6478);
            classFieldDeclarator124=classFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator124.getTree());

            // Java.g:758:30: ( COMMA classFieldDeclarator )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==COMMA) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // Java.g:758:31: COMMA classFieldDeclarator
            	    {
            	    COMMA125=(Token)match(input,COMMA,FOLLOW_COMMA_in_classFieldDeclaratorList6481); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA125);


            	    pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6483);
            	    classFieldDeclarator126=classFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator126.getTree());

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            // AST REWRITE
            // elements: classFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 759:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
            {
                // Java.g:759:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST")
                , root_1);

                if ( !(stream_classFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFieldDeclarator.nextTree());

                }
                stream_classFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 27, classFieldDeclaratorList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFieldDeclaratorList"


    public static class classFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFieldDeclarator"
    // Java.g:762:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
    public final JavaParser.classFieldDeclarator_return classFieldDeclarator() throws RecognitionException {
        JavaParser.classFieldDeclarator_return retval = new JavaParser.classFieldDeclarator_return();
        retval.start = input.LT(1);

        int classFieldDeclarator_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ASSIGN128=null;
        JavaParser.variableDeclaratorId_return variableDeclaratorId127 =null;

        JavaParser.variableInitializer_return variableInitializer129 =null;


        CommonTree ASSIGN128_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // Java.g:763:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
            // Java.g:763:9: variableDeclaratorId ( ASSIGN variableInitializer )?
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_classFieldDeclarator6522);
            variableDeclaratorId127=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId127.getTree());

            // Java.g:763:30: ( ASSIGN variableInitializer )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==ASSIGN) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // Java.g:763:31: ASSIGN variableInitializer
                    {
                    ASSIGN128=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_classFieldDeclarator6525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN128);


                    pushFollow(FOLLOW_variableInitializer_in_classFieldDeclarator6527);
                    variableInitializer129=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer129.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: variableInitializer, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 764:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
            {
                // Java.g:764:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR")
                , root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                // Java.g:764:51: ( variableInitializer )?
                if ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 28, classFieldDeclarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFieldDeclarator"


    public static class interfaceFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interfaceFieldDeclaratorList"
    // Java.g:767:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
    public final JavaParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList() throws RecognitionException {
        JavaParser.interfaceFieldDeclaratorList_return retval = new JavaParser.interfaceFieldDeclaratorList_return();
        retval.start = input.LT(1);

        int interfaceFieldDeclaratorList_StartIndex = input.index();

        CommonTree root_0 = null;

        Token COMMA131=null;
        JavaParser.interfaceFieldDeclarator_return interfaceFieldDeclarator130 =null;

        JavaParser.interfaceFieldDeclarator_return interfaceFieldDeclarator132 =null;


        CommonTree COMMA131_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // Java.g:768:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
            // Java.g:768:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
            {
            pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6572);
            interfaceFieldDeclarator130=interfaceFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator130.getTree());

            // Java.g:768:34: ( COMMA interfaceFieldDeclarator )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==COMMA) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // Java.g:768:35: COMMA interfaceFieldDeclarator
            	    {
            	    COMMA131=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceFieldDeclaratorList6575); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA131);


            	    pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6577);
            	    interfaceFieldDeclarator132=interfaceFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator132.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            // AST REWRITE
            // elements: interfaceFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 769:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
            {
                // Java.g:769:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST")
                , root_1);

                if ( !(stream_interfaceFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_interfaceFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceFieldDeclarator.nextTree());

                }
                stream_interfaceFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 29, interfaceFieldDeclaratorList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclaratorList"


    public static class interfaceFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interfaceFieldDeclarator"
    // Java.g:772:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
    public final JavaParser.interfaceFieldDeclarator_return interfaceFieldDeclarator() throws RecognitionException {
        JavaParser.interfaceFieldDeclarator_return retval = new JavaParser.interfaceFieldDeclarator_return();
        retval.start = input.LT(1);

        int interfaceFieldDeclarator_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ASSIGN134=null;
        JavaParser.variableDeclaratorId_return variableDeclaratorId133 =null;

        JavaParser.variableInitializer_return variableInitializer135 =null;


        CommonTree ASSIGN134_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // Java.g:773:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
            // Java.g:773:9: variableDeclaratorId ASSIGN variableInitializer
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6616);
            variableDeclaratorId133=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId133.getTree());

            ASSIGN134=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_interfaceFieldDeclarator6618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN134);


            pushFollow(FOLLOW_variableInitializer_in_interfaceFieldDeclarator6620);
            variableInitializer135=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer135.getTree());

            // AST REWRITE
            // elements: variableInitializer, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 774:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
            {
                // Java.g:774:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR")
                , root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 30, interfaceFieldDeclarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclarator"


    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variableDeclaratorId"
    // Java.g:777:1: variableDeclaratorId : IDENT ^ ( arrayDeclaratorList )? ;
    public final JavaParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        JavaParser.variableDeclaratorId_return retval = new JavaParser.variableDeclaratorId_return();
        retval.start = input.LT(1);

        int variableDeclaratorId_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IDENT136=null;
        JavaParser.arrayDeclaratorList_return arrayDeclaratorList137 =null;


        CommonTree IDENT136_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // Java.g:778:5: ( IDENT ^ ( arrayDeclaratorList )? )
            // Java.g:778:9: IDENT ^ ( arrayDeclaratorList )?
            {
            root_0 = (CommonTree)adaptor.nil();


            IDENT136=(Token)match(input,IDENT,FOLLOW_IDENT_in_variableDeclaratorId6662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT136_tree = 
            (CommonTree)adaptor.create(IDENT136)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT136_tree, root_0);
            }

            // Java.g:778:16: ( arrayDeclaratorList )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==LBRACK) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // Java.g:778:16: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6665);
                    arrayDeclaratorList137=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList137.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 31, variableDeclaratorId_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"


    public static class variableInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variableInitializer"
    // Java.g:781:1: variableInitializer : ( arrayInitializer | expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);

        int variableInitializer_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.arrayInitializer_return arrayInitializer138 =null;

        JavaParser.expression_return expression139 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // Java.g:782:5: ( arrayInitializer | expression )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==LCURLY) ) {
                alt50=1;
            }
            else if ( (LA50_0==BOOLEAN||LA50_0==BYTE||(LA50_0 >= CHAR && LA50_0 <= CHARACTER_LITERAL)||LA50_0==DEC||LA50_0==DECIMAL_LITERAL||LA50_0==DOUBLE||LA50_0==FALSE||(LA50_0 >= FLOAT && LA50_0 <= FLOATING_POINT_LITERAL)||LA50_0==HEX_LITERAL||LA50_0==IDENT||LA50_0==INC||LA50_0==INT||LA50_0==LESS_THAN||LA50_0==LOGICAL_NOT||(LA50_0 >= LONG && LA50_0 <= LPAREN)||LA50_0==MINUS||LA50_0==NEW||LA50_0==NOT||LA50_0==NULL||LA50_0==OCTAL_LITERAL||LA50_0==PLUS||LA50_0==SHORT||(LA50_0 >= STRING_LITERAL && LA50_0 <= SUPER)||LA50_0==THIS||LA50_0==TRUE||LA50_0==VOID) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
                case 1 :
                    // Java.g:782:9: arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer6685);
                    arrayInitializer138=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer138.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:783:9: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_variableInitializer6695);
                    expression139=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression139.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 32, variableInitializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variableInitializer"


    public static class arrayDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayDeclarator"
    // Java.g:786:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
    public final JavaParser.arrayDeclarator_return arrayDeclarator() throws RecognitionException {
        JavaParser.arrayDeclarator_return retval = new JavaParser.arrayDeclarator_return();
        retval.start = input.LT(1);

        int arrayDeclarator_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LBRACK140=null;
        Token RBRACK141=null;

        CommonTree LBRACK140_tree=null;
        CommonTree RBRACK141_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // Java.g:787:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
            // Java.g:787:9: LBRACK RBRACK
            {
            LBRACK140=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayDeclarator6714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK140);


            RBRACK141=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayDeclarator6716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK141);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 788:9: -> ^( ARRAY_DECLARATOR )
            {
                // Java.g:788:13: ^( ARRAY_DECLARATOR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 33, arrayDeclarator_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayDeclarator"


    public static class arrayDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayDeclaratorList"
    // Java.g:791:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
    public final JavaParser.arrayDeclaratorList_return arrayDeclaratorList() throws RecognitionException {
        JavaParser.arrayDeclaratorList_return retval = new JavaParser.arrayDeclaratorList_return();
        retval.start = input.LT(1);

        int arrayDeclaratorList_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.arrayDeclarator_return arrayDeclarator142 =null;


        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // Java.g:792:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
            // Java.g:792:9: ( arrayDeclarator )+
            {
            // Java.g:792:9: ( arrayDeclarator )+
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==LBRACK) ) {
                    int LA51_2 = input.LA(2);

                    if ( (synpred60_Java()) ) {
                        alt51=1;
                    }


                }


                switch (alt51) {
            	case 1 :
            	    // Java.g:792:9: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_arrayDeclaratorList6750);
            	    arrayDeclarator142=arrayDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator142.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);


            // AST REWRITE
            // elements: arrayDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 793:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
            {
                // Java.g:793:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST")
                , root_1);

                if ( !(stream_arrayDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_arrayDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclarator.nextTree());

                }
                stream_arrayDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 34, arrayDeclaratorList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayDeclaratorList"


    public static class arrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayInitializer"
    // Java.g:796:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
    public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);

        int arrayInitializer_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LCURLY143=null;
        Token COMMA145=null;
        Token COMMA147=null;
        Token RCURLY148=null;
        JavaParser.variableInitializer_return variableInitializer144 =null;

        JavaParser.variableInitializer_return variableInitializer146 =null;


        CommonTree LCURLY143_tree=null;
        CommonTree COMMA145_tree=null;
        CommonTree COMMA147_tree=null;
        CommonTree RCURLY148_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // Java.g:797:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
            // Java.g:797:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
            {
            LCURLY143=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayInitializer6795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY143);


            // Java.g:797:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==BOOLEAN||LA54_0==BYTE||(LA54_0 >= CHAR && LA54_0 <= CHARACTER_LITERAL)||LA54_0==DEC||LA54_0==DECIMAL_LITERAL||LA54_0==DOUBLE||LA54_0==FALSE||(LA54_0 >= FLOAT && LA54_0 <= FLOATING_POINT_LITERAL)||LA54_0==HEX_LITERAL||LA54_0==IDENT||LA54_0==INC||LA54_0==INT||LA54_0==LCURLY||LA54_0==LESS_THAN||LA54_0==LOGICAL_NOT||(LA54_0 >= LONG && LA54_0 <= LPAREN)||LA54_0==MINUS||LA54_0==NEW||LA54_0==NOT||LA54_0==NULL||LA54_0==OCTAL_LITERAL||LA54_0==PLUS||LA54_0==SHORT||(LA54_0 >= STRING_LITERAL && LA54_0 <= SUPER)||LA54_0==THIS||LA54_0==TRUE||LA54_0==VOID) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // Java.g:797:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6798);
                    variableInitializer144=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer144.getTree());

                    // Java.g:797:37: ( COMMA variableInitializer )*
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);

                        if ( (LA52_0==COMMA) ) {
                            int LA52_1 = input.LA(2);

                            if ( (LA52_1==BOOLEAN||LA52_1==BYTE||(LA52_1 >= CHAR && LA52_1 <= CHARACTER_LITERAL)||LA52_1==DEC||LA52_1==DECIMAL_LITERAL||LA52_1==DOUBLE||LA52_1==FALSE||(LA52_1 >= FLOAT && LA52_1 <= FLOATING_POINT_LITERAL)||LA52_1==HEX_LITERAL||LA52_1==IDENT||LA52_1==INC||LA52_1==INT||LA52_1==LCURLY||LA52_1==LESS_THAN||LA52_1==LOGICAL_NOT||(LA52_1 >= LONG && LA52_1 <= LPAREN)||LA52_1==MINUS||LA52_1==NEW||LA52_1==NOT||LA52_1==NULL||LA52_1==OCTAL_LITERAL||LA52_1==PLUS||LA52_1==SHORT||(LA52_1 >= STRING_LITERAL && LA52_1 <= SUPER)||LA52_1==THIS||LA52_1==TRUE||LA52_1==VOID) ) {
                                alt52=1;
                            }


                        }


                        switch (alt52) {
                    	case 1 :
                    	    // Java.g:797:38: COMMA variableInitializer
                    	    {
                    	    COMMA145=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6801); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA145);


                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6803);
                    	    variableInitializer146=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer146.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop52;
                        }
                    } while (true);


                    // Java.g:797:66: ( COMMA )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==COMMA) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // Java.g:797:66: COMMA
                            {
                            COMMA147=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6807); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA147);


                            }
                            break;

                    }


                    }
                    break;

            }


            RCURLY148=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayInitializer6812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY148);


            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 798:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
            {
                // Java.g:798:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(ARRAY_INITIALIZER, LCURLY143, "ARRAY_INITIALIZER")
                , root_1);

                // Java.g:798:63: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 35, arrayInitializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"


    public static class throwsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throwsClause"
    // Java.g:801:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
    public final JavaParser.throwsClause_return throwsClause() throws RecognitionException {
        JavaParser.throwsClause_return retval = new JavaParser.throwsClause_return();
        retval.start = input.LT(1);

        int throwsClause_StartIndex = input.index();

        CommonTree root_0 = null;

        Token THROWS149=null;
        JavaParser.qualifiedIdentList_return qualifiedIdentList150 =null;


        CommonTree THROWS149_tree=null;
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // Java.g:802:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
            // Java.g:802:9: THROWS qualifiedIdentList
            {
            THROWS149=(Token)match(input,THROWS,FOLLOW_THROWS_in_throwsClause6850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THROWS.add(THROWS149);


            pushFollow(FOLLOW_qualifiedIdentList_in_throwsClause6852);
            qualifiedIdentList150=qualifiedIdentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentList.add(qualifiedIdentList150.getTree());

            // AST REWRITE
            // elements: qualifiedIdentList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 803:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
            {
                // Java.g:803:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(THROWS_CLAUSE, THROWS149, "THROWS_CLAUSE")
                , root_1);

                adaptor.addChild(root_1, stream_qualifiedIdentList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 36, throwsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "throwsClause"


    public static class modifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "modifierList"
    // Java.g:806:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
    public final JavaParser.modifierList_return modifierList() throws RecognitionException {
        JavaParser.modifierList_return retval = new JavaParser.modifierList_return();
        retval.start = input.LT(1);

        int modifierList_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.modifier_return modifier151 =null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // Java.g:807:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
            // Java.g:807:9: ( modifier )*
            {
            // Java.g:807:9: ( modifier )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==AT) ) {
                    int LA55_2 = input.LA(2);

                    if ( (LA55_2==IDENT) ) {
                        alt55=1;
                    }


                }
                else if ( (LA55_0==ABSTRACT||LA55_0==FINAL||LA55_0==NATIVE||(LA55_0 >= PRIVATE && LA55_0 <= PUBLIC)||LA55_0==STATIC||LA55_0==STRICTFP||LA55_0==SYNCHRONIZED||LA55_0==TRANSIENT||LA55_0==VOLATILE) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // Java.g:807:9: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifierList6889);
            	    modifier151=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier151.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            // AST REWRITE
            // elements: modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 808:9: -> ^( MODIFIER_LIST ( modifier )* )
            {
                // Java.g:808:13: ^( MODIFIER_LIST ( modifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(MODIFIER_LIST, "MODIFIER_LIST")
                , root_1);

                // Java.g:808:29: ( modifier )*
                while ( stream_modifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifier.nextTree());

                }
                stream_modifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 37, modifierList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "modifierList"


    public static class modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "modifier"
    // Java.g:811:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
    public final JavaParser.modifier_return modifier() throws RecognitionException {
        JavaParser.modifier_return retval = new JavaParser.modifier_return();
        retval.start = input.LT(1);

        int modifier_StartIndex = input.index();

        CommonTree root_0 = null;

        Token PUBLIC152=null;
        Token PROTECTED153=null;
        Token PRIVATE154=null;
        Token STATIC155=null;
        Token ABSTRACT156=null;
        Token NATIVE157=null;
        Token SYNCHRONIZED158=null;
        Token TRANSIENT159=null;
        Token VOLATILE160=null;
        Token STRICTFP161=null;
        JavaParser.localModifier_return localModifier162 =null;


        CommonTree PUBLIC152_tree=null;
        CommonTree PROTECTED153_tree=null;
        CommonTree PRIVATE154_tree=null;
        CommonTree STATIC155_tree=null;
        CommonTree ABSTRACT156_tree=null;
        CommonTree NATIVE157_tree=null;
        CommonTree SYNCHRONIZED158_tree=null;
        CommonTree TRANSIENT159_tree=null;
        CommonTree VOLATILE160_tree=null;
        CommonTree STRICTFP161_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // Java.g:812:5: ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
            int alt56=11;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                alt56=1;
                }
                break;
            case PROTECTED:
                {
                alt56=2;
                }
                break;
            case PRIVATE:
                {
                alt56=3;
                }
                break;
            case STATIC:
                {
                alt56=4;
                }
                break;
            case ABSTRACT:
                {
                alt56=5;
                }
                break;
            case NATIVE:
                {
                alt56=6;
                }
                break;
            case SYNCHRONIZED:
                {
                alt56=7;
                }
                break;
            case TRANSIENT:
                {
                alt56=8;
                }
                break;
            case VOLATILE:
                {
                alt56=9;
                }
                break;
            case STRICTFP:
                {
                alt56=10;
                }
                break;
            case AT:
            case FINAL:
                {
                alt56=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }

            switch (alt56) {
                case 1 :
                    // Java.g:812:9: PUBLIC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    PUBLIC152=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_modifier6930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PUBLIC152_tree = 
                    (CommonTree)adaptor.create(PUBLIC152)
                    ;
                    adaptor.addChild(root_0, PUBLIC152_tree);
                    }

                    }
                    break;
                case 2 :
                    // Java.g:813:9: PROTECTED
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    PROTECTED153=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_modifier6940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROTECTED153_tree = 
                    (CommonTree)adaptor.create(PROTECTED153)
                    ;
                    adaptor.addChild(root_0, PROTECTED153_tree);
                    }

                    }
                    break;
                case 3 :
                    // Java.g:814:9: PRIVATE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    PRIVATE154=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_modifier6950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIVATE154_tree = 
                    (CommonTree)adaptor.create(PRIVATE154)
                    ;
                    adaptor.addChild(root_0, PRIVATE154_tree);
                    }

                    }
                    break;
                case 4 :
                    // Java.g:815:9: STATIC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    STATIC155=(Token)match(input,STATIC,FOLLOW_STATIC_in_modifier6960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC155_tree = 
                    (CommonTree)adaptor.create(STATIC155)
                    ;
                    adaptor.addChild(root_0, STATIC155_tree);
                    }

                    }
                    break;
                case 5 :
                    // Java.g:816:9: ABSTRACT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    ABSTRACT156=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_modifier6970); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ABSTRACT156_tree = 
                    (CommonTree)adaptor.create(ABSTRACT156)
                    ;
                    adaptor.addChild(root_0, ABSTRACT156_tree);
                    }

                    }
                    break;
                case 6 :
                    // Java.g:817:9: NATIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    NATIVE157=(Token)match(input,NATIVE,FOLLOW_NATIVE_in_modifier6980); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NATIVE157_tree = 
                    (CommonTree)adaptor.create(NATIVE157)
                    ;
                    adaptor.addChild(root_0, NATIVE157_tree);
                    }

                    }
                    break;
                case 7 :
                    // Java.g:818:9: SYNCHRONIZED
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    SYNCHRONIZED158=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_modifier6990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SYNCHRONIZED158_tree = 
                    (CommonTree)adaptor.create(SYNCHRONIZED158)
                    ;
                    adaptor.addChild(root_0, SYNCHRONIZED158_tree);
                    }

                    }
                    break;
                case 8 :
                    // Java.g:819:9: TRANSIENT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    TRANSIENT159=(Token)match(input,TRANSIENT,FOLLOW_TRANSIENT_in_modifier7000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRANSIENT159_tree = 
                    (CommonTree)adaptor.create(TRANSIENT159)
                    ;
                    adaptor.addChild(root_0, TRANSIENT159_tree);
                    }

                    }
                    break;
                case 9 :
                    // Java.g:820:9: VOLATILE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    VOLATILE160=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_modifier7010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VOLATILE160_tree = 
                    (CommonTree)adaptor.create(VOLATILE160)
                    ;
                    adaptor.addChild(root_0, VOLATILE160_tree);
                    }

                    }
                    break;
                case 10 :
                    // Java.g:821:9: STRICTFP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    STRICTFP161=(Token)match(input,STRICTFP,FOLLOW_STRICTFP_in_modifier7020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRICTFP161_tree = 
                    (CommonTree)adaptor.create(STRICTFP161)
                    ;
                    adaptor.addChild(root_0, STRICTFP161_tree);
                    }

                    }
                    break;
                case 11 :
                    // Java.g:822:9: localModifier
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_localModifier_in_modifier7030);
                    localModifier162=localModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localModifier162.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 38, modifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "modifier"


    public static class localModifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "localModifierList"
    // Java.g:825:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
    public final JavaParser.localModifierList_return localModifierList() throws RecognitionException {
        JavaParser.localModifierList_return retval = new JavaParser.localModifierList_return();
        retval.start = input.LT(1);

        int localModifierList_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.localModifier_return localModifier163 =null;


        RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // Java.g:826:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
            // Java.g:826:9: ( localModifier )*
            {
            // Java.g:826:9: ( localModifier )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==AT||LA57_0==FINAL) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // Java.g:826:9: localModifier
            	    {
            	    pushFollow(FOLLOW_localModifier_in_localModifierList7049);
            	    localModifier163=localModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_localModifier.add(localModifier163.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            // AST REWRITE
            // elements: localModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 827:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
            {
                // Java.g:827:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST")
                , root_1);

                // Java.g:827:34: ( localModifier )*
                while ( stream_localModifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_localModifier.nextTree());

                }
                stream_localModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 39, localModifierList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "localModifierList"


    public static class localModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "localModifier"
    // Java.g:830:1: localModifier : ( FINAL | annotation );
    public final JavaParser.localModifier_return localModifier() throws RecognitionException {
        JavaParser.localModifier_return retval = new JavaParser.localModifier_return();
        retval.start = input.LT(1);

        int localModifier_StartIndex = input.index();

        CommonTree root_0 = null;

        Token FINAL164=null;
        JavaParser.annotation_return annotation165 =null;


        CommonTree FINAL164_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // Java.g:831:5: ( FINAL | annotation )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==FINAL) ) {
                alt58=1;
            }
            else if ( (LA58_0==AT) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // Java.g:831:9: FINAL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    FINAL164=(Token)match(input,FINAL,FOLLOW_FINAL_in_localModifier7090); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL164_tree = 
                    (CommonTree)adaptor.create(FINAL164)
                    ;
                    adaptor.addChild(root_0, FINAL164_tree);
                    }

                    }
                    break;
                case 2 :
                    // Java.g:832:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_annotation_in_localModifier7100);
                    annotation165=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation165.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 40, localModifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "localModifier"


    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // Java.g:835:1: type : ( simpleType | objectType );
    public final JavaParser.type_return type() throws RecognitionException {
        JavaParser.type_return retval = new JavaParser.type_return();
        retval.start = input.LT(1);

        int type_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.simpleType_return simpleType166 =null;

        JavaParser.objectType_return objectType167 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // Java.g:836:5: ( simpleType | objectType )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==BOOLEAN||LA59_0==BYTE||LA59_0==CHAR||LA59_0==DOUBLE||LA59_0==FLOAT||LA59_0==INT||LA59_0==LONG||LA59_0==SHORT) ) {
                alt59=1;
            }
            else if ( (LA59_0==IDENT) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // Java.g:836:9: simpleType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_simpleType_in_type7119);
                    simpleType166=simpleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType166.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:837:9: objectType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_objectType_in_type7129);
                    objectType167=objectType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, objectType167.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 41, type_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "type"


    public static class simpleType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simpleType"
    // Java.g:840:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
    public final JavaParser.simpleType_return simpleType() throws RecognitionException {
        JavaParser.simpleType_return retval = new JavaParser.simpleType_return();
        retval.start = input.LT(1);

        int simpleType_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.primitiveType_return primitiveType168 =null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList169 =null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // Java.g:841:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
            // Java.g:841:9: primitiveType ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_primitiveType_in_simpleType7149);
            primitiveType168=primitiveType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType168.getTree());

            // Java.g:841:23: ( arrayDeclaratorList )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==LBRACK) ) {
                int LA60_1 = input.LA(2);

                if ( (LA60_1==RBRACK) ) {
                    int LA60_3 = input.LA(3);

                    if ( (synpred78_Java()) ) {
                        alt60=1;
                    }
                }
            }
            switch (alt60) {
                case 1 :
                    // Java.g:841:23: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_simpleType7151);
                    arrayDeclaratorList169=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList169.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: arrayDeclaratorList, primitiveType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 842:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
            {
                // Java.g:842:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_primitiveType.nextTree());

                // Java.g:842:34: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 42, simpleType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simpleType"


    public static class objectType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "objectType"
    // Java.g:845:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
    public final JavaParser.objectType_return objectType() throws RecognitionException {
        JavaParser.objectType_return retval = new JavaParser.objectType_return();
        retval.start = input.LT(1);

        int objectType_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.qualifiedTypeIdent_return qualifiedTypeIdent170 =null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList171 =null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // Java.g:846:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
            // Java.g:846:9: qualifiedTypeIdent ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdent_in_objectType7198);
            qualifiedTypeIdent170=qualifiedTypeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdent.add(qualifiedTypeIdent170.getTree());

            // Java.g:846:28: ( arrayDeclaratorList )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==LBRACK) ) {
                int LA61_1 = input.LA(2);

                if ( (synpred79_Java()) ) {
                    alt61=1;
                }
            }
            switch (alt61) {
                case 1 :
                    // Java.g:846:28: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectType7200);
                    arrayDeclaratorList171=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList171.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: arrayDeclaratorList, qualifiedTypeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 847:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
            {
                // Java.g:847:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdent.nextTree());

                // Java.g:847:39: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 43, objectType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "objectType"


    public static class objectTypeSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "objectTypeSimplified"
    // Java.g:850:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
    public final JavaParser.objectTypeSimplified_return objectTypeSimplified() throws RecognitionException {
        JavaParser.objectTypeSimplified_return retval = new JavaParser.objectTypeSimplified_return();
        retval.start = input.LT(1);

        int objectTypeSimplified_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified172 =null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList173 =null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // Java.g:851:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
            // Java.g:851:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7240);
            qualifiedTypeIdentSimplified172=qualifiedTypeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified172.getTree());

            // Java.g:851:38: ( arrayDeclaratorList )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==LBRACK) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // Java.g:851:38: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7242);
                    arrayDeclaratorList173=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList173.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: arrayDeclaratorList, qualifiedTypeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 852:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
            {
                // Java.g:852:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());

                // Java.g:852:49: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 44, objectTypeSimplified_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "objectTypeSimplified"


    public static class qualifiedTypeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualifiedTypeIdent"
    // Java.g:855:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
    public final JavaParser.qualifiedTypeIdent_return qualifiedTypeIdent() throws RecognitionException {
        JavaParser.qualifiedTypeIdent_return retval = new JavaParser.qualifiedTypeIdent_return();
        retval.start = input.LT(1);

        int qualifiedTypeIdent_StartIndex = input.index();

        CommonTree root_0 = null;

        Token DOT175=null;
        JavaParser.typeIdent_return typeIdent174 =null;

        JavaParser.typeIdent_return typeIdent176 =null;


        CommonTree DOT175_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // Java.g:856:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
            // Java.g:856:9: typeIdent ( DOT typeIdent )*
            {
            pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7282);
            typeIdent174=typeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent174.getTree());

            // Java.g:856:19: ( DOT typeIdent )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==DOT) ) {
                    int LA63_2 = input.LA(2);

                    if ( (synpred81_Java()) ) {
                        alt63=1;
                    }


                }


                switch (alt63) {
            	case 1 :
            	    // Java.g:856:20: DOT typeIdent
            	    {
            	    DOT175=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdent7285); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT175);


            	    pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7287);
            	    typeIdent176=typeIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent176.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            // AST REWRITE
            // elements: typeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 857:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
            {
                // Java.g:857:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT")
                , root_1);

                if ( !(stream_typeIdent.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdent.nextTree());

                }
                stream_typeIdent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 45, qualifiedTypeIdent_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdent"


    public static class qualifiedTypeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualifiedTypeIdentSimplified"
    // Java.g:860:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
    public final JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified() throws RecognitionException {
        JavaParser.qualifiedTypeIdentSimplified_return retval = new JavaParser.qualifiedTypeIdentSimplified_return();
        retval.start = input.LT(1);

        int qualifiedTypeIdentSimplified_StartIndex = input.index();

        CommonTree root_0 = null;

        Token DOT178=null;
        JavaParser.typeIdentSimplified_return typeIdentSimplified177 =null;

        JavaParser.typeIdentSimplified_return typeIdentSimplified179 =null;


        CommonTree DOT178_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // Java.g:861:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
            // Java.g:861:9: typeIdentSimplified ( DOT typeIdentSimplified )*
            {
            pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7327);
            typeIdentSimplified177=typeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified177.getTree());

            // Java.g:861:29: ( DOT typeIdentSimplified )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==DOT) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // Java.g:861:30: DOT typeIdentSimplified
            	    {
            	    DOT178=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdentSimplified7330); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT178);


            	    pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7332);
            	    typeIdentSimplified179=typeIdentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified179.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            // AST REWRITE
            // elements: typeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 862:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
            {
                // Java.g:862:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT")
                , root_1);

                if ( !(stream_typeIdentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdentSimplified.nextTree());

                }
                stream_typeIdentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 46, qualifiedTypeIdentSimplified_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdentSimplified"


    public static class typeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeIdent"
    // Java.g:865:1: typeIdent : IDENT ^ ( genericTypeArgumentList )? ;
    public final JavaParser.typeIdent_return typeIdent() throws RecognitionException {
        JavaParser.typeIdent_return retval = new JavaParser.typeIdent_return();
        retval.start = input.LT(1);

        int typeIdent_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IDENT180=null;
        JavaParser.genericTypeArgumentList_return genericTypeArgumentList181 =null;


        CommonTree IDENT180_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // Java.g:866:5: ( IDENT ^ ( genericTypeArgumentList )? )
            // Java.g:866:9: IDENT ^ ( genericTypeArgumentList )?
            {
            root_0 = (CommonTree)adaptor.nil();


            IDENT180=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdent7372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT180_tree = 
            (CommonTree)adaptor.create(IDENT180)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT180_tree, root_0);
            }

            // Java.g:866:16: ( genericTypeArgumentList )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==LESS_THAN) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // Java.g:866:16: genericTypeArgumentList
                    {
                    pushFollow(FOLLOW_genericTypeArgumentList_in_typeIdent7375);
                    genericTypeArgumentList181=genericTypeArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentList181.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 47, typeIdent_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeIdent"


    public static class typeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeIdentSimplified"
    // Java.g:869:1: typeIdentSimplified : IDENT ^ ( genericTypeArgumentListSimplified )? ;
    public final JavaParser.typeIdentSimplified_return typeIdentSimplified() throws RecognitionException {
        JavaParser.typeIdentSimplified_return retval = new JavaParser.typeIdentSimplified_return();
        retval.start = input.LT(1);

        int typeIdentSimplified_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IDENT182=null;
        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified183 =null;


        CommonTree IDENT182_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // Java.g:870:5: ( IDENT ^ ( genericTypeArgumentListSimplified )? )
            // Java.g:870:9: IDENT ^ ( genericTypeArgumentListSimplified )?
            {
            root_0 = (CommonTree)adaptor.nil();


            IDENT182=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdentSimplified7395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT182_tree = 
            (CommonTree)adaptor.create(IDENT182)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT182_tree, root_0);
            }

            // Java.g:870:16: ( genericTypeArgumentListSimplified )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==LESS_THAN) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // Java.g:870:16: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7398);
                    genericTypeArgumentListSimplified183=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentListSimplified183.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 48, typeIdentSimplified_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeIdentSimplified"


    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primitiveType"
    // Java.g:873:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
    public final JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        JavaParser.primitiveType_return retval = new JavaParser.primitiveType_return();
        retval.start = input.LT(1);

        int primitiveType_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set184=null;

        CommonTree set184_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // Java.g:874:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
            // Java.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set184=(Token)input.LT(1);

            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set184)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 49, primitiveType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primitiveType"


    public static class genericTypeArgumentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "genericTypeArgumentList"
    // Java.g:884:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
    public final JavaParser.genericTypeArgumentList_return genericTypeArgumentList() throws RecognitionException {
        JavaParser.genericTypeArgumentList_return retval = new JavaParser.genericTypeArgumentList_return();
        retval.start = input.LT(1);

        int genericTypeArgumentList_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LESS_THAN185=null;
        Token COMMA187=null;
        JavaParser.genericTypeArgument_return genericTypeArgument186 =null;

        JavaParser.genericTypeArgument_return genericTypeArgument188 =null;

        JavaParser.genericTypeListClosing_return genericTypeListClosing189 =null;


        CommonTree LESS_THAN185_tree=null;
        CommonTree COMMA187_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // Java.g:885:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
            // Java.g:885:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
            {
            LESS_THAN185=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentList7507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN185);


            pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7509);
            genericTypeArgument186=genericTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument186.getTree());

            // Java.g:885:39: ( COMMA genericTypeArgument )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==COMMA) ) {
                    int LA67_2 = input.LA(2);

                    if ( (synpred92_Java()) ) {
                        alt67=1;
                    }


                }


                switch (alt67) {
            	case 1 :
            	    // Java.g:885:40: COMMA genericTypeArgument
            	    {
            	    COMMA187=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentList7512); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA187);


            	    pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7514);
            	    genericTypeArgument188=genericTypeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument188.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7518);
            genericTypeListClosing189=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing189.getTree());

            // AST REWRITE
            // elements: genericTypeArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 886:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
            {
                // Java.g:886:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN185, "GENERIC_TYPE_ARG_LIST")
                , root_1);

                if ( !(stream_genericTypeArgument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgument.nextTree());

                }
                stream_genericTypeArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 50, genericTypeArgumentList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentList"


    public static class genericTypeArgument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "genericTypeArgument"
    // Java.g:889:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
    public final JavaParser.genericTypeArgument_return genericTypeArgument() throws RecognitionException {
        JavaParser.genericTypeArgument_return retval = new JavaParser.genericTypeArgument_return();
        retval.start = input.LT(1);

        int genericTypeArgument_StartIndex = input.index();

        CommonTree root_0 = null;

        Token QUESTION191=null;
        JavaParser.type_return type190 =null;

        JavaParser.genericWildcardBoundType_return genericWildcardBoundType192 =null;


        CommonTree QUESTION191_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // Java.g:890:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==BOOLEAN||LA69_0==BYTE||LA69_0==CHAR||LA69_0==DOUBLE||LA69_0==FLOAT||LA69_0==IDENT||LA69_0==INT||LA69_0==LONG||LA69_0==SHORT) ) {
                alt69=1;
            }
            else if ( (LA69_0==QUESTION) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // Java.g:890:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_type_in_genericTypeArgument7556);
                    type190=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type190.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:891:9: QUESTION ( genericWildcardBoundType )?
                    {
                    QUESTION191=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgument7566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(QUESTION191);


                    // Java.g:891:18: ( genericWildcardBoundType )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==EXTENDS) ) {
                        int LA68_1 = input.LA(2);

                        if ( (LA68_1==BOOLEAN||LA68_1==BYTE||LA68_1==CHAR||LA68_1==DOUBLE||LA68_1==FLOAT||LA68_1==INT||LA68_1==LONG||LA68_1==SHORT) ) {
                            int LA68_4 = input.LA(3);

                            if ( (synpred94_Java()) ) {
                                alt68=1;
                            }
                        }
                        else if ( (LA68_1==IDENT) ) {
                            int LA68_5 = input.LA(3);

                            if ( (synpred94_Java()) ) {
                                alt68=1;
                            }
                        }
                    }
                    else if ( (LA68_0==SUPER) ) {
                        int LA68_3 = input.LA(2);

                        if ( (LA68_3==BOOLEAN||LA68_3==BYTE||LA68_3==CHAR||LA68_3==DOUBLE||LA68_3==FLOAT||LA68_3==IDENT||LA68_3==INT||LA68_3==LONG||LA68_3==SHORT) ) {
                            alt68=1;
                        }
                    }
                    switch (alt68) {
                        case 1 :
                            // Java.g:891:18: genericWildcardBoundType
                            {
                            pushFollow(FOLLOW_genericWildcardBoundType_in_genericTypeArgument7568);
                            genericWildcardBoundType192=genericWildcardBoundType();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericWildcardBoundType.add(genericWildcardBoundType192.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: genericWildcardBoundType, QUESTION
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 892:9: -> ^( QUESTION ( genericWildcardBoundType )? )
                    {
                        // Java.g:892:13: ^( QUESTION ( genericWildcardBoundType )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_QUESTION.nextNode()
                        , root_1);

                        // Java.g:892:24: ( genericWildcardBoundType )?
                        if ( stream_genericWildcardBoundType.hasNext() ) {
                            adaptor.addChild(root_1, stream_genericWildcardBoundType.nextTree());

                        }
                        stream_genericWildcardBoundType.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 51, genericTypeArgument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "genericTypeArgument"


    public static class genericWildcardBoundType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "genericWildcardBoundType"
    // Java.g:895:1: genericWildcardBoundType : ( EXTENDS | SUPER ) ^ type ;
    public final JavaParser.genericWildcardBoundType_return genericWildcardBoundType() throws RecognitionException {
        JavaParser.genericWildcardBoundType_return retval = new JavaParser.genericWildcardBoundType_return();
        retval.start = input.LT(1);

        int genericWildcardBoundType_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set193=null;
        JavaParser.type_return type194 =null;


        CommonTree set193_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // Java.g:896:5: ( ( EXTENDS | SUPER ) ^ type )
            // Java.g:896:9: ( EXTENDS | SUPER ) ^ type
            {
            root_0 = (CommonTree)adaptor.nil();


            set193=(Token)input.LT(1);

            set193=(Token)input.LT(1);

            if ( input.LA(1)==EXTENDS||input.LA(1)==SUPER ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(set193)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_type_in_genericWildcardBoundType7619);
            type194=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type194.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 52, genericWildcardBoundType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "genericWildcardBoundType"


    public static class genericTypeArgumentListSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "genericTypeArgumentListSimplified"
    // Java.g:899:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
    public final JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified() throws RecognitionException {
        JavaParser.genericTypeArgumentListSimplified_return retval = new JavaParser.genericTypeArgumentListSimplified_return();
        retval.start = input.LT(1);

        int genericTypeArgumentListSimplified_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LESS_THAN195=null;
        Token COMMA197=null;
        JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified196 =null;

        JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified198 =null;

        JavaParser.genericTypeListClosing_return genericTypeListClosing199 =null;


        CommonTree LESS_THAN195_tree=null;
        CommonTree COMMA197_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // Java.g:900:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
            // Java.g:900:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
            {
            LESS_THAN195=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN195);


            pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7640);
            genericTypeArgumentSimplified196=genericTypeArgumentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified196.getTree());

            // Java.g:900:49: ( COMMA genericTypeArgumentSimplified )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // Java.g:900:50: COMMA genericTypeArgumentSimplified
            	    {
            	    COMMA197=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentListSimplified7643); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA197);


            	    pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7645);
            	    genericTypeArgumentSimplified198=genericTypeArgumentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified198.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7649);
            genericTypeListClosing199=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing199.getTree());

            // AST REWRITE
            // elements: genericTypeArgumentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 901:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
            {
                // Java.g:901:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN195, "GENERIC_TYPE_ARG_LIST")
                , root_1);

                if ( !(stream_genericTypeArgumentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgumentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentSimplified.nextTree());

                }
                stream_genericTypeArgumentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 53, genericTypeArgumentListSimplified_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentListSimplified"


    public static class genericTypeArgumentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "genericTypeArgumentSimplified"
    // Java.g:904:1: genericTypeArgumentSimplified : ( type | QUESTION );
    public final JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified() throws RecognitionException {
        JavaParser.genericTypeArgumentSimplified_return retval = new JavaParser.genericTypeArgumentSimplified_return();
        retval.start = input.LT(1);

        int genericTypeArgumentSimplified_StartIndex = input.index();

        CommonTree root_0 = null;

        Token QUESTION201=null;
        JavaParser.type_return type200 =null;


        CommonTree QUESTION201_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // Java.g:905:5: ( type | QUESTION )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==BOOLEAN||LA71_0==BYTE||LA71_0==CHAR||LA71_0==DOUBLE||LA71_0==FLOAT||LA71_0==IDENT||LA71_0==INT||LA71_0==LONG||LA71_0==SHORT) ) {
                alt71=1;
            }
            else if ( (LA71_0==QUESTION) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;

            }
            switch (alt71) {
                case 1 :
                    // Java.g:905:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_type_in_genericTypeArgumentSimplified7691);
                    type200=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type200.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:906:9: QUESTION
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    QUESTION201=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgumentSimplified7701); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION201_tree = 
                    (CommonTree)adaptor.create(QUESTION201)
                    ;
                    adaptor.addChild(root_0, QUESTION201_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 54, genericTypeArgumentSimplified_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentSimplified"


    public static class qualifiedIdentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualifiedIdentList"
    // Java.g:909:1: qualifiedIdentList : qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* ;
    public final JavaParser.qualifiedIdentList_return qualifiedIdentList() throws RecognitionException {
        JavaParser.qualifiedIdentList_return retval = new JavaParser.qualifiedIdentList_return();
        retval.start = input.LT(1);

        int qualifiedIdentList_StartIndex = input.index();

        CommonTree root_0 = null;

        Token COMMA203=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier202 =null;

        JavaParser.qualifiedIdentifier_return qualifiedIdentifier204 =null;


        CommonTree COMMA203_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // Java.g:910:5: ( qualifiedIdentifier ( COMMA ! qualifiedIdentifier )* )
            // Java.g:910:9: qualifiedIdentifier ( COMMA ! qualifiedIdentifier )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7724);
            qualifiedIdentifier202=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier202.getTree());

            // Java.g:910:29: ( COMMA ! qualifiedIdentifier )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // Java.g:910:30: COMMA ! qualifiedIdentifier
            	    {
            	    COMMA203=(Token)match(input,COMMA,FOLLOW_COMMA_in_qualifiedIdentList7727); if (state.failed) return retval;

            	    pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7730);
            	    qualifiedIdentifier204=qualifiedIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier204.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 55, qualifiedIdentList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentList"


    public static class formalParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameterList"
    // Java.g:913:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
    public final JavaParser.formalParameterList_return formalParameterList() throws RecognitionException {
        JavaParser.formalParameterList_return retval = new JavaParser.formalParameterList_return();
        retval.start = input.LT(1);

        int formalParameterList_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LPAREN205=null;
        Token COMMA207=null;
        Token COMMA209=null;
        Token RPAREN212=null;
        JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl206 =null;

        JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl208 =null;

        JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl210 =null;

        JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl211 =null;


        CommonTree LPAREN205_tree=null;
        CommonTree COMMA207_tree=null;
        CommonTree COMMA209_tree=null;
        CommonTree RPAREN212_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
        RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // Java.g:914:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
            // Java.g:914:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
            {
            LPAREN205=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterList7755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN205);


            // Java.g:915:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
            int alt75=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA75_1 = input.LA(2);

                if ( (synpred101_Java()) ) {
                    alt75=1;
                }
                else if ( (synpred102_Java()) ) {
                    alt75=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 1, input);

                    throw nvae;

                }
                }
                break;
            case AT:
                {
                int LA75_2 = input.LA(2);

                if ( (synpred101_Java()) ) {
                    alt75=1;
                }
                else if ( (synpred102_Java()) ) {
                    alt75=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 2, input);

                    throw nvae;

                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA75_3 = input.LA(2);

                if ( (synpred101_Java()) ) {
                    alt75=1;
                }
                else if ( (synpred102_Java()) ) {
                    alt75=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 3, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA75_4 = input.LA(2);

                if ( (synpred101_Java()) ) {
                    alt75=1;
                }
                else if ( (synpred102_Java()) ) {
                    alt75=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 4, input);

                    throw nvae;

                }
                }
                break;
            case RPAREN:
                {
                alt75=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }

            switch (alt75) {
                case 1 :
                    // Java.g:916:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
                    {
                    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7783);
                    formalParameterStandardDecl206=formalParameterStandardDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl206.getTree());

                    // Java.g:916:41: ( COMMA formalParameterStandardDecl )*
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( (LA73_0==COMMA) ) {
                            int LA73_1 = input.LA(2);

                            if ( (synpred99_Java()) ) {
                                alt73=1;
                            }


                        }


                        switch (alt73) {
                    	case 1 :
                    	    // Java.g:916:42: COMMA formalParameterStandardDecl
                    	    {
                    	    COMMA207=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7786); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA207);


                    	    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7788);
                    	    formalParameterStandardDecl208=formalParameterStandardDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl208.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop73;
                        }
                    } while (true);


                    // Java.g:916:78: ( COMMA formalParameterVarArgDecl )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==COMMA) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // Java.g:916:79: COMMA formalParameterVarArgDecl
                            {
                            COMMA209=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7793); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA209);


                            pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7795);
                            formalParameterVarArgDecl210=formalParameterVarArgDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl210.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: formalParameterVarArgDecl, formalParameterStandardDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 917:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                    {
                        // Java.g:917:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST")
                        , root_1);

                        if ( !(stream_formalParameterStandardDecl.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameterStandardDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterStandardDecl.nextTree());

                        }
                        stream_formalParameterStandardDecl.reset();

                        // Java.g:917:96: ( formalParameterVarArgDecl )?
                        if ( stream_formalParameterVarArgDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        }
                        stream_formalParameterVarArgDecl.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:919:13: formalParameterVarArgDecl
                    {
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7852);
                    formalParameterVarArgDecl211=formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl211.getTree());

                    // AST REWRITE
                    // elements: formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 920:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                    {
                        // Java.g:920:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST")
                        , root_1);

                        adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Java.g:922:13: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 922:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                    {
                        // Java.g:922:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            RPAREN212=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterList7929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN212);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 56, formalParameterList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameterList"


    public static class formalParameterStandardDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameterStandardDecl"
    // Java.g:927:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
    public final JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl() throws RecognitionException {
        JavaParser.formalParameterStandardDecl_return retval = new JavaParser.formalParameterStandardDecl_return();
        retval.start = input.LT(1);

        int formalParameterStandardDecl_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.localModifierList_return localModifierList213 =null;

        JavaParser.type_return type214 =null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId215 =null;


        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // Java.g:928:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
            // Java.g:928:9: localModifierList type variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterStandardDecl7952);
            localModifierList213=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList213.getTree());

            pushFollow(FOLLOW_type_in_formalParameterStandardDecl7954);
            type214=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type214.getTree());

            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl7956);
            variableDeclaratorId215=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId215.getTree());

            // AST REWRITE
            // elements: variableDeclaratorId, type, localModifierList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 929:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
            {
                // Java.g:929:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 57, formalParameterStandardDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameterStandardDecl"


    public static class formalParameterVarArgDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameterVarArgDecl"
    // Java.g:932:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
    public final JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl() throws RecognitionException {
        JavaParser.formalParameterVarArgDecl_return retval = new JavaParser.formalParameterVarArgDecl_return();
        retval.start = input.LT(1);

        int formalParameterVarArgDecl_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ELLIPSIS218=null;
        JavaParser.localModifierList_return localModifierList216 =null;

        JavaParser.type_return type217 =null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId219 =null;


        CommonTree ELLIPSIS218_tree=null;
        RewriteRuleTokenStream stream_ELLIPSIS=new RewriteRuleTokenStream(adaptor,"token ELLIPSIS");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // Java.g:933:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
            // Java.g:933:9: localModifierList type ELLIPSIS variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterVarArgDecl8000);
            localModifierList216=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList216.getTree());

            pushFollow(FOLLOW_type_in_formalParameterVarArgDecl8002);
            type217=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type217.getTree());

            ELLIPSIS218=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl8004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELLIPSIS.add(ELLIPSIS218);


            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl8006);
            variableDeclaratorId219=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId219.getTree());

            // AST REWRITE
            // elements: variableDeclaratorId, localModifierList, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 934:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
            {
                // Java.g:934:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 58, formalParameterVarArgDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameterVarArgDecl"


    public static class qualifiedIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualifiedIdentifier"
    // Java.g:937:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
    public final JavaParser.qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
        JavaParser.qualifiedIdentifier_return retval = new JavaParser.qualifiedIdentifier_return();
        retval.start = input.LT(1);

        int qualifiedIdentifier_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ident=null;
        Token IDENT220=null;
        Token DOT221=null;

        CommonTree ident_tree=null;
        CommonTree IDENT220_tree=null;
        CommonTree DOT221_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // Java.g:938:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
            // Java.g:938:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            {
            // Java.g:938:9: ( IDENT -> IDENT )
            // Java.g:938:13: IDENT
            {
            IDENT220=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier8054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT220);


            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 938:33: -> IDENT
            {
                adaptor.addChild(root_0, 
                stream_IDENT.nextNode()
                );

            }


            retval.tree = root_0;
            }

            }


            // Java.g:940:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==DOT) ) {
                    int LA76_2 = input.LA(2);

                    if ( (LA76_2==IDENT) ) {
                        int LA76_3 = input.LA(3);

                        if ( (synpred103_Java()) ) {
                            alt76=1;
                        }


                    }


                }


                switch (alt76) {
            	case 1 :
            	    // Java.g:940:13: DOT ident= IDENT
            	    {
            	    DOT221=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentifier8097); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT221);


            	    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier8101); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(ident);


            	    // AST REWRITE
            	    // elements: qualifiedIdentifier, DOT, ident
            	    // token labels: ident
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleTokenStream stream_ident=new RewriteRuleTokenStream(adaptor,"token ident",ident);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 940:33: -> ^( DOT $qualifiedIdentifier $ident)
            	    {
            	        // Java.g:940:37: ^( DOT $qualifiedIdentifier $ident)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        stream_DOT.nextNode()
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_ident.nextNode());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 59, qualifiedIdentifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentifier"


    public static class annotationList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationList"
    // Java.g:946:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
    public final JavaParser.annotationList_return annotationList() throws RecognitionException {
        JavaParser.annotationList_return retval = new JavaParser.annotationList_return();
        retval.start = input.LT(1);

        int annotationList_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.annotation_return annotation222 =null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // Java.g:947:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
            // Java.g:947:9: ( annotation )*
            {
            // Java.g:947:9: ( annotation )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==AT) ) {
                    int LA77_2 = input.LA(2);

                    if ( (LA77_2==IDENT) ) {
                        int LA77_3 = input.LA(3);

                        if ( (synpred104_Java()) ) {
                            alt77=1;
                        }


                    }


                }


                switch (alt77) {
            	case 1 :
            	    // Java.g:947:9: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationList8154);
            	    annotation222=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(annotation222.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 948:9: -> ^( ANNOTATION_LIST ( annotation )* )
            {
                // Java.g:948:13: ^( ANNOTATION_LIST ( annotation )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(ANNOTATION_LIST, "ANNOTATION_LIST")
                , root_1);

                // Java.g:948:31: ( annotation )*
                while ( stream_annotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 60, annotationList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationList"


    public static class annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotation"
    // Java.g:951:1: annotation : AT ^ qualifiedIdentifier ( annotationInit )? ;
    public final JavaParser.annotation_return annotation() throws RecognitionException {
        JavaParser.annotation_return retval = new JavaParser.annotation_return();
        retval.start = input.LT(1);

        int annotation_StartIndex = input.index();

        CommonTree root_0 = null;

        Token AT223=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier224 =null;

        JavaParser.annotationInit_return annotationInit225 =null;


        CommonTree AT223_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // Java.g:952:5: ( AT ^ qualifiedIdentifier ( annotationInit )? )
            // Java.g:952:9: AT ^ qualifiedIdentifier ( annotationInit )?
            {
            root_0 = (CommonTree)adaptor.nil();


            AT223=(Token)match(input,AT,FOLLOW_AT_in_annotation8192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT223_tree = 
            (CommonTree)adaptor.create(AT223)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(AT223_tree, root_0);
            }

            pushFollow(FOLLOW_qualifiedIdentifier_in_annotation8195);
            qualifiedIdentifier224=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier224.getTree());

            // Java.g:952:33: ( annotationInit )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==LPAREN) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // Java.g:952:33: annotationInit
                    {
                    pushFollow(FOLLOW_annotationInit_in_annotation8197);
                    annotationInit225=annotationInit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationInit225.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 61, annotation_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotation"


    public static class annotationInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationInit"
    // Java.g:955:1: annotationInit : LPAREN ( annotationInitializers )? RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] ( annotationInitializers )? ) ;
    public final JavaParser.annotationInit_return annotationInit() throws RecognitionException {
        JavaParser.annotationInit_return retval = new JavaParser.annotationInit_return();
        retval.start = input.LT(1);

        int annotationInit_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LPAREN226=null;
        Token RPAREN228=null;
        JavaParser.annotationInitializers_return annotationInitializers227 =null;


        CommonTree LPAREN226_tree=null;
        CommonTree RPAREN228_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // Java.g:956:5: ( LPAREN ( annotationInitializers )? RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] ( annotationInitializers )? ) )
            // Java.g:956:9: LPAREN ( annotationInitializers )? RPAREN
            {
            LPAREN226=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationInit8221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN226);


            // Java.g:956:16: ( annotationInitializers )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==AT||LA79_0==BOOLEAN||LA79_0==BYTE||(LA79_0 >= CHAR && LA79_0 <= CHARACTER_LITERAL)||LA79_0==DEC||LA79_0==DECIMAL_LITERAL||LA79_0==DOUBLE||LA79_0==FALSE||(LA79_0 >= FLOAT && LA79_0 <= FLOATING_POINT_LITERAL)||LA79_0==HEX_LITERAL||LA79_0==IDENT||LA79_0==INC||LA79_0==INT||LA79_0==LCURLY||LA79_0==LESS_THAN||LA79_0==LOGICAL_NOT||(LA79_0 >= LONG && LA79_0 <= LPAREN)||LA79_0==MINUS||LA79_0==NEW||LA79_0==NOT||LA79_0==NULL||LA79_0==OCTAL_LITERAL||LA79_0==PLUS||LA79_0==SHORT||(LA79_0 >= STRING_LITERAL && LA79_0 <= SUPER)||LA79_0==THIS||LA79_0==TRUE||LA79_0==VOID) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // Java.g:956:16: annotationInitializers
                    {
                    pushFollow(FOLLOW_annotationInitializers_in_annotationInit8223);
                    annotationInitializers227=annotationInitializers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationInitializers.add(annotationInitializers227.getTree());

                    }
                    break;

            }


            RPAREN228=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationInit8226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN228);


            // AST REWRITE
            // elements: annotationInitializers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 957:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] ( annotationInitializers )? )
            {
                // Java.g:957:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] ( annotationInitializers )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(ANNOTATION_INIT_BLOCK, LPAREN226, "ANNOTATION_INIT_BLOCK")
                , root_1);

                // Java.g:957:71: ( annotationInitializers )?
                if ( stream_annotationInitializers.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationInitializers.nextTree());

                }
                stream_annotationInitializers.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 62, annotationInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationInit"


    public static class annotationInitializers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationInitializers"
    // Java.g:960:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
    public final JavaParser.annotationInitializers_return annotationInitializers() throws RecognitionException {
        JavaParser.annotationInitializers_return retval = new JavaParser.annotationInitializers_return();
        retval.start = input.LT(1);

        int annotationInitializers_StartIndex = input.index();

        CommonTree root_0 = null;

        Token COMMA230=null;
        JavaParser.annotationInitializer_return annotationInitializer229 =null;

        JavaParser.annotationInitializer_return annotationInitializer231 =null;

        JavaParser.annotationElementValue_return annotationElementValue232 =null;


        CommonTree COMMA230_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // Java.g:961:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==IDENT) ) {
                int LA81_1 = input.LA(2);

                if ( (LA81_1==ASSIGN) ) {
                    alt81=1;
                }
                else if ( (LA81_1==EOF||LA81_1==AND||LA81_1==BIT_SHIFT_RIGHT||LA81_1==DEC||LA81_1==DIV||LA81_1==DOT||LA81_1==EQUAL||(LA81_1 >= GREATER_OR_EQUAL && LA81_1 <= GREATER_THAN)||(LA81_1 >= INC && LA81_1 <= INSTANCEOF)||LA81_1==LBRACK||(LA81_1 >= LESS_OR_EQUAL && LA81_1 <= LESS_THAN)||LA81_1==LOGICAL_AND||LA81_1==LOGICAL_OR||LA81_1==LPAREN||LA81_1==MINUS||LA81_1==MOD||LA81_1==NOT_EQUAL||LA81_1==OR||LA81_1==PLUS||LA81_1==QUESTION||LA81_1==RPAREN||LA81_1==SHIFT_LEFT||LA81_1==SHIFT_RIGHT||LA81_1==STAR||LA81_1==XOR) ) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA81_0==AT||LA81_0==BOOLEAN||LA81_0==BYTE||(LA81_0 >= CHAR && LA81_0 <= CHARACTER_LITERAL)||LA81_0==DEC||LA81_0==DECIMAL_LITERAL||LA81_0==DOUBLE||LA81_0==FALSE||(LA81_0 >= FLOAT && LA81_0 <= FLOATING_POINT_LITERAL)||LA81_0==HEX_LITERAL||LA81_0==INC||LA81_0==INT||LA81_0==LCURLY||LA81_0==LESS_THAN||LA81_0==LOGICAL_NOT||(LA81_0 >= LONG && LA81_0 <= LPAREN)||LA81_0==MINUS||LA81_0==NEW||LA81_0==NOT||LA81_0==NULL||LA81_0==OCTAL_LITERAL||LA81_0==PLUS||LA81_0==SHORT||(LA81_0 >= STRING_LITERAL && LA81_0 <= SUPER)||LA81_0==THIS||LA81_0==TRUE||LA81_0==VOID) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // Java.g:961:9: annotationInitializer ( COMMA annotationInitializer )*
                    {
                    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8264);
                    annotationInitializer229=annotationInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer229.getTree());

                    // Java.g:961:31: ( COMMA annotationInitializer )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==COMMA) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // Java.g:961:32: COMMA annotationInitializer
                    	    {
                    	    COMMA230=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationInitializers8267); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA230);


                    	    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8269);
                    	    annotationInitializer231=annotationInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer231.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: annotationInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 962:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                    {
                        // Java.g:962:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST")
                        , root_1);

                        if ( !(stream_annotationInitializer.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_annotationInitializer.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationInitializer.nextTree());

                        }
                        stream_annotationInitializer.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:963:9: annotationElementValue
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationInitializers8299);
                    annotationElementValue232=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue232.getTree());

                    // AST REWRITE
                    // elements: annotationElementValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 964:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                    {
                        // Java.g:964:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY")
                        , root_1);

                        adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 63, annotationInitializers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationInitializers"


    public static class annotationInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationInitializer"
    // Java.g:967:1: annotationInitializer : IDENT ^ ASSIGN ! annotationElementValue ;
    public final JavaParser.annotationInitializer_return annotationInitializer() throws RecognitionException {
        JavaParser.annotationInitializer_return retval = new JavaParser.annotationInitializer_return();
        retval.start = input.LT(1);

        int annotationInitializer_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IDENT233=null;
        Token ASSIGN234=null;
        JavaParser.annotationElementValue_return annotationElementValue235 =null;


        CommonTree IDENT233_tree=null;
        CommonTree ASSIGN234_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // Java.g:968:5: ( IDENT ^ ASSIGN ! annotationElementValue )
            // Java.g:968:9: IDENT ^ ASSIGN ! annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();


            IDENT233=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationInitializer8340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT233_tree = 
            (CommonTree)adaptor.create(IDENT233)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT233_tree, root_0);
            }

            ASSIGN234=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationInitializer8343); if (state.failed) return retval;

            pushFollow(FOLLOW_annotationElementValue_in_annotationInitializer8346);
            annotationElementValue235=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue235.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 64, annotationInitializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationInitializer"


    public static class annotationElementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationElementValue"
    // Java.g:971:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
    public final JavaParser.annotationElementValue_return annotationElementValue() throws RecognitionException {
        JavaParser.annotationElementValue_return retval = new JavaParser.annotationElementValue_return();
        retval.start = input.LT(1);

        int annotationElementValue_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.annotationElementValueExpression_return annotationElementValueExpression236 =null;

        JavaParser.annotation_return annotation237 =null;

        JavaParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer238 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // Java.g:972:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
            int alt82=3;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case DEC:
            case DECIMAL_LITERAL:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case FLOATING_POINT_LITERAL:
            case HEX_LITERAL:
            case IDENT:
            case INC:
            case INT:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LONG:
            case LPAREN:
            case MINUS:
            case NEW:
            case NOT:
            case NULL:
            case OCTAL_LITERAL:
            case PLUS:
            case SHORT:
            case STRING_LITERAL:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
                {
                alt82=1;
                }
                break;
            case AT:
                {
                alt82=2;
                }
                break;
            case LCURLY:
                {
                alt82=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }

            switch (alt82) {
                case 1 :
                    // Java.g:972:9: annotationElementValueExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_annotationElementValueExpression_in_annotationElementValue8369);
                    annotationElementValueExpression236=annotationElementValueExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueExpression236.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:973:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_annotation_in_annotationElementValue8379);
                    annotation237=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation237.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:974:9: annotationElementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8389);
                    annotationElementValueArrayInitializer238=annotationElementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueArrayInitializer238.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, annotationElementValue_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationElementValue"


    public static class annotationElementValueExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationElementValueExpression"
    // Java.g:977:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
    public final JavaParser.annotationElementValueExpression_return annotationElementValueExpression() throws RecognitionException {
        JavaParser.annotationElementValueExpression_return retval = new JavaParser.annotationElementValueExpression_return();
        retval.start = input.LT(1);

        int annotationElementValueExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression239 =null;


        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // Java.g:978:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
            // Java.g:978:9: conditionalExpression
            {
            pushFollow(FOLLOW_conditionalExpression_in_annotationElementValueExpression8412);
            conditionalExpression239=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression239.getTree());

            // AST REWRITE
            // elements: conditionalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 979:9: -> ^( EXPR conditionalExpression )
            {
                // Java.g:979:13: ^( EXPR conditionalExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(EXPR, "EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 66, annotationElementValueExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationElementValueExpression"


    public static class annotationElementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationElementValueArrayInitializer"
    // Java.g:982:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
    public final JavaParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer() throws RecognitionException {
        JavaParser.annotationElementValueArrayInitializer_return retval = new JavaParser.annotationElementValueArrayInitializer_return();
        retval.start = input.LT(1);

        int annotationElementValueArrayInitializer_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LCURLY240=null;
        Token COMMA242=null;
        Token COMMA244=null;
        Token RCURLY245=null;
        JavaParser.annotationElementValue_return annotationElementValue241 =null;

        JavaParser.annotationElementValue_return annotationElementValue243 =null;


        CommonTree LCURLY240_tree=null;
        CommonTree COMMA242_tree=null;
        CommonTree COMMA244_tree=null;
        CommonTree RCURLY245_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // Java.g:983:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
            // Java.g:983:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
            {
            LCURLY240=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY240);


            // Java.g:983:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==AT||LA84_0==BOOLEAN||LA84_0==BYTE||(LA84_0 >= CHAR && LA84_0 <= CHARACTER_LITERAL)||LA84_0==DEC||LA84_0==DECIMAL_LITERAL||LA84_0==DOUBLE||LA84_0==FALSE||(LA84_0 >= FLOAT && LA84_0 <= FLOATING_POINT_LITERAL)||LA84_0==HEX_LITERAL||LA84_0==IDENT||LA84_0==INC||LA84_0==INT||LA84_0==LCURLY||LA84_0==LESS_THAN||LA84_0==LOGICAL_NOT||(LA84_0 >= LONG && LA84_0 <= LPAREN)||LA84_0==MINUS||LA84_0==NEW||LA84_0==NOT||LA84_0==NULL||LA84_0==OCTAL_LITERAL||LA84_0==PLUS||LA84_0==SHORT||(LA84_0 >= STRING_LITERAL && LA84_0 <= SUPER)||LA84_0==THIS||LA84_0==TRUE||LA84_0==VOID) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // Java.g:983:17: annotationElementValue ( COMMA annotationElementValue )*
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8455);
                    annotationElementValue241=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue241.getTree());

                    // Java.g:983:40: ( COMMA annotationElementValue )*
                    loop83:
                    do {
                        int alt83=2;
                        int LA83_0 = input.LA(1);

                        if ( (LA83_0==COMMA) ) {
                            int LA83_1 = input.LA(2);

                            if ( (LA83_1==AT||LA83_1==BOOLEAN||LA83_1==BYTE||(LA83_1 >= CHAR && LA83_1 <= CHARACTER_LITERAL)||LA83_1==DEC||LA83_1==DECIMAL_LITERAL||LA83_1==DOUBLE||LA83_1==FALSE||(LA83_1 >= FLOAT && LA83_1 <= FLOATING_POINT_LITERAL)||LA83_1==HEX_LITERAL||LA83_1==IDENT||LA83_1==INC||LA83_1==INT||LA83_1==LCURLY||LA83_1==LESS_THAN||LA83_1==LOGICAL_NOT||(LA83_1 >= LONG && LA83_1 <= LPAREN)||LA83_1==MINUS||LA83_1==NEW||LA83_1==NOT||LA83_1==NULL||LA83_1==OCTAL_LITERAL||LA83_1==PLUS||LA83_1==SHORT||(LA83_1 >= STRING_LITERAL && LA83_1 <= SUPER)||LA83_1==THIS||LA83_1==TRUE||LA83_1==VOID) ) {
                                alt83=1;
                            }


                        }


                        switch (alt83) {
                    	case 1 :
                    	    // Java.g:983:41: COMMA annotationElementValue
                    	    {
                    	    COMMA242=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8458); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA242);


                    	    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8460);
                    	    annotationElementValue243=annotationElementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue243.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop83;
                        }
                    } while (true);


                    }
                    break;

            }


            // Java.g:983:74: ( COMMA )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==COMMA) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // Java.g:983:75: COMMA
                    {
                    COMMA244=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA244);


                    }
                    break;

            }


            RCURLY245=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY245);


            // AST REWRITE
            // elements: annotationElementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 984:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
            {
                // Java.g:984:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY240, "ANNOTATION_ELEM_VALUE_ARRAY_INIT")
                , root_1);

                // Java.g:984:90: ( annotationElementValue )*
                while ( stream_annotationElementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                }
                stream_annotationElementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 67, annotationElementValueArrayInitializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationElementValueArrayInitializer"


    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationTypeDeclaration"
    // Java.g:987:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);

        int annotationTypeDeclaration_StartIndex = input.index();

        CommonTree root_0 = null;

        Token AT246=null;
        Token INTERFACE247=null;
        Token IDENT248=null;
        JavaParser.annotationBody_return annotationBody249 =null;


        CommonTree AT246_tree=null;
        CommonTree INTERFACE247_tree=null;
        CommonTree IDENT248_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // Java.g:988:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
            // Java.g:988:9: AT INTERFACE IDENT annotationBody
            {
            AT246=(Token)match(input,AT,FOLLOW_AT_in_annotationTypeDeclaration8514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT246);


            INTERFACE247=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationTypeDeclaration8516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE247);


            IDENT248=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationTypeDeclaration8518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT248);


            pushFollow(FOLLOW_annotationBody_in_annotationTypeDeclaration8520);
            annotationBody249=annotationBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationBody.add(annotationBody249.getTree());

            // AST REWRITE
            // elements: IDENT, AT, annotationBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 989:9: -> ^( AT IDENT annotationBody )
            {
                // Java.g:989:12: ^( AT IDENT annotationBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_AT.nextNode()
                , root_1);

                adaptor.addChild(root_1, modifiers);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_annotationBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 68, annotationTypeDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"


    public static class annotationBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationBody"
    // Java.g:992:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
    public final JavaParser.annotationBody_return annotationBody() throws RecognitionException {
        JavaParser.annotationBody_return retval = new JavaParser.annotationBody_return();
        retval.start = input.LT(1);

        int annotationBody_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LCURLY250=null;
        Token RCURLY252=null;
        JavaParser.annotationScopeDeclarations_return annotationScopeDeclarations251 =null;


        CommonTree LCURLY250_tree=null;
        CommonTree RCURLY252_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // Java.g:993:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
            // Java.g:993:9: LCURLY ( annotationScopeDeclarations )* RCURLY
            {
            LCURLY250=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationBody8563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY250);


            // Java.g:993:16: ( annotationScopeDeclarations )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==ABSTRACT||LA86_0==AT||LA86_0==BOOLEAN||LA86_0==BYTE||LA86_0==CHAR||LA86_0==CLASS||LA86_0==DOUBLE||LA86_0==ENUM||LA86_0==FINAL||LA86_0==FLOAT||LA86_0==IDENT||LA86_0==INT||LA86_0==INTERFACE||LA86_0==LESS_THAN||LA86_0==LONG||LA86_0==NATIVE||(LA86_0 >= PRIVATE && LA86_0 <= PUBLIC)||LA86_0==SHORT||LA86_0==STATIC||LA86_0==STRICTFP||LA86_0==SYNCHRONIZED||LA86_0==TRANSIENT||LA86_0==VOID||LA86_0==VOLATILE) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // Java.g:993:16: annotationScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_annotationScopeDeclarations_in_annotationBody8565);
            	    annotationScopeDeclarations251=annotationScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationScopeDeclarations.add(annotationScopeDeclarations251.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            RCURLY252=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationBody8568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY252);


            // AST REWRITE
            // elements: annotationScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 994:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
            {
                // Java.g:994:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY250, "CLASS_TOP_LEVEL_SCOPE")
                , root_1);

                // Java.g:994:76: ( annotationScopeDeclarations )*
                while ( stream_annotationScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationScopeDeclarations.nextTree());

                }
                stream_annotationScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 69, annotationBody_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationBody"


    public static class annotationScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationScopeDeclarations"
    // Java.g:997:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
    public final JavaParser.annotationScopeDeclarations_return annotationScopeDeclarations() throws RecognitionException {
        JavaParser.annotationScopeDeclarations_return retval = new JavaParser.annotationScopeDeclarations_return();
        retval.start = input.LT(1);

        int annotationScopeDeclarations_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IDENT255=null;
        Token LPAREN256=null;
        Token RPAREN257=null;
        Token SEMI259=null;
        Token SEMI261=null;
        JavaParser.modifierList_return modifierList253 =null;

        JavaParser.type_return type254 =null;

        JavaParser.annotationDefaultValue_return annotationDefaultValue258 =null;

        JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList260 =null;

        JavaParser.typeDeclaration_return typeDeclaration262 =null;


        CommonTree IDENT255_tree=null;
        CommonTree LPAREN256_tree=null;
        CommonTree RPAREN257_tree=null;
        CommonTree SEMI259_tree=null;
        CommonTree SEMI261_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

            // Java.g:998:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
            int alt89=2;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                int LA89_1 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 1, input);

                    throw nvae;

                }
                }
                break;
            case PROTECTED:
                {
                int LA89_2 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 2, input);

                    throw nvae;

                }
                }
                break;
            case PRIVATE:
                {
                int LA89_3 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 3, input);

                    throw nvae;

                }
                }
                break;
            case STATIC:
                {
                int LA89_4 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 4, input);

                    throw nvae;

                }
                }
                break;
            case ABSTRACT:
                {
                int LA89_5 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 5, input);

                    throw nvae;

                }
                }
                break;
            case NATIVE:
                {
                int LA89_6 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 6, input);

                    throw nvae;

                }
                }
                break;
            case SYNCHRONIZED:
                {
                int LA89_7 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 7, input);

                    throw nvae;

                }
                }
                break;
            case TRANSIENT:
                {
                int LA89_8 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 8, input);

                    throw nvae;

                }
                }
                break;
            case VOLATILE:
                {
                int LA89_9 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 9, input);

                    throw nvae;

                }
                }
                break;
            case STRICTFP:
                {
                int LA89_10 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 10, input);

                    throw nvae;

                }
                }
                break;
            case FINAL:
                {
                int LA89_11 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 11, input);

                    throw nvae;

                }
                }
                break;
            case AT:
                {
                int LA89_12 = input.LA(2);

                if ( (synpred117_Java()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 12, input);

                    throw nvae;

                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case IDENT:
            case INT:
            case LONG:
            case SHORT:
                {
                alt89=1;
                }
                break;
            case CLASS:
            case ENUM:
            case INTERFACE:
                {
                alt89=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;

            }

            switch (alt89) {
                case 1 :
                    // Java.g:998:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_annotationScopeDeclarations8610);
                    modifierList253=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList253.getTree());

                    pushFollow(FOLLOW_type_in_annotationScopeDeclarations8612);
                    type254=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type254.getTree());

                    // Java.g:999:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==IDENT) ) {
                        int LA88_1 = input.LA(2);

                        if ( (LA88_1==LPAREN) ) {
                            alt88=1;
                        }
                        else if ( (LA88_1==ASSIGN||LA88_1==COMMA||LA88_1==LBRACK||LA88_1==SEMI) ) {
                            alt88=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 88, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 88, 0, input);

                        throw nvae;

                    }
                    switch (alt88) {
                        case 1 :
                            // Java.g:999:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                            {
                            IDENT255=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationScopeDeclarations8626); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT255);


                            LPAREN256=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationScopeDeclarations8628); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN256);


                            RPAREN257=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationScopeDeclarations8630); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN257);


                            // Java.g:999:33: ( annotationDefaultValue )?
                            int alt87=2;
                            int LA87_0 = input.LA(1);

                            if ( (LA87_0==DEFAULT) ) {
                                alt87=1;
                            }
                            switch (alt87) {
                                case 1 :
                                    // Java.g:999:33: annotationDefaultValue
                                    {
                                    pushFollow(FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8632);
                                    annotationDefaultValue258=annotationDefaultValue();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_annotationDefaultValue.add(annotationDefaultValue258.getTree());

                                    }
                                    break;

                            }


                            SEMI259=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8635); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI259);


                            // AST REWRITE
                            // elements: type, annotationDefaultValue, modifierList, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1000:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                            {
                                // Java.g:1000:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL")
                                , root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());

                                adaptor.addChild(root_1, stream_type.nextTree());

                                adaptor.addChild(root_1, 
                                stream_IDENT.nextNode()
                                );

                                // Java.g:1000:66: ( annotationDefaultValue )?
                                if ( stream_annotationDefaultValue.hasNext() ) {
                                    adaptor.addChild(root_1, stream_annotationDefaultValue.nextTree());

                                }
                                stream_annotationDefaultValue.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // Java.g:1001:13: classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8677);
                            classFieldDeclaratorList260=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList260.getTree());

                            SEMI261=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8679); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI261);


                            // AST REWRITE
                            // elements: classFieldDeclaratorList, type, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1002:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // Java.g:1002:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION")
                                , root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());

                                adaptor.addChild(root_1, stream_type.nextTree());

                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Java.g:1004:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_typeDeclaration_in_annotationScopeDeclarations8724);
                    typeDeclaration262=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration262.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 70, annotationScopeDeclarations_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationScopeDeclarations"


    public static class annotationDefaultValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotationDefaultValue"
    // Java.g:1007:1: annotationDefaultValue : DEFAULT ^ annotationElementValue ;
    public final JavaParser.annotationDefaultValue_return annotationDefaultValue() throws RecognitionException {
        JavaParser.annotationDefaultValue_return retval = new JavaParser.annotationDefaultValue_return();
        retval.start = input.LT(1);

        int annotationDefaultValue_StartIndex = input.index();

        CommonTree root_0 = null;

        Token DEFAULT263=null;
        JavaParser.annotationElementValue_return annotationElementValue264 =null;


        CommonTree DEFAULT263_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

            // Java.g:1008:5: ( DEFAULT ^ annotationElementValue )
            // Java.g:1008:9: DEFAULT ^ annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();


            DEFAULT263=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_annotationDefaultValue8747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT263_tree = 
            (CommonTree)adaptor.create(DEFAULT263)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT263_tree, root_0);
            }

            pushFollow(FOLLOW_annotationElementValue_in_annotationDefaultValue8750);
            annotationElementValue264=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue264.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 71, annotationDefaultValue_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "annotationDefaultValue"


    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // Java.g:1013:1: block : LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ;
    public final JavaParser.block_return block() throws RecognitionException {
        JavaParser.block_return retval = new JavaParser.block_return();
        retval.start = input.LT(1);

        int block_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LCURLY265=null;
        Token RCURLY267=null;
        JavaParser.blockStatement_return blockStatement266 =null;


        CommonTree LCURLY265_tree=null;
        CommonTree RCURLY267_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

            // Java.g:1014:5: ( LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
            // Java.g:1014:9: LCURLY ( blockStatement )* RCURLY
            {
            LCURLY265=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_block8771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY265);


            // Java.g:1014:16: ( blockStatement )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==ABSTRACT||LA90_0==ASSERT||LA90_0==AT||(LA90_0 >= BOOLEAN && LA90_0 <= BYTE)||(LA90_0 >= CHAR && LA90_0 <= CLASS)||(LA90_0 >= CONTINUE && LA90_0 <= DEC)||LA90_0==DECIMAL_LITERAL||LA90_0==DO||LA90_0==DOUBLE||LA90_0==ENUM||(LA90_0 >= FALSE && LA90_0 <= FINAL)||(LA90_0 >= FLOAT && LA90_0 <= FLOATING_POINT_LITERAL)||LA90_0==FOR||LA90_0==HEX_LITERAL||(LA90_0 >= IDENT && LA90_0 <= IF)||LA90_0==INC||LA90_0==INT||LA90_0==INTERFACE||LA90_0==LCURLY||LA90_0==LESS_THAN||LA90_0==LOGICAL_NOT||(LA90_0 >= LONG && LA90_0 <= LPAREN)||LA90_0==MINUS||(LA90_0 >= NATIVE && LA90_0 <= NEW)||LA90_0==NOT||LA90_0==NULL||LA90_0==OCTAL_LITERAL||LA90_0==PLUS||(LA90_0 >= PRIVATE && LA90_0 <= PUBLIC)||LA90_0==RETURN||LA90_0==SEMI||LA90_0==SHORT||LA90_0==STATIC||(LA90_0 >= STRICTFP && LA90_0 <= SUPER)||LA90_0==SWITCH||(LA90_0 >= SYNCHRONIZED && LA90_0 <= THIS)||LA90_0==THROW||(LA90_0 >= TRANSIENT && LA90_0 <= TRY)||LA90_0==VOID||(LA90_0 >= VOLATILE && LA90_0 <= WHILE)) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // Java.g:1014:16: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block8773);
            	    blockStatement266=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement266.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            RCURLY267=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_block8776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY267);


            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1015:9: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
            {
                // Java.g:1015:13: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(BLOCK_SCOPE, LCURLY265, "BLOCK_SCOPE")
                , root_1);

                // Java.g:1015:51: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 72, block_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "block"


    public static class blockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "blockStatement"
    // Java.g:1018:1: blockStatement : ( localVariableDeclaration SEMI !| typeDeclaration | statement );
    public final JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        JavaParser.blockStatement_return retval = new JavaParser.blockStatement_return();
        retval.start = input.LT(1);

        int blockStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token SEMI269=null;
        JavaParser.localVariableDeclaration_return localVariableDeclaration268 =null;

        JavaParser.typeDeclaration_return typeDeclaration270 =null;

        JavaParser.statement_return statement271 =null;


        CommonTree SEMI269_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

            // Java.g:1019:5: ( localVariableDeclaration SEMI !| typeDeclaration | statement )
            int alt91=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA91_1 = input.LA(2);

                if ( (synpred119_Java()) ) {
                    alt91=1;
                }
                else if ( (synpred120_Java()) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 1, input);

                    throw nvae;

                }
                }
                break;
            case AT:
                {
                int LA91_2 = input.LA(2);

                if ( (synpred119_Java()) ) {
                    alt91=1;
                }
                else if ( (synpred120_Java()) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 2, input);

                    throw nvae;

                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA91_3 = input.LA(2);

                if ( (synpred119_Java()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 3, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA91_4 = input.LA(2);

                if ( (synpred119_Java()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 4, input);

                    throw nvae;

                }
                }
                break;
            case ABSTRACT:
            case CLASS:
            case ENUM:
            case INTERFACE:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case STRICTFP:
            case TRANSIENT:
            case VOLATILE:
                {
                alt91=2;
                }
                break;
            case SYNCHRONIZED:
                {
                int LA91_11 = input.LA(2);

                if ( (synpred120_Java()) ) {
                    alt91=2;
                }
                else if ( (true) ) {
                    alt91=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 11, input);

                    throw nvae;

                }
                }
                break;
            case ASSERT:
            case BREAK:
            case CHARACTER_LITERAL:
            case CONTINUE:
            case DEC:
            case DECIMAL_LITERAL:
            case DO:
            case FALSE:
            case FLOATING_POINT_LITERAL:
            case FOR:
            case HEX_LITERAL:
            case IF:
            case INC:
            case LCURLY:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NEW:
            case NOT:
            case NULL:
            case OCTAL_LITERAL:
            case PLUS:
            case RETURN:
            case SEMI:
            case STRING_LITERAL:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case VOID:
            case WHILE:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }

            switch (alt91) {
                case 1 :
                    // Java.g:1019:9: localVariableDeclaration SEMI !
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement8814);
                    localVariableDeclaration268=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration268.getTree());

                    SEMI269=(Token)match(input,SEMI,FOLLOW_SEMI_in_blockStatement8816); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // Java.g:1020:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_typeDeclaration_in_blockStatement8827);
                    typeDeclaration270=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration270.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:1021:9: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_statement_in_blockStatement8837);
                    statement271=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 73, blockStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "blockStatement"


    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "localVariableDeclaration"
    // Java.g:1024:1: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);

        int localVariableDeclaration_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.localModifierList_return localModifierList272 =null;

        JavaParser.type_return type273 =null;

        JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList274 =null;


        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

            // Java.g:1027:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
            // Java.g:1027:9: localModifierList type classFieldDeclaratorList
            {
            pushFollow(FOLLOW_localModifierList_in_localVariableDeclaration8878);
            localModifierList272=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList272.getTree());

            pushFollow(FOLLOW_type_in_localVariableDeclaration8880);
            type273=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type273.getTree());

            pushFollow(FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8882);
            classFieldDeclaratorList274=classFieldDeclaratorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList274.getTree());

            // AST REWRITE
            // elements: classFieldDeclaratorList, localModifierList, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1028:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
            {
                // Java.g:1028:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION")
                , root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 74, localVariableDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"


    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // Java.g:1032:1: statement : ( block | assertStatement | ifStatement | forStatement | forEachStatement | whileStatement | doWhileStatement | tryStatement | switchStatement | synchronizedStatement | returnStatement | throwStatement | breakStatement | continueStatement | labeledStatement | expressionStatement );
    public final JavaParser.statement_return statement() throws RecognitionException {
        JavaParser.statement_return retval = new JavaParser.statement_return();
        retval.start = input.LT(1);

        int statement_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.block_return block275 =null;

        JavaParser.assertStatement_return assertStatement276 =null;

        JavaParser.ifStatement_return ifStatement277 =null;

        JavaParser.forStatement_return forStatement278 =null;

        JavaParser.forEachStatement_return forEachStatement279 =null;

        JavaParser.whileStatement_return whileStatement280 =null;

        JavaParser.doWhileStatement_return doWhileStatement281 =null;

        JavaParser.tryStatement_return tryStatement282 =null;

        JavaParser.switchStatement_return switchStatement283 =null;

        JavaParser.synchronizedStatement_return synchronizedStatement284 =null;

        JavaParser.returnStatement_return returnStatement285 =null;

        JavaParser.throwStatement_return throwStatement286 =null;

        JavaParser.breakStatement_return breakStatement287 =null;

        JavaParser.continueStatement_return continueStatement288 =null;

        JavaParser.labeledStatement_return labeledStatement289 =null;

        JavaParser.expressionStatement_return expressionStatement290 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

            // Java.g:1033:5: ( block | assertStatement | ifStatement | forStatement | forEachStatement | whileStatement | doWhileStatement | tryStatement | switchStatement | synchronizedStatement | returnStatement | throwStatement | breakStatement | continueStatement | labeledStatement | expressionStatement )
            int alt92=16;
            switch ( input.LA(1) ) {
            case LCURLY:
                {
                alt92=1;
                }
                break;
            case ASSERT:
                {
                alt92=2;
                }
                break;
            case IF:
                {
                alt92=3;
                }
                break;
            case FOR:
                {
                int LA92_4 = input.LA(2);

                if ( (synpred124_Java()) ) {
                    alt92=4;
                }
                else if ( (synpred125_Java()) ) {
                    alt92=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 4, input);

                    throw nvae;

                }
                }
                break;
            case WHILE:
                {
                alt92=6;
                }
                break;
            case DO:
                {
                alt92=7;
                }
                break;
            case TRY:
                {
                alt92=8;
                }
                break;
            case SWITCH:
                {
                alt92=9;
                }
                break;
            case SYNCHRONIZED:
                {
                alt92=10;
                }
                break;
            case RETURN:
                {
                alt92=11;
                }
                break;
            case THROW:
                {
                alt92=12;
                }
                break;
            case BREAK:
                {
                alt92=13;
                }
                break;
            case CONTINUE:
                {
                alt92=14;
                }
                break;
            case IDENT:
                {
                int LA92_14 = input.LA(2);

                if ( (synpred135_Java()) ) {
                    alt92=15;
                }
                else if ( (true) ) {
                    alt92=16;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 14, input);

                    throw nvae;

                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case DEC:
            case DECIMAL_LITERAL:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case FLOATING_POINT_LITERAL:
            case HEX_LITERAL:
            case INC:
            case INT:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LONG:
            case LPAREN:
            case MINUS:
            case NEW:
            case NOT:
            case NULL:
            case OCTAL_LITERAL:
            case PLUS:
            case SEMI:
            case SHORT:
            case STRING_LITERAL:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
                {
                alt92=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }

            switch (alt92) {
                case 1 :
                    // Java.g:1033:9: block
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_block_in_statement8935);
                    block275=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block275.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1034:9: assertStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_assertStatement_in_statement8945);
                    assertStatement276=assertStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assertStatement276.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:1035:9: ifStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_ifStatement_in_statement8955);
                    ifStatement277=ifStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement277.getTree());

                    }
                    break;
                case 4 :
                    // Java.g:1036:9: forStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_forStatement_in_statement8968);
                    forStatement278=forStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forStatement278.getTree());

                    }
                    break;
                case 5 :
                    // Java.g:1037:7: forEachStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_forEachStatement_in_statement8976);
                    forEachStatement279=forEachStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forEachStatement279.getTree());

                    }
                    break;
                case 6 :
                    // Java.g:1038:9: whileStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_whileStatement_in_statement8986);
                    whileStatement280=whileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whileStatement280.getTree());

                    }
                    break;
                case 7 :
                    // Java.g:1039:9: doWhileStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_doWhileStatement_in_statement8996);
                    doWhileStatement281=doWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doWhileStatement281.getTree());

                    }
                    break;
                case 8 :
                    // Java.g:1040:9: tryStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_tryStatement_in_statement9006);
                    tryStatement282=tryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tryStatement282.getTree());

                    }
                    break;
                case 9 :
                    // Java.g:1041:9: switchStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_switchStatement_in_statement9016);
                    switchStatement283=switchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchStatement283.getTree());

                    }
                    break;
                case 10 :
                    // Java.g:1042:9: synchronizedStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_synchronizedStatement_in_statement9026);
                    synchronizedStatement284=synchronizedStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronizedStatement284.getTree());

                    }
                    break;
                case 11 :
                    // Java.g:1043:9: returnStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_returnStatement_in_statement9036);
                    returnStatement285=returnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returnStatement285.getTree());

                    }
                    break;
                case 12 :
                    // Java.g:1044:9: throwStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_throwStatement_in_statement9046);
                    throwStatement286=throwStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throwStatement286.getTree());

                    }
                    break;
                case 13 :
                    // Java.g:1045:9: breakStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_breakStatement_in_statement9056);
                    breakStatement287=breakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, breakStatement287.getTree());

                    }
                    break;
                case 14 :
                    // Java.g:1046:9: continueStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_continueStatement_in_statement9066);
                    continueStatement288=continueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continueStatement288.getTree());

                    }
                    break;
                case 15 :
                    // Java.g:1047:9: labeledStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_labeledStatement_in_statement9076);
                    labeledStatement289=labeledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, labeledStatement289.getTree());

                    }
                    break;
                case 16 :
                    // Java.g:1048:9: expressionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_expressionStatement_in_statement9086);
                    expressionStatement290=expressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionStatement290.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 75, statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class assertStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assertStatement"
    // Java.g:1051:1: assertStatement : ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) ;
    public final JavaParser.assertStatement_return assertStatement() throws RecognitionException {
        JavaParser.assertStatement_return retval = new JavaParser.assertStatement_return();
        retval.start = input.LT(1);

        int assertStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ASSERT291=null;
        Token COLON292=null;
        Token SEMI293=null;
        Token SEMI294=null;
        JavaParser.expression_return expr1 =null;

        JavaParser.expression_return expr2 =null;


        CommonTree ASSERT291_tree=null;
        CommonTree COLON292_tree=null;
        CommonTree SEMI293_tree=null;
        CommonTree SEMI294_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ASSERT=new RewriteRuleTokenStream(adaptor,"token ASSERT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

            // Java.g:1052:2: ( ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) )
            // Java.g:1052:4: ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
            {
            ASSERT291=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_assertStatement9111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSERT.add(ASSERT291);


            pushFollow(FOLLOW_expression_in_assertStatement9115);
            expr1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expr1.getTree());

            // Java.g:1053:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==COLON) ) {
                alt93=1;
            }
            else if ( (LA93_0==SEMI) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // Java.g:1053:13: COLON expr2= expression SEMI
                    {
                    COLON292=(Token)match(input,COLON,FOLLOW_COLON_in_assertStatement9130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON292);


                    pushFollow(FOLLOW_expression_in_assertStatement9134);
                    expr2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expr2.getTree());

                    SEMI293=(Token)match(input,SEMI,FOLLOW_SEMI_in_assertStatement9136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI293);


                    // AST REWRITE
                    // elements: expr2, ASSERT, expr1
                    // token labels: 
                    // rule labels: retval, expr1, expr2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);
                    RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1053:41: -> ^( ASSERT $expr1 $expr2)
                    {
                        // Java.g:1053:44: ^( ASSERT $expr1 $expr2)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_ASSERT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_expr1.nextTree());

                        adaptor.addChild(root_1, stream_expr2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1054:13: SEMI
                    {
                    SEMI294=(Token)match(input,SEMI,FOLLOW_SEMI_in_assertStatement9162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI294);


                    // AST REWRITE
                    // elements: expr1, ASSERT
                    // token labels: 
                    // rule labels: retval, expr1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1054:41: -> ^( ASSERT $expr1)
                    {
                        // Java.g:1054:44: ^( ASSERT $expr1)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_ASSERT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_expr1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 76, assertStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assertStatement"


    public static class ifStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifStatement"
    // Java.g:1058:1: ifStatement : IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) ;
    public final JavaParser.ifStatement_return ifStatement() throws RecognitionException {
        JavaParser.ifStatement_return retval = new JavaParser.ifStatement_return();
        retval.start = input.LT(1);

        int ifStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IF295=null;
        Token ELSE297=null;
        JavaParser.statement_return ifStat =null;

        JavaParser.statement_return elseStat =null;

        JavaParser.parenthesizedExpression_return parenthesizedExpression296 =null;


        CommonTree IF295_tree=null;
        CommonTree ELSE297_tree=null;
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

            // Java.g:1059:2: ( IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) )
            // Java.g:1059:4: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
            {
            IF295=(Token)match(input,IF,FOLLOW_IF_in_ifStatement9223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF295);


            pushFollow(FOLLOW_parenthesizedExpression_in_ifStatement9225);
            parenthesizedExpression296=parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression296.getTree());

            pushFollow(FOLLOW_statement_in_ifStatement9229);
            ifStat=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(ifStat.getTree());

            // Java.g:1060:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==ELSE) ) {
                int LA94_1 = input.LA(2);

                if ( (synpred137_Java()) ) {
                    alt94=1;
                }
                else if ( (true) ) {
                    alt94=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 94, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA94_0==EOF||LA94_0==ABSTRACT||LA94_0==ASSERT||LA94_0==AT||(LA94_0 >= BOOLEAN && LA94_0 <= CASE)||(LA94_0 >= CHAR && LA94_0 <= CLASS)||(LA94_0 >= CONTINUE && LA94_0 <= DEC)||(LA94_0 >= DECIMAL_LITERAL && LA94_0 <= DEFAULT)||LA94_0==DO||LA94_0==DOUBLE||LA94_0==ENUM||(LA94_0 >= FALSE && LA94_0 <= FINAL)||(LA94_0 >= FLOAT && LA94_0 <= FLOATING_POINT_LITERAL)||LA94_0==FOR||LA94_0==HEX_LITERAL||(LA94_0 >= IDENT && LA94_0 <= IF)||LA94_0==INC||LA94_0==INT||LA94_0==INTERFACE||LA94_0==LCURLY||LA94_0==LESS_THAN||LA94_0==LOGICAL_NOT||(LA94_0 >= LONG && LA94_0 <= LPAREN)||LA94_0==MINUS||(LA94_0 >= NATIVE && LA94_0 <= NEW)||LA94_0==NOT||LA94_0==NULL||LA94_0==OCTAL_LITERAL||LA94_0==PLUS||(LA94_0 >= PRIVATE && LA94_0 <= PUBLIC)||(LA94_0 >= RCURLY && LA94_0 <= RETURN)||LA94_0==SEMI||LA94_0==SHORT||LA94_0==STATIC||(LA94_0 >= STRICTFP && LA94_0 <= SUPER)||LA94_0==SWITCH||(LA94_0 >= SYNCHRONIZED && LA94_0 <= THIS)||LA94_0==THROW||(LA94_0 >= TRANSIENT && LA94_0 <= TRY)||LA94_0==VOID||(LA94_0 >= VOLATILE && LA94_0 <= WHILE)) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // Java.g:1060:13: ELSE elseStat= statement
                    {
                    ELSE297=(Token)match(input,ELSE,FOLLOW_ELSE_in_ifStatement9244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE.add(ELSE297);


                    pushFollow(FOLLOW_statement_in_ifStatement9248);
                    elseStat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(elseStat.getTree());

                    // AST REWRITE
                    // elements: parenthesizedExpression, elseStat, IF, ifStat
                    // token labels: 
                    // rule labels: retval, ifStat, elseStat
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);
                    RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1060:37: -> ^( IF parenthesizedExpression $ifStat $elseStat)
                    {
                        // Java.g:1060:40: ^( IF parenthesizedExpression $ifStat $elseStat)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_IF.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                        adaptor.addChild(root_1, stream_ifStat.nextTree());

                        adaptor.addChild(root_1, stream_elseStat.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1061:37: 
                    {
                    // AST REWRITE
                    // elements: IF, parenthesizedExpression, ifStat
                    // token labels: 
                    // rule labels: retval, ifStat
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1061:37: -> ^( IF parenthesizedExpression $ifStat)
                    {
                        // Java.g:1061:40: ^( IF parenthesizedExpression $ifStat)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_IF.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                        adaptor.addChild(root_1, stream_ifStat.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 77, ifStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ifStatement"


    public static class forStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forStatement"
    // Java.g:1065:1: forStatement : FOR LPAREN forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) ;
    public final JavaParser.forStatement_return forStatement() throws RecognitionException {
        JavaParser.forStatement_return retval = new JavaParser.forStatement_return();
        retval.start = input.LT(1);

        int forStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token FOR298=null;
        Token LPAREN299=null;
        Token SEMI301=null;
        Token SEMI303=null;
        Token RPAREN305=null;
        JavaParser.forInit_return forInit300 =null;

        JavaParser.forCondition_return forCondition302 =null;

        JavaParser.forUpdater_return forUpdater304 =null;

        JavaParser.statement_return statement306 =null;


        CommonTree FOR298_tree=null;
        CommonTree LPAREN299_tree=null;
        CommonTree SEMI301_tree=null;
        CommonTree SEMI303_tree=null;
        CommonTree RPAREN305_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
        RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

            // Java.g:1066:2: ( FOR LPAREN forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) )
            // Java.g:1066:4: FOR LPAREN forInit SEMI forCondition SEMI forUpdater RPAREN statement
            {
            FOR298=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement9338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR298);


            LPAREN299=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forStatement9340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN299);


            pushFollow(FOLLOW_forInit_in_forStatement9342);
            forInit300=forInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forInit.add(forInit300.getTree());

            SEMI301=(Token)match(input,SEMI,FOLLOW_SEMI_in_forStatement9344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI301);


            pushFollow(FOLLOW_forCondition_in_forStatement9346);
            forCondition302=forCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forCondition.add(forCondition302.getTree());

            SEMI303=(Token)match(input,SEMI,FOLLOW_SEMI_in_forStatement9348); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI303);


            pushFollow(FOLLOW_forUpdater_in_forStatement9350);
            forUpdater304=forUpdater();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forUpdater.add(forUpdater304.getTree());

            RPAREN305=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forStatement9352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN305);


            pushFollow(FOLLOW_statement_in_forStatement9354);
            statement306=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement306.getTree());

            // AST REWRITE
            // elements: FOR, statement, forCondition, forInit, forUpdater
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1067:3: -> ^( FOR forInit forCondition forUpdater statement )
            {
                // Java.g:1067:6: ^( FOR forInit forCondition forUpdater statement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_FOR.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_forInit.nextTree());

                adaptor.addChild(root_1, stream_forCondition.nextTree());

                adaptor.addChild(root_1, stream_forUpdater.nextTree());

                adaptor.addChild(root_1, stream_statement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 78, forStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "forStatement"


    public static class forEachStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forEachStatement"
    // Java.g:1070:1: forEachStatement : FOR LPAREN localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ;
    public final JavaParser.forEachStatement_return forEachStatement() throws RecognitionException {
        JavaParser.forEachStatement_return retval = new JavaParser.forEachStatement_return();
        retval.start = input.LT(1);

        int forEachStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token FOR307=null;
        Token LPAREN308=null;
        Token IDENT311=null;
        Token COLON312=null;
        Token RPAREN314=null;
        JavaParser.localModifierList_return localModifierList309 =null;

        JavaParser.type_return type310 =null;

        JavaParser.expression_return expression313 =null;

        JavaParser.statement_return statement315 =null;


        CommonTree FOR307_tree=null;
        CommonTree LPAREN308_tree=null;
        CommonTree IDENT311_tree=null;
        CommonTree COLON312_tree=null;
        CommonTree RPAREN314_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

            // Java.g:1071:2: ( FOR LPAREN localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
            // Java.g:1071:4: FOR LPAREN localModifierList type IDENT COLON expression RPAREN statement
            {
            FOR307=(Token)match(input,FOR,FOLLOW_FOR_in_forEachStatement9389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR307);


            LPAREN308=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forEachStatement9391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN308);


            pushFollow(FOLLOW_localModifierList_in_forEachStatement9393);
            localModifierList309=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList309.getTree());

            pushFollow(FOLLOW_type_in_forEachStatement9395);
            type310=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type310.getTree());

            IDENT311=(Token)match(input,IDENT,FOLLOW_IDENT_in_forEachStatement9397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT311);


            COLON312=(Token)match(input,COLON,FOLLOW_COLON_in_forEachStatement9399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON312);


            pushFollow(FOLLOW_expression_in_forEachStatement9401);
            expression313=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression313.getTree());

            RPAREN314=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forEachStatement9403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN314);


            pushFollow(FOLLOW_statement_in_forEachStatement9405);
            statement315=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement315.getTree());

            // AST REWRITE
            // elements: type, localModifierList, statement, expression, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1072:3: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
            {
                // Java.g:1072:6: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(FOR_EACH, FOR307, "FOR_EACH")
                , root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_1, stream_statement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 79, forEachStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "forEachStatement"


    public static class whileStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whileStatement"
    // Java.g:1075:1: whileStatement : WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) ;
    public final JavaParser.whileStatement_return whileStatement() throws RecognitionException {
        JavaParser.whileStatement_return retval = new JavaParser.whileStatement_return();
        retval.start = input.LT(1);

        int whileStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token WHILE316=null;
        JavaParser.parenthesizedExpression_return parenthesizedExpression317 =null;

        JavaParser.statement_return statement318 =null;


        CommonTree WHILE316_tree=null;
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

            // Java.g:1076:2: ( WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) )
            // Java.g:1076:4: WHILE parenthesizedExpression statement
            {
            WHILE316=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileStatement9443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHILE.add(WHILE316);


            pushFollow(FOLLOW_parenthesizedExpression_in_whileStatement9445);
            parenthesizedExpression317=parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression317.getTree());

            pushFollow(FOLLOW_statement_in_whileStatement9447);
            statement318=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement318.getTree());

            // AST REWRITE
            // elements: statement, parenthesizedExpression, WHILE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1077:3: -> ^( WHILE parenthesizedExpression statement )
            {
                // Java.g:1077:6: ^( WHILE parenthesizedExpression statement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_WHILE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                adaptor.addChild(root_1, stream_statement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 80, whileStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "whileStatement"


    public static class doWhileStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "doWhileStatement"
    // Java.g:1080:1: doWhileStatement : DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) ;
    public final JavaParser.doWhileStatement_return doWhileStatement() throws RecognitionException {
        JavaParser.doWhileStatement_return retval = new JavaParser.doWhileStatement_return();
        retval.start = input.LT(1);

        int doWhileStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token DO319=null;
        Token WHILE321=null;
        Token SEMI323=null;
        JavaParser.statement_return statement320 =null;

        JavaParser.parenthesizedExpression_return parenthesizedExpression322 =null;


        CommonTree DO319_tree=null;
        CommonTree WHILE321_tree=null;
        CommonTree SEMI323_tree=null;
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

            // Java.g:1081:2: ( DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) )
            // Java.g:1081:4: DO statement WHILE parenthesizedExpression SEMI
            {
            DO319=(Token)match(input,DO,FOLLOW_DO_in_doWhileStatement9478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DO.add(DO319);


            pushFollow(FOLLOW_statement_in_doWhileStatement9480);
            statement320=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement320.getTree());

            WHILE321=(Token)match(input,WHILE,FOLLOW_WHILE_in_doWhileStatement9482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHILE.add(WHILE321);


            pushFollow(FOLLOW_parenthesizedExpression_in_doWhileStatement9484);
            parenthesizedExpression322=parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression322.getTree());

            SEMI323=(Token)match(input,SEMI,FOLLOW_SEMI_in_doWhileStatement9486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI323);


            // AST REWRITE
            // elements: parenthesizedExpression, DO, statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1082:3: -> ^( DO statement parenthesizedExpression )
            {
                // Java.g:1082:6: ^( DO statement parenthesizedExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_DO.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_statement.nextTree());

                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 81, doWhileStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "doWhileStatement"


    public static class tryStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tryStatement"
    // Java.g:1085:1: tryStatement : TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) ;
    public final JavaParser.tryStatement_return tryStatement() throws RecognitionException {
        JavaParser.tryStatement_return retval = new JavaParser.tryStatement_return();
        retval.start = input.LT(1);

        int tryStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token TRY324=null;
        JavaParser.block_return block325 =null;

        JavaParser.catches_return catches326 =null;

        JavaParser.finallyClause_return finallyClause327 =null;

        JavaParser.finallyClause_return finallyClause328 =null;


        CommonTree TRY324_tree=null;
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

            // Java.g:1086:2: ( TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) )
            // Java.g:1086:4: TRY block ( catches ( finallyClause )? | finallyClause )
            {
            TRY324=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement9517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TRY.add(TRY324);


            pushFollow(FOLLOW_block_in_tryStatement9519);
            block325=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block325.getTree());

            // Java.g:1086:14: ( catches ( finallyClause )? | finallyClause )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==CATCH) ) {
                alt96=1;
            }
            else if ( (LA96_0==FINALLY) ) {
                alt96=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }
            switch (alt96) {
                case 1 :
                    // Java.g:1086:15: catches ( finallyClause )?
                    {
                    pushFollow(FOLLOW_catches_in_tryStatement9522);
                    catches326=catches();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_catches.add(catches326.getTree());

                    // Java.g:1086:23: ( finallyClause )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==FINALLY) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // Java.g:1086:23: finallyClause
                            {
                            pushFollow(FOLLOW_finallyClause_in_tryStatement9524);
                            finallyClause327=finallyClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause327.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Java.g:1086:40: finallyClause
                    {
                    pushFollow(FOLLOW_finallyClause_in_tryStatement9529);
                    finallyClause328=finallyClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause328.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: TRY, finallyClause, catches, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1087:3: -> ^( TRY block ( catches )? ( finallyClause )? )
            {
                // Java.g:1087:6: ^( TRY block ( catches )? ( finallyClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_TRY.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // Java.g:1087:18: ( catches )?
                if ( stream_catches.hasNext() ) {
                    adaptor.addChild(root_1, stream_catches.nextTree());

                }
                stream_catches.reset();

                // Java.g:1087:27: ( finallyClause )?
                if ( stream_finallyClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_finallyClause.nextTree());

                }
                stream_finallyClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 82, tryStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "tryStatement"


    public static class switchStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switchStatement"
    // Java.g:1090:1: switchStatement : SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) ;
    public final JavaParser.switchStatement_return switchStatement() throws RecognitionException {
        JavaParser.switchStatement_return retval = new JavaParser.switchStatement_return();
        retval.start = input.LT(1);

        int switchStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token SWITCH329=null;
        Token LCURLY331=null;
        Token RCURLY333=null;
        JavaParser.parenthesizedExpression_return parenthesizedExpression330 =null;

        JavaParser.switchBlockLabels_return switchBlockLabels332 =null;


        CommonTree SWITCH329_tree=null;
        CommonTree LCURLY331_tree=null;
        CommonTree RCURLY333_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

            // Java.g:1091:2: ( SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) )
            // Java.g:1091:4: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
            {
            SWITCH329=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_switchStatement9565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SWITCH.add(SWITCH329);


            pushFollow(FOLLOW_parenthesizedExpression_in_switchStatement9567);
            parenthesizedExpression330=parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression330.getTree());

            LCURLY331=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_switchStatement9569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY331);


            pushFollow(FOLLOW_switchBlockLabels_in_switchStatement9571);
            switchBlockLabels332=switchBlockLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchBlockLabels.add(switchBlockLabels332.getTree());

            RCURLY333=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_switchStatement9573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY333);


            // AST REWRITE
            // elements: parenthesizedExpression, SWITCH, switchBlockLabels
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1092:3: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
            {
                // Java.g:1092:6: ^( SWITCH parenthesizedExpression switchBlockLabels )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_SWITCH.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                adaptor.addChild(root_1, stream_switchBlockLabels.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 83, switchStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switchStatement"


    public static class synchronizedStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronizedStatement"
    // Java.g:1095:1: synchronizedStatement : SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) ;
    public final JavaParser.synchronizedStatement_return synchronizedStatement() throws RecognitionException {
        JavaParser.synchronizedStatement_return retval = new JavaParser.synchronizedStatement_return();
        retval.start = input.LT(1);

        int synchronizedStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token SYNCHRONIZED334=null;
        JavaParser.parenthesizedExpression_return parenthesizedExpression335 =null;

        JavaParser.block_return block336 =null;


        CommonTree SYNCHRONIZED334_tree=null;
        RewriteRuleTokenStream stream_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token SYNCHRONIZED");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

            // Java.g:1096:2: ( SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) )
            // Java.g:1096:4: SYNCHRONIZED parenthesizedExpression block
            {
            SYNCHRONIZED334=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_synchronizedStatement9604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SYNCHRONIZED.add(SYNCHRONIZED334);


            pushFollow(FOLLOW_parenthesizedExpression_in_synchronizedStatement9606);
            parenthesizedExpression335=parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression335.getTree());

            pushFollow(FOLLOW_block_in_synchronizedStatement9608);
            block336=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block336.getTree());

            // AST REWRITE
            // elements: parenthesizedExpression, SYNCHRONIZED, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1097:3: -> ^( SYNCHRONIZED parenthesizedExpression block )
            {
                // Java.g:1097:6: ^( SYNCHRONIZED parenthesizedExpression block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_SYNCHRONIZED.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 84, synchronizedStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "synchronizedStatement"


    public static class returnStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "returnStatement"
    // Java.g:1100:1: returnStatement : RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) ;
    public final JavaParser.returnStatement_return returnStatement() throws RecognitionException {
        JavaParser.returnStatement_return retval = new JavaParser.returnStatement_return();
        retval.start = input.LT(1);

        int returnStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token RETURN337=null;
        Token SEMI339=null;
        JavaParser.expression_return expression338 =null;


        CommonTree RETURN337_tree=null;
        CommonTree SEMI339_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

            // Java.g:1101:2: ( RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) )
            // Java.g:1101:4: RETURN ( expression )? SEMI
            {
            RETURN337=(Token)match(input,RETURN,FOLLOW_RETURN_in_returnStatement9639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURN.add(RETURN337);


            // Java.g:1101:11: ( expression )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==BOOLEAN||LA97_0==BYTE||(LA97_0 >= CHAR && LA97_0 <= CHARACTER_LITERAL)||LA97_0==DEC||LA97_0==DECIMAL_LITERAL||LA97_0==DOUBLE||LA97_0==FALSE||(LA97_0 >= FLOAT && LA97_0 <= FLOATING_POINT_LITERAL)||LA97_0==HEX_LITERAL||LA97_0==IDENT||LA97_0==INC||LA97_0==INT||LA97_0==LESS_THAN||LA97_0==LOGICAL_NOT||(LA97_0 >= LONG && LA97_0 <= LPAREN)||LA97_0==MINUS||LA97_0==NEW||LA97_0==NOT||LA97_0==NULL||LA97_0==OCTAL_LITERAL||LA97_0==PLUS||LA97_0==SHORT||(LA97_0 >= STRING_LITERAL && LA97_0 <= SUPER)||LA97_0==THIS||LA97_0==TRUE||LA97_0==VOID) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // Java.g:1101:11: expression
                    {
                    pushFollow(FOLLOW_expression_in_returnStatement9641);
                    expression338=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression338.getTree());

                    }
                    break;

            }


            SEMI339=(Token)match(input,SEMI,FOLLOW_SEMI_in_returnStatement9644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI339);


            // AST REWRITE
            // elements: expression, RETURN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1101:28: -> ^( RETURN ( expression )? )
            {
                // Java.g:1101:31: ^( RETURN ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_RETURN.nextNode()
                , root_1);

                // Java.g:1101:40: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 85, returnStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "returnStatement"


    public static class throwStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throwStatement"
    // Java.g:1104:1: throwStatement : THROW expression SEMI -> ^( THROW expression ) ;
    public final JavaParser.throwStatement_return throwStatement() throws RecognitionException {
        JavaParser.throwStatement_return retval = new JavaParser.throwStatement_return();
        retval.start = input.LT(1);

        int throwStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token THROW340=null;
        Token SEMI342=null;
        JavaParser.expression_return expression341 =null;


        CommonTree THROW340_tree=null;
        CommonTree SEMI342_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_THROW=new RewriteRuleTokenStream(adaptor,"token THROW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

            // Java.g:1105:2: ( THROW expression SEMI -> ^( THROW expression ) )
            // Java.g:1105:4: THROW expression SEMI
            {
            THROW340=(Token)match(input,THROW,FOLLOW_THROW_in_throwStatement9672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THROW.add(THROW340);


            pushFollow(FOLLOW_expression_in_throwStatement9674);
            expression341=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression341.getTree());

            SEMI342=(Token)match(input,SEMI,FOLLOW_SEMI_in_throwStatement9676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI342);


            // AST REWRITE
            // elements: expression, THROW
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1105:26: -> ^( THROW expression )
            {
                // Java.g:1105:29: ^( THROW expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_THROW.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 86, throwStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "throwStatement"


    public static class breakStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "breakStatement"
    // Java.g:1108:1: breakStatement : BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) ;
    public final JavaParser.breakStatement_return breakStatement() throws RecognitionException {
        JavaParser.breakStatement_return retval = new JavaParser.breakStatement_return();
        retval.start = input.LT(1);

        int breakStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token BREAK343=null;
        Token IDENT344=null;
        Token SEMI345=null;

        CommonTree BREAK343_tree=null;
        CommonTree IDENT344_tree=null;
        CommonTree SEMI345_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_BREAK=new RewriteRuleTokenStream(adaptor,"token BREAK");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

            // Java.g:1109:2: ( BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) )
            // Java.g:1109:4: BREAK ( IDENT )? SEMI
            {
            BREAK343=(Token)match(input,BREAK,FOLLOW_BREAK_in_breakStatement9703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BREAK.add(BREAK343);


            // Java.g:1109:10: ( IDENT )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==IDENT) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // Java.g:1109:10: IDENT
                    {
                    IDENT344=(Token)match(input,IDENT,FOLLOW_IDENT_in_breakStatement9705); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT344);


                    }
                    break;

            }


            SEMI345=(Token)match(input,SEMI,FOLLOW_SEMI_in_breakStatement9708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI345);


            // AST REWRITE
            // elements: BREAK, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1109:22: -> ^( BREAK ( IDENT )? )
            {
                // Java.g:1109:25: ^( BREAK ( IDENT )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_BREAK.nextNode()
                , root_1);

                // Java.g:1109:33: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_IDENT.nextNode()
                    );

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 87, breakStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "breakStatement"


    public static class continueStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continueStatement"
    // Java.g:1112:1: continueStatement : CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) ;
    public final JavaParser.continueStatement_return continueStatement() throws RecognitionException {
        JavaParser.continueStatement_return retval = new JavaParser.continueStatement_return();
        retval.start = input.LT(1);

        int continueStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token CONTINUE346=null;
        Token IDENT347=null;
        Token SEMI348=null;

        CommonTree CONTINUE346_tree=null;
        CommonTree IDENT347_tree=null;
        CommonTree SEMI348_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTINUE=new RewriteRuleTokenStream(adaptor,"token CONTINUE");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

            // Java.g:1113:2: ( CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) )
            // Java.g:1113:4: CONTINUE ( IDENT )? SEMI
            {
            CONTINUE346=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_continueStatement9736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTINUE.add(CONTINUE346);


            // Java.g:1113:13: ( IDENT )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==IDENT) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // Java.g:1113:13: IDENT
                    {
                    IDENT347=(Token)match(input,IDENT,FOLLOW_IDENT_in_continueStatement9738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT347);


                    }
                    break;

            }


            SEMI348=(Token)match(input,SEMI,FOLLOW_SEMI_in_continueStatement9741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI348);


            // AST REWRITE
            // elements: IDENT, CONTINUE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1113:25: -> ^( CONTINUE ( IDENT )? )
            {
                // Java.g:1113:28: ^( CONTINUE ( IDENT )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_CONTINUE.nextNode()
                , root_1);

                // Java.g:1113:39: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_IDENT.nextNode()
                    );

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 88, continueStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "continueStatement"


    public static class labeledStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "labeledStatement"
    // Java.g:1116:1: labeledStatement : IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) ;
    public final JavaParser.labeledStatement_return labeledStatement() throws RecognitionException {
        JavaParser.labeledStatement_return retval = new JavaParser.labeledStatement_return();
        retval.start = input.LT(1);

        int labeledStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IDENT349=null;
        Token COLON350=null;
        JavaParser.statement_return statement351 =null;


        CommonTree IDENT349_tree=null;
        CommonTree COLON350_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

            // Java.g:1117:2: ( IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) )
            // Java.g:1117:4: IDENT COLON statement
            {
            IDENT349=(Token)match(input,IDENT,FOLLOW_IDENT_in_labeledStatement9769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT349);


            COLON350=(Token)match(input,COLON,FOLLOW_COLON_in_labeledStatement9771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON350);


            pushFollow(FOLLOW_statement_in_labeledStatement9773);
            statement351=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement351.getTree());

            // AST REWRITE
            // elements: IDENT, statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1117:26: -> ^( LABELED_STATEMENT IDENT statement )
            {
                // Java.g:1117:29: ^( LABELED_STATEMENT IDENT statement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(LABELED_STATEMENT, "LABELED_STATEMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_statement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 89, labeledStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "labeledStatement"


    public static class expressionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expressionStatement"
    // Java.g:1120:1: expressionStatement : ( expression SEMI !| SEMI );
    public final JavaParser.expressionStatement_return expressionStatement() throws RecognitionException {
        JavaParser.expressionStatement_return retval = new JavaParser.expressionStatement_return();
        retval.start = input.LT(1);

        int expressionStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token SEMI353=null;
        Token SEMI354=null;
        JavaParser.expression_return expression352 =null;


        CommonTree SEMI353_tree=null;
        CommonTree SEMI354_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

            // Java.g:1121:2: ( expression SEMI !| SEMI )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==BOOLEAN||LA100_0==BYTE||(LA100_0 >= CHAR && LA100_0 <= CHARACTER_LITERAL)||LA100_0==DEC||LA100_0==DECIMAL_LITERAL||LA100_0==DOUBLE||LA100_0==FALSE||(LA100_0 >= FLOAT && LA100_0 <= FLOATING_POINT_LITERAL)||LA100_0==HEX_LITERAL||LA100_0==IDENT||LA100_0==INC||LA100_0==INT||LA100_0==LESS_THAN||LA100_0==LOGICAL_NOT||(LA100_0 >= LONG && LA100_0 <= LPAREN)||LA100_0==MINUS||LA100_0==NEW||LA100_0==NOT||LA100_0==NULL||LA100_0==OCTAL_LITERAL||LA100_0==PLUS||LA100_0==SHORT||(LA100_0 >= STRING_LITERAL && LA100_0 <= SUPER)||LA100_0==THIS||LA100_0==TRUE||LA100_0==VOID) ) {
                alt100=1;
            }
            else if ( (LA100_0==SEMI) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // Java.g:1121:4: expression SEMI !
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_expressionStatement9802);
                    expression352=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression352.getTree());

                    SEMI353=(Token)match(input,SEMI,FOLLOW_SEMI_in_expressionStatement9804); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // Java.g:1122:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    SEMI354=(Token)match(input,SEMI,FOLLOW_SEMI_in_expressionStatement9815); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI354_tree = 
                    (CommonTree)adaptor.create(SEMI354)
                    ;
                    adaptor.addChild(root_0, SEMI354_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 90, expressionStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expressionStatement"


    public static class catches_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catches"
    // Java.g:1125:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
    public final JavaParser.catches_return catches() throws RecognitionException {
        JavaParser.catches_return retval = new JavaParser.catches_return();
        retval.start = input.LT(1);

        int catches_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.catchClause_return catchClause355 =null;


        RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

            // Java.g:1126:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
            // Java.g:1126:9: ( catchClause )+
            {
            // Java.g:1126:9: ( catchClause )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==CATCH) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // Java.g:1126:9: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches9840);
            	    catchClause355=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catchClause.add(catchClause355.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);


            // AST REWRITE
            // elements: catchClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1127:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
            {
                // Java.g:1127:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST")
                , root_1);

                if ( !(stream_catchClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_catchClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchClause.nextTree());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 91, catches_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "catches"


    public static class catchClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catchClause"
    // Java.g:1130:1: catchClause : CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block ;
    public final JavaParser.catchClause_return catchClause() throws RecognitionException {
        JavaParser.catchClause_return retval = new JavaParser.catchClause_return();
        retval.start = input.LT(1);

        int catchClause_StartIndex = input.index();

        CommonTree root_0 = null;

        Token CATCH356=null;
        Token LPAREN357=null;
        Token RPAREN359=null;
        JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl358 =null;

        JavaParser.block_return block360 =null;


        CommonTree CATCH356_tree=null;
        CommonTree LPAREN357_tree=null;
        CommonTree RPAREN359_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

            // Java.g:1131:5: ( CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block )
            // Java.g:1131:9: CATCH ^ LPAREN ! formalParameterStandardDecl RPAREN ! block
            {
            root_0 = (CommonTree)adaptor.nil();


            CATCH356=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause9882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CATCH356_tree = 
            (CommonTree)adaptor.create(CATCH356)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(CATCH356_tree, root_0);
            }

            LPAREN357=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchClause9885); if (state.failed) return retval;

            pushFollow(FOLLOW_formalParameterStandardDecl_in_catchClause9888);
            formalParameterStandardDecl358=formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterStandardDecl358.getTree());

            RPAREN359=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchClause9890); if (state.failed) return retval;

            pushFollow(FOLLOW_block_in_catchClause9893);
            block360=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block360.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 92, catchClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "catchClause"


    public static class finallyClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finallyClause"
    // Java.g:1134:1: finallyClause : FINALLY block -> block ;
    public final JavaParser.finallyClause_return finallyClause() throws RecognitionException {
        JavaParser.finallyClause_return retval = new JavaParser.finallyClause_return();
        retval.start = input.LT(1);

        int finallyClause_StartIndex = input.index();

        CommonTree root_0 = null;

        Token FINALLY361=null;
        JavaParser.block_return block362 =null;


        CommonTree FINALLY361_tree=null;
        RewriteRuleTokenStream stream_FINALLY=new RewriteRuleTokenStream(adaptor,"token FINALLY");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

            // Java.g:1135:5: ( FINALLY block -> block )
            // Java.g:1135:9: FINALLY block
            {
            FINALLY361=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_finallyClause9912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FINALLY.add(FINALLY361);


            pushFollow(FOLLOW_block_in_finallyClause9914);
            block362=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block362.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1136:9: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 93, finallyClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "finallyClause"


    public static class switchBlockLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switchBlockLabels"
    // Java.g:1139:1: switchBlockLabels : preCases= switchCaseLabels ( switchDefaultLabel )? postCases= switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST ( $preCases)? ( switchDefaultLabel )? ( $postCases)? ) ;
    public final JavaParser.switchBlockLabels_return switchBlockLabels() throws RecognitionException {
        JavaParser.switchBlockLabels_return retval = new JavaParser.switchBlockLabels_return();
        retval.start = input.LT(1);

        int switchBlockLabels_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.switchCaseLabels_return preCases =null;

        JavaParser.switchCaseLabels_return postCases =null;

        JavaParser.switchDefaultLabel_return switchDefaultLabel363 =null;


        RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
        RewriteRuleSubtreeStream stream_switchCaseLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

            // Java.g:1140:5: (preCases= switchCaseLabels ( switchDefaultLabel )? postCases= switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST ( $preCases)? ( switchDefaultLabel )? ( $postCases)? ) )
            // Java.g:1140:9: preCases= switchCaseLabels ( switchDefaultLabel )? postCases= switchCaseLabels
            {
            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels9948);
            preCases=switchCaseLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchCaseLabels.add(preCases.getTree());

            // Java.g:1140:35: ( switchDefaultLabel )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==DEFAULT) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Java.g:1140:35: switchDefaultLabel
                    {
                    pushFollow(FOLLOW_switchDefaultLabel_in_switchBlockLabels9950);
                    switchDefaultLabel363=switchDefaultLabel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchDefaultLabel.add(switchDefaultLabel363.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels9955);
            postCases=switchCaseLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchCaseLabels.add(postCases.getTree());

            // AST REWRITE
            // elements: switchDefaultLabel, preCases, postCases
            // token labels: 
            // rule labels: retval, preCases, postCases
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_preCases=new RewriteRuleSubtreeStream(adaptor,"rule preCases",preCases!=null?preCases.tree:null);
            RewriteRuleSubtreeStream stream_postCases=new RewriteRuleSubtreeStream(adaptor,"rule postCases",postCases!=null?postCases.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1141:9: -> ^( SWITCH_BLOCK_LABEL_LIST ( $preCases)? ( switchDefaultLabel )? ( $postCases)? )
            {
                // Java.g:1141:13: ^( SWITCH_BLOCK_LABEL_LIST ( $preCases)? ( switchDefaultLabel )? ( $postCases)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST")
                , root_1);

                // Java.g:1141:40: ( $preCases)?
                if ( stream_preCases.hasNext() ) {
                    adaptor.addChild(root_1, stream_preCases.nextTree());

                }
                stream_preCases.reset();

                // Java.g:1141:50: ( switchDefaultLabel )?
                if ( stream_switchDefaultLabel.hasNext() ) {
                    adaptor.addChild(root_1, stream_switchDefaultLabel.nextTree());

                }
                stream_switchDefaultLabel.reset();

                // Java.g:1141:71: ( $postCases)?
                if ( stream_postCases.hasNext() ) {
                    adaptor.addChild(root_1, stream_postCases.nextTree());

                }
                stream_postCases.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 94, switchBlockLabels_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switchBlockLabels"


    public static class switchCaseLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switchCaseLabels"
    // Java.g:1144:1: switchCaseLabels : ( switchCaseLabel )* ;
    public final JavaParser.switchCaseLabels_return switchCaseLabels() throws RecognitionException {
        JavaParser.switchCaseLabels_return retval = new JavaParser.switchCaseLabels_return();
        retval.start = input.LT(1);

        int switchCaseLabels_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.switchCaseLabel_return switchCaseLabel364 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

            // Java.g:1145:5: ( ( switchCaseLabel )* )
            // Java.g:1145:9: ( switchCaseLabel )*
            {
            root_0 = (CommonTree)adaptor.nil();


            // Java.g:1145:9: ( switchCaseLabel )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==CASE) ) {
                    int LA103_2 = input.LA(2);

                    if ( (synpred146_Java()) ) {
                        alt103=1;
                    }


                }


                switch (alt103) {
            	case 1 :
            	    // Java.g:1145:9: switchCaseLabel
            	    {
            	    pushFollow(FOLLOW_switchCaseLabel_in_switchCaseLabels10004);
            	    switchCaseLabel364=switchCaseLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchCaseLabel364.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 95, switchCaseLabels_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switchCaseLabels"


    public static class switchCaseLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switchCaseLabel"
    // Java.g:1148:1: switchCaseLabel : CASE ^ expression COLON ! ( blockStatement )* ;
    public final JavaParser.switchCaseLabel_return switchCaseLabel() throws RecognitionException {
        JavaParser.switchCaseLabel_return retval = new JavaParser.switchCaseLabel_return();
        retval.start = input.LT(1);

        int switchCaseLabel_StartIndex = input.index();

        CommonTree root_0 = null;

        Token CASE365=null;
        Token COLON367=null;
        JavaParser.expression_return expression366 =null;

        JavaParser.blockStatement_return blockStatement368 =null;


        CommonTree CASE365_tree=null;
        CommonTree COLON367_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

            // Java.g:1149:5: ( CASE ^ expression COLON ! ( blockStatement )* )
            // Java.g:1149:9: CASE ^ expression COLON ! ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();


            CASE365=(Token)match(input,CASE,FOLLOW_CASE_in_switchCaseLabel10032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE365_tree = 
            (CommonTree)adaptor.create(CASE365)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(CASE365_tree, root_0);
            }

            pushFollow(FOLLOW_expression_in_switchCaseLabel10035);
            expression366=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression366.getTree());

            COLON367=(Token)match(input,COLON,FOLLOW_COLON_in_switchCaseLabel10037); if (state.failed) return retval;

            // Java.g:1149:33: ( blockStatement )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==ABSTRACT||LA104_0==ASSERT||LA104_0==AT||(LA104_0 >= BOOLEAN && LA104_0 <= BYTE)||(LA104_0 >= CHAR && LA104_0 <= CLASS)||(LA104_0 >= CONTINUE && LA104_0 <= DEC)||LA104_0==DECIMAL_LITERAL||LA104_0==DO||LA104_0==DOUBLE||LA104_0==ENUM||(LA104_0 >= FALSE && LA104_0 <= FINAL)||(LA104_0 >= FLOAT && LA104_0 <= FLOATING_POINT_LITERAL)||LA104_0==FOR||LA104_0==HEX_LITERAL||(LA104_0 >= IDENT && LA104_0 <= IF)||LA104_0==INC||LA104_0==INT||LA104_0==INTERFACE||LA104_0==LCURLY||LA104_0==LESS_THAN||LA104_0==LOGICAL_NOT||(LA104_0 >= LONG && LA104_0 <= LPAREN)||LA104_0==MINUS||(LA104_0 >= NATIVE && LA104_0 <= NEW)||LA104_0==NOT||LA104_0==NULL||LA104_0==OCTAL_LITERAL||LA104_0==PLUS||(LA104_0 >= PRIVATE && LA104_0 <= PUBLIC)||LA104_0==RETURN||LA104_0==SEMI||LA104_0==SHORT||LA104_0==STATIC||(LA104_0 >= STRICTFP && LA104_0 <= SUPER)||LA104_0==SWITCH||(LA104_0 >= SYNCHRONIZED && LA104_0 <= THIS)||LA104_0==THROW||(LA104_0 >= TRANSIENT && LA104_0 <= TRY)||LA104_0==VOID||(LA104_0 >= VOLATILE && LA104_0 <= WHILE)) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // Java.g:1149:33: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCaseLabel10040);
            	    blockStatement368=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement368.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 96, switchCaseLabel_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switchCaseLabel"


    public static class switchDefaultLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switchDefaultLabel"
    // Java.g:1152:1: switchDefaultLabel : DEFAULT ^ COLON ! ( blockStatement )* ;
    public final JavaParser.switchDefaultLabel_return switchDefaultLabel() throws RecognitionException {
        JavaParser.switchDefaultLabel_return retval = new JavaParser.switchDefaultLabel_return();
        retval.start = input.LT(1);

        int switchDefaultLabel_StartIndex = input.index();

        CommonTree root_0 = null;

        Token DEFAULT369=null;
        Token COLON370=null;
        JavaParser.blockStatement_return blockStatement371 =null;


        CommonTree DEFAULT369_tree=null;
        CommonTree COLON370_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

            // Java.g:1153:5: ( DEFAULT ^ COLON ! ( blockStatement )* )
            // Java.g:1153:9: DEFAULT ^ COLON ! ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();


            DEFAULT369=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_switchDefaultLabel10064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT369_tree = 
            (CommonTree)adaptor.create(DEFAULT369)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT369_tree, root_0);
            }

            COLON370=(Token)match(input,COLON,FOLLOW_COLON_in_switchDefaultLabel10067); if (state.failed) return retval;

            // Java.g:1153:25: ( blockStatement )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==ABSTRACT||LA105_0==ASSERT||LA105_0==AT||(LA105_0 >= BOOLEAN && LA105_0 <= BYTE)||(LA105_0 >= CHAR && LA105_0 <= CLASS)||(LA105_0 >= CONTINUE && LA105_0 <= DEC)||LA105_0==DECIMAL_LITERAL||LA105_0==DO||LA105_0==DOUBLE||LA105_0==ENUM||(LA105_0 >= FALSE && LA105_0 <= FINAL)||(LA105_0 >= FLOAT && LA105_0 <= FLOATING_POINT_LITERAL)||LA105_0==FOR||LA105_0==HEX_LITERAL||(LA105_0 >= IDENT && LA105_0 <= IF)||LA105_0==INC||LA105_0==INT||LA105_0==INTERFACE||LA105_0==LCURLY||LA105_0==LESS_THAN||LA105_0==LOGICAL_NOT||(LA105_0 >= LONG && LA105_0 <= LPAREN)||LA105_0==MINUS||(LA105_0 >= NATIVE && LA105_0 <= NEW)||LA105_0==NOT||LA105_0==NULL||LA105_0==OCTAL_LITERAL||LA105_0==PLUS||(LA105_0 >= PRIVATE && LA105_0 <= PUBLIC)||LA105_0==RETURN||LA105_0==SEMI||LA105_0==SHORT||LA105_0==STATIC||(LA105_0 >= STRICTFP && LA105_0 <= SUPER)||LA105_0==SWITCH||(LA105_0 >= SYNCHRONIZED && LA105_0 <= THIS)||LA105_0==THROW||(LA105_0 >= TRANSIENT && LA105_0 <= TRY)||LA105_0==VOID||(LA105_0 >= VOLATILE && LA105_0 <= WHILE)) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // Java.g:1153:25: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchDefaultLabel10070);
            	    blockStatement371=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement371.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 97, switchDefaultLabel_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "switchDefaultLabel"


    public static class forInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forInit"
    // Java.g:1156:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
    public final JavaParser.forInit_return forInit() throws RecognitionException {
        JavaParser.forInit_return retval = new JavaParser.forInit_return();
        retval.start = input.LT(1);

        int forInit_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.localVariableDeclaration_return localVariableDeclaration372 =null;

        JavaParser.expressionList_return expressionList373 =null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

            // Java.g:1157:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
            int alt106=3;
            switch ( input.LA(1) ) {
            case AT:
            case FINAL:
                {
                alt106=1;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA106_3 = input.LA(2);

                if ( (synpred149_Java()) ) {
                    alt106=1;
                }
                else if ( (synpred150_Java()) ) {
                    alt106=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 3, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA106_4 = input.LA(2);

                if ( (synpred149_Java()) ) {
                    alt106=1;
                }
                else if ( (synpred150_Java()) ) {
                    alt106=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 4, input);

                    throw nvae;

                }
                }
                break;
            case CHARACTER_LITERAL:
            case DEC:
            case DECIMAL_LITERAL:
            case FALSE:
            case FLOATING_POINT_LITERAL:
            case HEX_LITERAL:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NEW:
            case NOT:
            case NULL:
            case OCTAL_LITERAL:
            case PLUS:
            case STRING_LITERAL:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
                {
                alt106=2;
                }
                break;
            case SEMI:
                {
                alt106=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }

            switch (alt106) {
                case 1 :
                    // Java.g:1157:9: localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit10094);
                    localVariableDeclaration372=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_localVariableDeclaration.add(localVariableDeclaration372.getTree());

                    // AST REWRITE
                    // elements: localVariableDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1157:37: -> ^( FOR_INIT localVariableDeclaration )
                    {
                        // Java.g:1157:41: ^( FOR_INIT localVariableDeclaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(FOR_INIT, "FOR_INIT")
                        , root_1);

                        adaptor.addChild(root_1, stream_localVariableDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1158:9: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit10116);
                    expressionList373=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList373.getTree());

                    // AST REWRITE
                    // elements: expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1158:37: -> ^( FOR_INIT expressionList )
                    {
                        // Java.g:1158:41: ^( FOR_INIT expressionList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(FOR_INIT, "FOR_INIT")
                        , root_1);

                        adaptor.addChild(root_1, stream_expressionList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1159:37: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1159:37: -> ^( FOR_INIT )
                    {
                        // Java.g:1159:41: ^( FOR_INIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(FOR_INIT, "FOR_INIT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 98, forInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "forInit"


    public static class forCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forCondition"
    // Java.g:1162:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
    public final JavaParser.forCondition_return forCondition() throws RecognitionException {
        JavaParser.forCondition_return retval = new JavaParser.forCondition_return();
        retval.start = input.LT(1);

        int forCondition_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.expression_return expression374 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

            // Java.g:1163:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
            // Java.g:1163:9: ( expression )?
            {
            // Java.g:1163:9: ( expression )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==BOOLEAN||LA107_0==BYTE||(LA107_0 >= CHAR && LA107_0 <= CHARACTER_LITERAL)||LA107_0==DEC||LA107_0==DECIMAL_LITERAL||LA107_0==DOUBLE||LA107_0==FALSE||(LA107_0 >= FLOAT && LA107_0 <= FLOATING_POINT_LITERAL)||LA107_0==HEX_LITERAL||LA107_0==IDENT||LA107_0==INC||LA107_0==INT||LA107_0==LESS_THAN||LA107_0==LOGICAL_NOT||(LA107_0 >= LONG && LA107_0 <= LPAREN)||LA107_0==MINUS||LA107_0==NEW||LA107_0==NOT||LA107_0==NULL||LA107_0==OCTAL_LITERAL||LA107_0==PLUS||LA107_0==SHORT||(LA107_0 >= STRING_LITERAL && LA107_0 <= SUPER)||LA107_0==THIS||LA107_0==TRUE||LA107_0==VOID) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // Java.g:1163:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_forCondition10204);
                    expression374=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression374.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1164:9: -> ^( FOR_CONDITION ( expression )? )
            {
                // Java.g:1164:13: ^( FOR_CONDITION ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(FOR_CONDITION, "FOR_CONDITION")
                , root_1);

                // Java.g:1164:29: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 99, forCondition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "forCondition"


    public static class forUpdater_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forUpdater"
    // Java.g:1167:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
    public final JavaParser.forUpdater_return forUpdater() throws RecognitionException {
        JavaParser.forUpdater_return retval = new JavaParser.forUpdater_return();
        retval.start = input.LT(1);

        int forUpdater_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.expressionList_return expressionList375 =null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

            // Java.g:1168:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
            // Java.g:1168:9: ( expressionList )?
            {
            // Java.g:1168:9: ( expressionList )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==BOOLEAN||LA108_0==BYTE||(LA108_0 >= CHAR && LA108_0 <= CHARACTER_LITERAL)||LA108_0==DEC||LA108_0==DECIMAL_LITERAL||LA108_0==DOUBLE||LA108_0==FALSE||(LA108_0 >= FLOAT && LA108_0 <= FLOATING_POINT_LITERAL)||LA108_0==HEX_LITERAL||LA108_0==IDENT||LA108_0==INC||LA108_0==INT||LA108_0==LESS_THAN||LA108_0==LOGICAL_NOT||(LA108_0 >= LONG && LA108_0 <= LPAREN)||LA108_0==MINUS||LA108_0==NEW||LA108_0==NOT||LA108_0==NULL||LA108_0==OCTAL_LITERAL||LA108_0==PLUS||LA108_0==SHORT||(LA108_0 >= STRING_LITERAL && LA108_0 <= SUPER)||LA108_0==THIS||LA108_0==TRUE||LA108_0==VOID) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // Java.g:1168:9: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forUpdater10246);
                    expressionList375=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList375.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1169:9: -> ^( FOR_UPDATE ( expressionList )? )
            {
                // Java.g:1169:13: ^( FOR_UPDATE ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(FOR_UPDATE, "FOR_UPDATE")
                , root_1);

                // Java.g:1169:26: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 100, forUpdater_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "forUpdater"


    public static class parenthesizedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parenthesizedExpression"
    // Java.g:1174:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
    public final JavaParser.parenthesizedExpression_return parenthesizedExpression() throws RecognitionException {
        JavaParser.parenthesizedExpression_return retval = new JavaParser.parenthesizedExpression_return();
        retval.start = input.LT(1);

        int parenthesizedExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LPAREN376=null;
        Token RPAREN378=null;
        JavaParser.expression_return expression377 =null;


        CommonTree LPAREN376_tree=null;
        CommonTree RPAREN378_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

            // Java.g:1175:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
            // Java.g:1175:9: LPAREN expression RPAREN
            {
            LPAREN376=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parenthesizedExpression10286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN376);


            pushFollow(FOLLOW_expression_in_parenthesizedExpression10288);
            expression377=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression377.getTree());

            RPAREN378=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parenthesizedExpression10290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN378);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1176:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
            {
                // Java.g:1176:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(PARENTESIZED_EXPR, LPAREN376, "PARENTESIZED_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 101, parenthesizedExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parenthesizedExpression"


    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expressionList"
    // Java.g:1179:1: expressionList : expression ( COMMA ! expression )* ;
    public final JavaParser.expressionList_return expressionList() throws RecognitionException {
        JavaParser.expressionList_return retval = new JavaParser.expressionList_return();
        retval.start = input.LT(1);

        int expressionList_StartIndex = input.index();

        CommonTree root_0 = null;

        Token COMMA380=null;
        JavaParser.expression_return expression379 =null;

        JavaParser.expression_return expression381 =null;


        CommonTree COMMA380_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

            // Java.g:1180:5: ( expression ( COMMA ! expression )* )
            // Java.g:1180:9: expression ( COMMA ! expression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_expression_in_expressionList10331);
            expression379=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression379.getTree());

            // Java.g:1180:20: ( COMMA ! expression )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // Java.g:1180:21: COMMA ! expression
            	    {
            	    COMMA380=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10334); if (state.failed) return retval;

            	    pushFollow(FOLLOW_expression_in_expressionList10337);
            	    expression381=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression381.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 102, expressionList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expressionList"


    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Java.g:1184:1: expression : assignmentExpression -> ^( EXPR assignmentExpression ) ;
    public final JavaParser.expression_return expression() throws RecognitionException {
        JavaParser.expression_return retval = new JavaParser.expression_return();
        retval.start = input.LT(1);

        int expression_StartIndex = input.index();

        CommonTree root_0 = null;

        JavaParser.assignmentExpression_return assignmentExpression382 =null;


        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

            // Java.g:1185:5: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
            // Java.g:1185:9: assignmentExpression
            {
            pushFollow(FOLLOW_assignmentExpression_in_expression10363);
            assignmentExpression382=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression382.getTree());

            // AST REWRITE
            // elements: assignmentExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1186:9: -> ^( EXPR assignmentExpression )
            {
                // Java.g:1186:13: ^( EXPR assignmentExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(EXPR, "EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_assignmentExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 103, expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class assignmentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignmentExpression"
    // Java.g:1189:1: assignmentExpression : conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? ;
    public final JavaParser.assignmentExpression_return assignmentExpression() throws RecognitionException {
        JavaParser.assignmentExpression_return retval = new JavaParser.assignmentExpression_return();
        retval.start = input.LT(1);

        int assignmentExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ASSIGN384=null;
        Token PLUS_ASSIGN385=null;
        Token MINUS_ASSIGN386=null;
        Token STAR_ASSIGN387=null;
        Token DIV_ASSIGN388=null;
        Token AND_ASSIGN389=null;
        Token OR_ASSIGN390=null;
        Token XOR_ASSIGN391=null;
        Token MOD_ASSIGN392=null;
        Token SHIFT_LEFT_ASSIGN393=null;
        Token SHIFT_RIGHT_ASSIGN394=null;
        Token BIT_SHIFT_RIGHT_ASSIGN395=null;
        JavaParser.conditionalExpression_return conditionalExpression383 =null;

        JavaParser.assignmentExpression_return assignmentExpression396 =null;


        CommonTree ASSIGN384_tree=null;
        CommonTree PLUS_ASSIGN385_tree=null;
        CommonTree MINUS_ASSIGN386_tree=null;
        CommonTree STAR_ASSIGN387_tree=null;
        CommonTree DIV_ASSIGN388_tree=null;
        CommonTree AND_ASSIGN389_tree=null;
        CommonTree OR_ASSIGN390_tree=null;
        CommonTree XOR_ASSIGN391_tree=null;
        CommonTree MOD_ASSIGN392_tree=null;
        CommonTree SHIFT_LEFT_ASSIGN393_tree=null;
        CommonTree SHIFT_RIGHT_ASSIGN394_tree=null;
        CommonTree BIT_SHIFT_RIGHT_ASSIGN395_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

            // Java.g:1190:5: ( conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )? )
            // Java.g:1190:9: conditionalExpression ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_conditionalExpression_in_assignmentExpression10399);
            conditionalExpression383=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression383.getTree());

            // Java.g:1191:9: ( ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==AND_ASSIGN||LA111_0==ASSIGN||LA111_0==BIT_SHIFT_RIGHT_ASSIGN||LA111_0==DIV_ASSIGN||LA111_0==MINUS_ASSIGN||LA111_0==MOD_ASSIGN||LA111_0==OR_ASSIGN||LA111_0==PLUS_ASSIGN||LA111_0==SHIFT_LEFT_ASSIGN||LA111_0==SHIFT_RIGHT_ASSIGN||LA111_0==STAR_ASSIGN||LA111_0==XOR_ASSIGN) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // Java.g:1191:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^) assignmentExpression
                    {
                    // Java.g:1191:13: ( ASSIGN ^| PLUS_ASSIGN ^| MINUS_ASSIGN ^| STAR_ASSIGN ^| DIV_ASSIGN ^| AND_ASSIGN ^| OR_ASSIGN ^| XOR_ASSIGN ^| MOD_ASSIGN ^| SHIFT_LEFT_ASSIGN ^| SHIFT_RIGHT_ASSIGN ^| BIT_SHIFT_RIGHT_ASSIGN ^)
                    int alt110=12;
                    switch ( input.LA(1) ) {
                    case ASSIGN:
                        {
                        alt110=1;
                        }
                        break;
                    case PLUS_ASSIGN:
                        {
                        alt110=2;
                        }
                        break;
                    case MINUS_ASSIGN:
                        {
                        alt110=3;
                        }
                        break;
                    case STAR_ASSIGN:
                        {
                        alt110=4;
                        }
                        break;
                    case DIV_ASSIGN:
                        {
                        alt110=5;
                        }
                        break;
                    case AND_ASSIGN:
                        {
                        alt110=6;
                        }
                        break;
                    case OR_ASSIGN:
                        {
                        alt110=7;
                        }
                        break;
                    case XOR_ASSIGN:
                        {
                        alt110=8;
                        }
                        break;
                    case MOD_ASSIGN:
                        {
                        alt110=9;
                        }
                        break;
                    case SHIFT_LEFT_ASSIGN:
                        {
                        alt110=10;
                        }
                        break;
                    case SHIFT_RIGHT_ASSIGN:
                        {
                        alt110=11;
                        }
                        break;
                    case BIT_SHIFT_RIGHT_ASSIGN:
                        {
                        alt110=12;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 110, 0, input);

                        throw nvae;

                    }

                    switch (alt110) {
                        case 1 :
                            // Java.g:1191:17: ASSIGN ^
                            {
                            ASSIGN384=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentExpression10418); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASSIGN384_tree = 
                            (CommonTree)adaptor.create(ASSIGN384)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(ASSIGN384_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // Java.g:1192:17: PLUS_ASSIGN ^
                            {
                            PLUS_ASSIGN385=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentExpression10437); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PLUS_ASSIGN385_tree = 
                            (CommonTree)adaptor.create(PLUS_ASSIGN385)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(PLUS_ASSIGN385_tree, root_0);
                            }

                            }
                            break;
                        case 3 :
                            // Java.g:1193:17: MINUS_ASSIGN ^
                            {
                            MINUS_ASSIGN386=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentExpression10456); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MINUS_ASSIGN386_tree = 
                            (CommonTree)adaptor.create(MINUS_ASSIGN386)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(MINUS_ASSIGN386_tree, root_0);
                            }

                            }
                            break;
                        case 4 :
                            // Java.g:1194:17: STAR_ASSIGN ^
                            {
                            STAR_ASSIGN387=(Token)match(input,STAR_ASSIGN,FOLLOW_STAR_ASSIGN_in_assignmentExpression10475); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STAR_ASSIGN387_tree = 
                            (CommonTree)adaptor.create(STAR_ASSIGN387)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(STAR_ASSIGN387_tree, root_0);
                            }

                            }
                            break;
                        case 5 :
                            // Java.g:1195:17: DIV_ASSIGN ^
                            {
                            DIV_ASSIGN388=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentExpression10494); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DIV_ASSIGN388_tree = 
                            (CommonTree)adaptor.create(DIV_ASSIGN388)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(DIV_ASSIGN388_tree, root_0);
                            }

                            }
                            break;
                        case 6 :
                            // Java.g:1196:17: AND_ASSIGN ^
                            {
                            AND_ASSIGN389=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentExpression10513); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_ASSIGN389_tree = 
                            (CommonTree)adaptor.create(AND_ASSIGN389)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(AND_ASSIGN389_tree, root_0);
                            }

                            }
                            break;
                        case 7 :
                            // Java.g:1197:17: OR_ASSIGN ^
                            {
                            OR_ASSIGN390=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentExpression10532); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OR_ASSIGN390_tree = 
                            (CommonTree)adaptor.create(OR_ASSIGN390)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(OR_ASSIGN390_tree, root_0);
                            }

                            }
                            break;
                        case 8 :
                            // Java.g:1198:17: XOR_ASSIGN ^
                            {
                            XOR_ASSIGN391=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentExpression10551); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            XOR_ASSIGN391_tree = 
                            (CommonTree)adaptor.create(XOR_ASSIGN391)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(XOR_ASSIGN391_tree, root_0);
                            }

                            }
                            break;
                        case 9 :
                            // Java.g:1199:17: MOD_ASSIGN ^
                            {
                            MOD_ASSIGN392=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentExpression10570); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MOD_ASSIGN392_tree = 
                            (CommonTree)adaptor.create(MOD_ASSIGN392)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(MOD_ASSIGN392_tree, root_0);
                            }

                            }
                            break;
                        case 10 :
                            // Java.g:1200:17: SHIFT_LEFT_ASSIGN ^
                            {
                            SHIFT_LEFT_ASSIGN393=(Token)match(input,SHIFT_LEFT_ASSIGN,FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10589); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_LEFT_ASSIGN393_tree = 
                            (CommonTree)adaptor.create(SHIFT_LEFT_ASSIGN393)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT_ASSIGN393_tree, root_0);
                            }

                            }
                            break;
                        case 11 :
                            // Java.g:1201:17: SHIFT_RIGHT_ASSIGN ^
                            {
                            SHIFT_RIGHT_ASSIGN394=(Token)match(input,SHIFT_RIGHT_ASSIGN,FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10608); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_RIGHT_ASSIGN394_tree = 
                            (CommonTree)adaptor.create(SHIFT_RIGHT_ASSIGN394)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT_ASSIGN394_tree, root_0);
                            }

                            }
                            break;
                        case 12 :
                            // Java.g:1202:17: BIT_SHIFT_RIGHT_ASSIGN ^
                            {
                            BIT_SHIFT_RIGHT_ASSIGN395=(Token)match(input,BIT_SHIFT_RIGHT_ASSIGN,FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10627); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIT_SHIFT_RIGHT_ASSIGN395_tree = 
                            (CommonTree)adaptor.create(BIT_SHIFT_RIGHT_ASSIGN395)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT_ASSIGN395_tree, root_0);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_assignmentExpression_in_assignmentExpression10649);
                    assignmentExpression396=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression396.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 104, assignmentExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignmentExpression"


    public static class conditionalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditionalExpression"
    // Java.g:1207:1: conditionalExpression : logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? ;
    public final JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        JavaParser.conditionalExpression_return retval = new JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);

        int conditionalExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token QUESTION398=null;
        Token COLON400=null;
        JavaParser.logicalOrExpression_return logicalOrExpression397 =null;

        JavaParser.assignmentExpression_return assignmentExpression399 =null;

        JavaParser.conditionalExpression_return conditionalExpression401 =null;


        CommonTree QUESTION398_tree=null;
        CommonTree COLON400_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

            // Java.g:1208:5: ( logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )? )
            // Java.g:1208:9: logicalOrExpression ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression10674);
            logicalOrExpression397=logicalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalOrExpression397.getTree());

            // Java.g:1208:29: ( QUESTION ^ assignmentExpression COLON ! conditionalExpression )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==QUESTION) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // Java.g:1208:30: QUESTION ^ assignmentExpression COLON ! conditionalExpression
                    {
                    QUESTION398=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression10677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION398_tree = 
                    (CommonTree)adaptor.create(QUESTION398)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(QUESTION398_tree, root_0);
                    }

                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpression10680);
                    assignmentExpression399=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression399.getTree());

                    COLON400=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression10682); if (state.failed) return retval;

                    pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression10685);
                    conditionalExpression401=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression401.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 105, conditionalExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"


    public static class logicalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalOrExpression"
    // Java.g:1211:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* ;
    public final JavaParser.logicalOrExpression_return logicalOrExpression() throws RecognitionException {
        JavaParser.logicalOrExpression_return retval = new JavaParser.logicalOrExpression_return();
        retval.start = input.LT(1);

        int logicalOrExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LOGICAL_OR403=null;
        JavaParser.logicalAndExpression_return logicalAndExpression402 =null;

        JavaParser.logicalAndExpression_return logicalAndExpression404 =null;


        CommonTree LOGICAL_OR403_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

            // Java.g:1212:5: ( logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )* )
            // Java.g:1212:9: logicalAndExpression ( LOGICAL_OR ^ logicalAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression10706);
            logicalAndExpression402=logicalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression402.getTree());

            // Java.g:1212:30: ( LOGICAL_OR ^ logicalAndExpression )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==LOGICAL_OR) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // Java.g:1212:31: LOGICAL_OR ^ logicalAndExpression
            	    {
            	    LOGICAL_OR403=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_logicalOrExpression10709); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_OR403_tree = 
            	    (CommonTree)adaptor.create(LOGICAL_OR403)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_OR403_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression10712);
            	    logicalAndExpression404=logicalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression404.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 106, logicalOrExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "logicalOrExpression"


    public static class logicalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalAndExpression"
    // Java.g:1215:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
    public final JavaParser.logicalAndExpression_return logicalAndExpression() throws RecognitionException {
        JavaParser.logicalAndExpression_return retval = new JavaParser.logicalAndExpression_return();
        retval.start = input.LT(1);

        int logicalAndExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LOGICAL_AND406=null;
        JavaParser.inclusiveOrExpression_return inclusiveOrExpression405 =null;

        JavaParser.inclusiveOrExpression_return inclusiveOrExpression407 =null;


        CommonTree LOGICAL_AND406_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

            // Java.g:1216:5: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
            // Java.g:1216:9: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression10733);
            inclusiveOrExpression405=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression405.getTree());

            // Java.g:1216:31: ( LOGICAL_AND ^ inclusiveOrExpression )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==LOGICAL_AND) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // Java.g:1216:32: LOGICAL_AND ^ inclusiveOrExpression
            	    {
            	    LOGICAL_AND406=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_logicalAndExpression10736); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_AND406_tree = 
            	    (CommonTree)adaptor.create(LOGICAL_AND406)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_AND406_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression10739);
            	    inclusiveOrExpression407=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression407.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 107, logicalAndExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "logicalAndExpression"


    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inclusiveOrExpression"
    // Java.g:1219:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);

        int inclusiveOrExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token OR409=null;
        JavaParser.exclusiveOrExpression_return exclusiveOrExpression408 =null;

        JavaParser.exclusiveOrExpression_return exclusiveOrExpression410 =null;


        CommonTree OR409_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

            // Java.g:1220:5: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
            // Java.g:1220:9: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10760);
            exclusiveOrExpression408=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression408.getTree());

            // Java.g:1220:31: ( OR ^ exclusiveOrExpression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==OR) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // Java.g:1220:32: OR ^ exclusiveOrExpression
            	    {
            	    OR409=(Token)match(input,OR,FOLLOW_OR_in_inclusiveOrExpression10763); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR409_tree = 
            	    (CommonTree)adaptor.create(OR409)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(OR409_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10766);
            	    exclusiveOrExpression410=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression410.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 108, inclusiveOrExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"


    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exclusiveOrExpression"
    // Java.g:1223:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);

        int exclusiveOrExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token XOR412=null;
        JavaParser.andExpression_return andExpression411 =null;

        JavaParser.andExpression_return andExpression413 =null;


        CommonTree XOR412_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

            // Java.g:1224:5: ( andExpression ( XOR ^ andExpression )* )
            // Java.g:1224:9: andExpression ( XOR ^ andExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression10787);
            andExpression411=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression411.getTree());

            // Java.g:1224:23: ( XOR ^ andExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==XOR) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // Java.g:1224:24: XOR ^ andExpression
            	    {
            	    XOR412=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression10790); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR412_tree = 
            	    (CommonTree)adaptor.create(XOR412)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(XOR412_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression10793);
            	    andExpression413=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression413.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 109, exclusiveOrExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"


    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "andExpression"
    // Java.g:1227:1: andExpression : equalityExpression ( AND ^ equalityExpression )* ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);

        int andExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token AND415=null;
        JavaParser.equalityExpression_return equalityExpression414 =null;

        JavaParser.equalityExpression_return equalityExpression416 =null;


        CommonTree AND415_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

            // Java.g:1228:5: ( equalityExpression ( AND ^ equalityExpression )* )
            // Java.g:1228:9: equalityExpression ( AND ^ equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_equalityExpression_in_andExpression10814);
            equalityExpression414=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression414.getTree());

            // Java.g:1228:28: ( AND ^ equalityExpression )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==AND) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // Java.g:1228:29: AND ^ equalityExpression
            	    {
            	    AND415=(Token)match(input,AND,FOLLOW_AND_in_andExpression10817); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND415_tree = 
            	    (CommonTree)adaptor.create(AND415)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(AND415_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_equalityExpression_in_andExpression10820);
            	    equalityExpression416=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression416.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 110, andExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "andExpression"


    public static class equalityExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "equalityExpression"
    // Java.g:1231:1: equalityExpression : instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* ;
    public final JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        JavaParser.equalityExpression_return retval = new JavaParser.equalityExpression_return();
        retval.start = input.LT(1);

        int equalityExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token EQUAL418=null;
        Token NOT_EQUAL419=null;
        JavaParser.instanceOfExpression_return instanceOfExpression417 =null;

        JavaParser.instanceOfExpression_return instanceOfExpression420 =null;


        CommonTree EQUAL418_tree=null;
        CommonTree NOT_EQUAL419_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

            // Java.g:1232:5: ( instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )* )
            // Java.g:1232:9: instanceOfExpression ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression10841);
            instanceOfExpression417=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression417.getTree());

            // Java.g:1233:9: ( ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==EQUAL||LA119_0==NOT_EQUAL) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // Java.g:1233:13: ( EQUAL ^| NOT_EQUAL ^) instanceOfExpression
            	    {
            	    // Java.g:1233:13: ( EQUAL ^| NOT_EQUAL ^)
            	    int alt118=2;
            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0==EQUAL) ) {
            	        alt118=1;
            	    }
            	    else if ( (LA118_0==NOT_EQUAL) ) {
            	        alt118=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 118, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt118) {
            	        case 1 :
            	            // Java.g:1233:17: EQUAL ^
            	            {
            	            EQUAL418=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_equalityExpression10860); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL418_tree = 
            	            (CommonTree)adaptor.create(EQUAL418)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(EQUAL418_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // Java.g:1234:17: NOT_EQUAL ^
            	            {
            	            NOT_EQUAL419=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_equalityExpression10879); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NOT_EQUAL419_tree = 
            	            (CommonTree)adaptor.create(NOT_EQUAL419)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(NOT_EQUAL419_tree, root_0);
            	            }

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression10909);
            	    instanceOfExpression420=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression420.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 111, equalityExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "equalityExpression"


    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "instanceOfExpression"
    // Java.g:1240:1: instanceOfExpression : relationalExpression ( INSTANCEOF ^ type )? ;
    public final JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        JavaParser.instanceOfExpression_return retval = new JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);

        int instanceOfExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token INSTANCEOF422=null;
        JavaParser.relationalExpression_return relationalExpression421 =null;

        JavaParser.type_return type423 =null;


        CommonTree INSTANCEOF422_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

            // Java.g:1241:5: ( relationalExpression ( INSTANCEOF ^ type )? )
            // Java.g:1241:9: relationalExpression ( INSTANCEOF ^ type )?
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression10939);
            relationalExpression421=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression421.getTree());

            // Java.g:1241:30: ( INSTANCEOF ^ type )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==INSTANCEOF) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // Java.g:1241:31: INSTANCEOF ^ type
                    {
                    INSTANCEOF422=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_instanceOfExpression10942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF422_tree = 
                    (CommonTree)adaptor.create(INSTANCEOF422)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF422_tree, root_0);
                    }

                    pushFollow(FOLLOW_type_in_instanceOfExpression10945);
                    type423=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type423.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 112, instanceOfExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"


    public static class relationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relationalExpression"
    // Java.g:1244:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);

        int relationalExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LESS_OR_EQUAL425=null;
        Token GREATER_OR_EQUAL426=null;
        Token LESS_THAN427=null;
        Token GREATER_THAN428=null;
        JavaParser.shiftExpression_return shiftExpression424 =null;

        JavaParser.shiftExpression_return shiftExpression429 =null;


        CommonTree LESS_OR_EQUAL425_tree=null;
        CommonTree GREATER_OR_EQUAL426_tree=null;
        CommonTree LESS_THAN427_tree=null;
        CommonTree GREATER_THAN428_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

            // Java.g:1245:5: ( shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )* )
            // Java.g:1245:9: shiftExpression ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_shiftExpression_in_relationalExpression10966);
            shiftExpression424=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression424.getTree());

            // Java.g:1246:9: ( ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( ((LA122_0 >= GREATER_OR_EQUAL && LA122_0 <= GREATER_THAN)||(LA122_0 >= LESS_OR_EQUAL && LA122_0 <= LESS_THAN)) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // Java.g:1246:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^) shiftExpression
            	    {
            	    // Java.g:1246:13: ( LESS_OR_EQUAL ^| GREATER_OR_EQUAL ^| LESS_THAN ^| GREATER_THAN ^)
            	    int alt121=4;
            	    switch ( input.LA(1) ) {
            	    case LESS_OR_EQUAL:
            	        {
            	        alt121=1;
            	        }
            	        break;
            	    case GREATER_OR_EQUAL:
            	        {
            	        alt121=2;
            	        }
            	        break;
            	    case LESS_THAN:
            	        {
            	        alt121=3;
            	        }
            	        break;
            	    case GREATER_THAN:
            	        {
            	        alt121=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 121, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt121) {
            	        case 1 :
            	            // Java.g:1246:17: LESS_OR_EQUAL ^
            	            {
            	            LESS_OR_EQUAL425=(Token)match(input,LESS_OR_EQUAL,FOLLOW_LESS_OR_EQUAL_in_relationalExpression10985); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_OR_EQUAL425_tree = 
            	            (CommonTree)adaptor.create(LESS_OR_EQUAL425)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_OR_EQUAL425_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // Java.g:1247:17: GREATER_OR_EQUAL ^
            	            {
            	            GREATER_OR_EQUAL426=(Token)match(input,GREATER_OR_EQUAL,FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11004); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_OR_EQUAL426_tree = 
            	            (CommonTree)adaptor.create(GREATER_OR_EQUAL426)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_OR_EQUAL426_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // Java.g:1248:17: LESS_THAN ^
            	            {
            	            LESS_THAN427=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_relationalExpression11023); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_THAN427_tree = 
            	            (CommonTree)adaptor.create(LESS_THAN427)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_THAN427_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // Java.g:1249:17: GREATER_THAN ^
            	            {
            	            GREATER_THAN428=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_relationalExpression11042); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_THAN428_tree = 
            	            (CommonTree)adaptor.create(GREATER_THAN428)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_THAN428_tree, root_0);
            	            }

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression11071);
            	    shiftExpression429=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression429.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 113, relationalExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "relationalExpression"


    public static class shiftExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shiftExpression"
    // Java.g:1255:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* ;
    public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
        retval.start = input.LT(1);

        int shiftExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token BIT_SHIFT_RIGHT431=null;
        Token SHIFT_RIGHT432=null;
        Token SHIFT_LEFT433=null;
        JavaParser.additiveExpression_return additiveExpression430 =null;

        JavaParser.additiveExpression_return additiveExpression434 =null;


        CommonTree BIT_SHIFT_RIGHT431_tree=null;
        CommonTree SHIFT_RIGHT432_tree=null;
        CommonTree SHIFT_LEFT433_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

            // Java.g:1256:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )* )
            // Java.g:1256:9: additiveExpression ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_additiveExpression_in_shiftExpression11105);
            additiveExpression430=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression430.getTree());

            // Java.g:1257:9: ( ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==BIT_SHIFT_RIGHT||LA124_0==SHIFT_LEFT||LA124_0==SHIFT_RIGHT) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // Java.g:1257:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^) additiveExpression
            	    {
            	    // Java.g:1257:13: ( BIT_SHIFT_RIGHT ^| SHIFT_RIGHT ^| SHIFT_LEFT ^)
            	    int alt123=3;
            	    switch ( input.LA(1) ) {
            	    case BIT_SHIFT_RIGHT:
            	        {
            	        alt123=1;
            	        }
            	        break;
            	    case SHIFT_RIGHT:
            	        {
            	        alt123=2;
            	        }
            	        break;
            	    case SHIFT_LEFT:
            	        {
            	        alt123=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 123, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt123) {
            	        case 1 :
            	            // Java.g:1257:17: BIT_SHIFT_RIGHT ^
            	            {
            	            BIT_SHIFT_RIGHT431=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11123); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BIT_SHIFT_RIGHT431_tree = 
            	            (CommonTree)adaptor.create(BIT_SHIFT_RIGHT431)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT431_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // Java.g:1258:17: SHIFT_RIGHT ^
            	            {
            	            SHIFT_RIGHT432=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_shiftExpression11142); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_RIGHT432_tree = 
            	            (CommonTree)adaptor.create(SHIFT_RIGHT432)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT432_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // Java.g:1259:17: SHIFT_LEFT ^
            	            {
            	            SHIFT_LEFT433=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_shiftExpression11161); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_LEFT433_tree = 
            	            (CommonTree)adaptor.create(SHIFT_LEFT433)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT433_tree, root_0);
            	            }

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression11190);
            	    additiveExpression434=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression434.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 114, shiftExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "shiftExpression"


    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "additiveExpression"
    // Java.g:1265:1: additiveExpression : multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);

        int additiveExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token PLUS436=null;
        Token MINUS437=null;
        JavaParser.multiplicativeExpression_return multiplicativeExpression435 =null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression438 =null;


        CommonTree PLUS436_tree=null;
        CommonTree MINUS437_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

            // Java.g:1266:5: ( multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* )
            // Java.g:1266:9: multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11220);
            multiplicativeExpression435=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression435.getTree());

            // Java.g:1267:9: ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==MINUS||LA126_0==PLUS) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // Java.g:1267:13: ( PLUS ^| MINUS ^) multiplicativeExpression
            	    {
            	    // Java.g:1267:13: ( PLUS ^| MINUS ^)
            	    int alt125=2;
            	    int LA125_0 = input.LA(1);

            	    if ( (LA125_0==PLUS) ) {
            	        alt125=1;
            	    }
            	    else if ( (LA125_0==MINUS) ) {
            	        alt125=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 125, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt125) {
            	        case 1 :
            	            // Java.g:1267:17: PLUS ^
            	            {
            	            PLUS436=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression11238); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS436_tree = 
            	            (CommonTree)adaptor.create(PLUS436)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS436_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // Java.g:1268:17: MINUS ^
            	            {
            	            MINUS437=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression11257); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS437_tree = 
            	            (CommonTree)adaptor.create(MINUS437)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS437_tree, root_0);
            	            }

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11286);
            	    multiplicativeExpression438=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression438.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 115, additiveExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "additiveExpression"


    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multiplicativeExpression"
    // Java.g:1274:1: multiplicativeExpression : unaryExpressionAll ( ( STAR ^| DIV ^| MOD ^) unaryExpressionAll )* ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        int multiplicativeExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token STAR440=null;
        Token DIV441=null;
        Token MOD442=null;
        JavaParser.unaryExpressionAll_return unaryExpressionAll439 =null;

        JavaParser.unaryExpressionAll_return unaryExpressionAll443 =null;


        CommonTree STAR440_tree=null;
        CommonTree DIV441_tree=null;
        CommonTree MOD442_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

            // Java.g:1275:5: ( unaryExpressionAll ( ( STAR ^| DIV ^| MOD ^) unaryExpressionAll )* )
            // Java.g:1275:9: unaryExpressionAll ( ( STAR ^| DIV ^| MOD ^) unaryExpressionAll )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_unaryExpressionAll_in_multiplicativeExpression11316);
            unaryExpressionAll439=unaryExpressionAll();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionAll439.getTree());

            // Java.g:1276:9: ( ( STAR ^| DIV ^| MOD ^) unaryExpressionAll )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==DIV||LA128_0==MOD||LA128_0==STAR) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // Java.g:1276:13: ( STAR ^| DIV ^| MOD ^) unaryExpressionAll
            	    {
            	    // Java.g:1276:13: ( STAR ^| DIV ^| MOD ^)
            	    int alt127=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt127=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt127=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt127=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 127, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt127) {
            	        case 1 :
            	            // Java.g:1276:17: STAR ^
            	            {
            	            STAR440=(Token)match(input,STAR,FOLLOW_STAR_in_multiplicativeExpression11335); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR440_tree = 
            	            (CommonTree)adaptor.create(STAR440)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR440_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // Java.g:1277:17: DIV ^
            	            {
            	            DIV441=(Token)match(input,DIV,FOLLOW_DIV_in_multiplicativeExpression11354); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV441_tree = 
            	            (CommonTree)adaptor.create(DIV441)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV441_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // Java.g:1278:17: MOD ^
            	            {
            	            MOD442=(Token)match(input,MOD,FOLLOW_MOD_in_multiplicativeExpression11373); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD442_tree = 
            	            (CommonTree)adaptor.create(MOD442)
            	            ;
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD442_tree, root_0);
            	            }

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_unaryExpressionAll_in_multiplicativeExpression11402);
            	    unaryExpressionAll443=unaryExpressionAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionAll443.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 116, multiplicativeExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"


    public static class unaryExpressionAll_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unaryExpressionAll"
    // Java.g:1284:1: unaryExpressionAll : ( PLUS unaryExpressionAll -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpressionAll ) | MINUS unaryExpressionAll -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpressionAll ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionRest );
    public final JavaParser.unaryExpressionAll_return unaryExpressionAll() throws RecognitionException {
        JavaParser.unaryExpressionAll_return retval = new JavaParser.unaryExpressionAll_return();
        retval.start = input.LT(1);

        int unaryExpressionAll_StartIndex = input.index();

        CommonTree root_0 = null;

        Token PLUS444=null;
        Token MINUS446=null;
        Token INC448=null;
        Token DEC450=null;
        JavaParser.unaryExpressionAll_return unaryExpressionAll445 =null;

        JavaParser.unaryExpressionAll_return unaryExpressionAll447 =null;

        JavaParser.postfixedExpression_return postfixedExpression449 =null;

        JavaParser.postfixedExpression_return postfixedExpression451 =null;

        JavaParser.unaryExpressionRest_return unaryExpressionRest452 =null;


        CommonTree PLUS444_tree=null;
        CommonTree MINUS446_tree=null;
        CommonTree INC448_tree=null;
        CommonTree DEC450_tree=null;
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
        RewriteRuleSubtreeStream stream_unaryExpressionAll=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionAll");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

            // Java.g:1285:5: ( PLUS unaryExpressionAll -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpressionAll ) | MINUS unaryExpressionAll -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpressionAll ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionRest )
            int alt129=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt129=1;
                }
                break;
            case MINUS:
                {
                alt129=2;
                }
                break;
            case INC:
                {
                alt129=3;
                }
                break;
            case DEC:
                {
                alt129=4;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case DECIMAL_LITERAL:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case FLOATING_POINT_LITERAL:
            case HEX_LITERAL:
            case IDENT:
            case INT:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LONG:
            case LPAREN:
            case NEW:
            case NOT:
            case NULL:
            case OCTAL_LITERAL:
            case SHORT:
            case STRING_LITERAL:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
                {
                alt129=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;

            }

            switch (alt129) {
                case 1 :
                    // Java.g:1285:9: PLUS unaryExpressionAll
                    {
                    PLUS444=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpressionAll11436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS444);


                    pushFollow(FOLLOW_unaryExpressionAll_in_unaryExpressionAll11438);
                    unaryExpressionAll445=unaryExpressionAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionAll.add(unaryExpressionAll445.getTree());

                    // AST REWRITE
                    // elements: unaryExpressionAll
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1285:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpressionAll )
                    {
                        // Java.g:1285:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpressionAll )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(UNARY_PLUS, PLUS444, "UNARY_PLUS")
                        , root_1);

                        adaptor.addChild(root_1, stream_unaryExpressionAll.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1286:9: MINUS unaryExpressionAll
                    {
                    MINUS446=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpressionAll11462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS446);


                    pushFollow(FOLLOW_unaryExpressionAll_in_unaryExpressionAll11464);
                    unaryExpressionAll447=unaryExpressionAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionAll.add(unaryExpressionAll447.getTree());

                    // AST REWRITE
                    // elements: unaryExpressionAll
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1286:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpressionAll )
                    {
                        // Java.g:1286:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpressionAll )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(UNARY_MINUS, MINUS446, "UNARY_MINUS")
                        , root_1);

                        adaptor.addChild(root_1, stream_unaryExpressionAll.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1287:9: INC postfixedExpression
                    {
                    INC448=(Token)match(input,INC,FOLLOW_INC_in_unaryExpressionAll11487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC448);


                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpressionAll11489);
                    postfixedExpression449=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression449.getTree());

                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1287:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                    {
                        // Java.g:1287:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(PRE_INC, INC448, "PRE_INC")
                        , root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // Java.g:1288:9: DEC postfixedExpression
                    {
                    DEC450=(Token)match(input,DEC,FOLLOW_DEC_in_unaryExpressionAll11513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC450);


                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpressionAll11515);
                    postfixedExpression451=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression451.getTree());

                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1288:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                    {
                        // Java.g:1288:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(PRE_DEC, DEC450, "PRE_DEC")
                        , root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // Java.g:1289:9: unaryExpressionRest
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_unaryExpressionRest_in_unaryExpressionAll11539);
                    unaryExpressionRest452=unaryExpressionRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionRest452.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 117, unaryExpressionAll_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unaryExpressionAll"


    public static class unaryExpressionRest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unaryExpressionRest"
    // Java.g:1292:1: unaryExpressionRest : ( NOT unaryExpressionAll -> ^( NOT unaryExpressionAll ) | LOGICAL_NOT unaryExpressionAll -> ^( LOGICAL_NOT unaryExpressionAll ) | LPAREN simpleType RPAREN unaryExpressionAll -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] simpleType unaryExpressionAll ) | LPAREN objectType RPAREN unaryExpressionRest -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] objectType unaryExpressionRest ) | postfixedExpression );
    public final JavaParser.unaryExpressionRest_return unaryExpressionRest() throws RecognitionException {
        JavaParser.unaryExpressionRest_return retval = new JavaParser.unaryExpressionRest_return();
        retval.start = input.LT(1);

        int unaryExpressionRest_StartIndex = input.index();

        CommonTree root_0 = null;

        Token NOT453=null;
        Token LOGICAL_NOT455=null;
        Token LPAREN457=null;
        Token RPAREN459=null;
        Token LPAREN461=null;
        Token RPAREN463=null;
        JavaParser.unaryExpressionAll_return unaryExpressionAll454 =null;

        JavaParser.unaryExpressionAll_return unaryExpressionAll456 =null;

        JavaParser.simpleType_return simpleType458 =null;

        JavaParser.unaryExpressionAll_return unaryExpressionAll460 =null;

        JavaParser.objectType_return objectType462 =null;

        JavaParser.unaryExpressionRest_return unaryExpressionRest464 =null;

        JavaParser.postfixedExpression_return postfixedExpression465 =null;


        CommonTree NOT453_tree=null;
        CommonTree LOGICAL_NOT455_tree=null;
        CommonTree LPAREN457_tree=null;
        CommonTree RPAREN459_tree=null;
        CommonTree LPAREN461_tree=null;
        CommonTree RPAREN463_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LOGICAL_NOT=new RewriteRuleTokenStream(adaptor,"token LOGICAL_NOT");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_simpleType=new RewriteRuleSubtreeStream(adaptor,"rule simpleType");
        RewriteRuleSubtreeStream stream_unaryExpressionRest=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionRest");
        RewriteRuleSubtreeStream stream_objectType=new RewriteRuleSubtreeStream(adaptor,"rule objectType");
        RewriteRuleSubtreeStream stream_unaryExpressionAll=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionAll");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

            // Java.g:1293:5: ( NOT unaryExpressionAll -> ^( NOT unaryExpressionAll ) | LOGICAL_NOT unaryExpressionAll -> ^( LOGICAL_NOT unaryExpressionAll ) | LPAREN simpleType RPAREN unaryExpressionAll -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] simpleType unaryExpressionAll ) | LPAREN objectType RPAREN unaryExpressionRest -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] objectType unaryExpressionRest ) | postfixedExpression )
            int alt130=5;
            switch ( input.LA(1) ) {
            case NOT:
                {
                alt130=1;
                }
                break;
            case LOGICAL_NOT:
                {
                alt130=2;
                }
                break;
            case LPAREN:
                {
                int LA130_3 = input.LA(2);

                if ( (synpred193_Java()) ) {
                    alt130=3;
                }
                else if ( (synpred194_Java()) ) {
                    alt130=4;
                }
                else if ( (true) ) {
                    alt130=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 3, input);

                    throw nvae;

                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CHARACTER_LITERAL:
            case DECIMAL_LITERAL:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case FLOATING_POINT_LITERAL:
            case HEX_LITERAL:
            case IDENT:
            case INT:
            case LESS_THAN:
            case LONG:
            case NEW:
            case NULL:
            case OCTAL_LITERAL:
            case SHORT:
            case STRING_LITERAL:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
                {
                alt130=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }

            switch (alt130) {
                case 1 :
                    // Java.g:1293:9: NOT unaryExpressionAll
                    {
                    NOT453=(Token)match(input,NOT,FOLLOW_NOT_in_unaryExpressionRest11558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOT.add(NOT453);


                    pushFollow(FOLLOW_unaryExpressionAll_in_unaryExpressionRest11560);
                    unaryExpressionAll454=unaryExpressionAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionAll.add(unaryExpressionAll454.getTree());

                    // AST REWRITE
                    // elements: unaryExpressionAll, NOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1293:57: -> ^( NOT unaryExpressionAll )
                    {
                        // Java.g:1293:61: ^( NOT unaryExpressionAll )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_NOT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_unaryExpressionAll.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1294:9: LOGICAL_NOT unaryExpressionAll
                    {
                    LOGICAL_NOT455=(Token)match(input,LOGICAL_NOT,FOLLOW_LOGICAL_NOT_in_unaryExpressionRest11604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOGICAL_NOT.add(LOGICAL_NOT455);


                    pushFollow(FOLLOW_unaryExpressionAll_in_unaryExpressionRest11606);
                    unaryExpressionAll456=unaryExpressionAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionAll.add(unaryExpressionAll456.getTree());

                    // AST REWRITE
                    // elements: LOGICAL_NOT, unaryExpressionAll
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1294:57: -> ^( LOGICAL_NOT unaryExpressionAll )
                    {
                        // Java.g:1294:61: ^( LOGICAL_NOT unaryExpressionAll )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_LOGICAL_NOT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_unaryExpressionAll.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1295:9: LPAREN simpleType RPAREN unaryExpressionAll
                    {
                    LPAREN457=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpressionRest11642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN457);


                    pushFollow(FOLLOW_simpleType_in_unaryExpressionRest11644);
                    simpleType458=simpleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_simpleType.add(simpleType458.getTree());

                    RPAREN459=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpressionRest11646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN459);


                    pushFollow(FOLLOW_unaryExpressionAll_in_unaryExpressionRest11648);
                    unaryExpressionAll460=unaryExpressionAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionAll.add(unaryExpressionAll460.getTree());

                    // AST REWRITE
                    // elements: simpleType, unaryExpressionAll
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1295:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] simpleType unaryExpressionAll )
                    {
                        // Java.g:1295:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] simpleType unaryExpressionAll )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(CAST_EXPR, LPAREN457, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_simpleType.nextTree());

                        adaptor.addChild(root_1, stream_unaryExpressionAll.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // Java.g:1296:9: LPAREN objectType RPAREN unaryExpressionRest
                    {
                    LPAREN461=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpressionRest11674); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN461);


                    pushFollow(FOLLOW_objectType_in_unaryExpressionRest11676);
                    objectType462=objectType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectType.add(objectType462.getTree());

                    RPAREN463=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpressionRest11678); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN463);


                    pushFollow(FOLLOW_unaryExpressionRest_in_unaryExpressionRest11680);
                    unaryExpressionRest464=unaryExpressionRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionRest.add(unaryExpressionRest464.getTree());

                    // AST REWRITE
                    // elements: objectType, unaryExpressionRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1296:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] objectType unaryExpressionRest )
                    {
                        // Java.g:1296:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] objectType unaryExpressionRest )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(CAST_EXPR, LPAREN461, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_objectType.nextTree());

                        adaptor.addChild(root_1, stream_unaryExpressionRest.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // Java.g:1297:9: postfixedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpressionRest11705);
                    postfixedExpression465=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixedExpression465.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 118, unaryExpressionRest_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unaryExpressionRest"


    public static class postfixedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "postfixedExpression"
    // Java.g:1300:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
    public final JavaParser.postfixedExpression_return postfixedExpression() throws RecognitionException {
        JavaParser.postfixedExpression_return retval = new JavaParser.postfixedExpression_return();
        retval.start = input.LT(1);

        int postfixedExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token IDENT468=null;
        Token THIS470=null;
        Token SUPER473=null;
        Token IDENT474=null;
        Token LBRACK477=null;
        Token RBRACK479=null;
        Token INC480=null;
        Token DEC481=null;
        JavaParser.primaryExpression_return primaryExpression466 =null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified467 =null;

        JavaParser.arguments_return arguments469 =null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified471 =null;

        JavaParser.arguments_return arguments472 =null;

        JavaParser.arguments_return arguments475 =null;

        JavaParser.innerNewExpression_return innerNewExpression476 =null;

        JavaParser.expression_return expression478 =null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree IDENT468_tree=null;
        CommonTree THIS470_tree=null;
        CommonTree SUPER473_tree=null;
        CommonTree IDENT474_tree=null;
        CommonTree LBRACK477_tree=null;
        CommonTree RBRACK479_tree=null;
        CommonTree INC480_tree=null;
        CommonTree DEC481_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

            // Java.g:1302:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
            // Java.g:1302:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            {
            // Java.g:1302:9: ( primaryExpression -> primaryExpression )
            // Java.g:1302:13: primaryExpression
            {
            pushFollow(FOLLOW_primaryExpression_in_postfixedExpression11741);
            primaryExpression466=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpression.add(primaryExpression466.getTree());

            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1302:53: -> primaryExpression
            {
                adaptor.addChild(root_0, stream_primaryExpression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // Java.g:1305:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
            loop136:
            do {
                int alt136=3;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==DOT) ) {
                    alt136=1;
                }
                else if ( (LA136_0==LBRACK) ) {
                    alt136=2;
                }


                switch (alt136) {
            	case 1 :
            	    // Java.g:1305:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    {
            	    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression11803); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(outerDot);


            	    // Java.g:1308:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | ( genericTypeArgumentListSimplified )? Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    int alt135=5;
            	    switch ( input.LA(1) ) {
            	    case LESS_THAN:
            	        {
            	        int LA135_1 = input.LA(2);

            	        if ( (synpred197_Java()) ) {
            	            alt135=1;
            	        }
            	        else if ( (synpred200_Java()) ) {
            	            alt135=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 135, 1, input);

            	            throw nvae;

            	        }
            	        }
            	        break;
            	    case IDENT:
            	        {
            	        alt135=1;
            	        }
            	        break;
            	    case THIS:
            	        {
            	        alt135=2;
            	        }
            	        break;
            	    case SUPER:
            	        {
            	        int LA135_4 = input.LA(2);

            	        if ( (synpred200_Java()) ) {
            	            alt135=3;
            	        }
            	        else if ( (synpred202_Java()) ) {
            	            alt135=4;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 135, 4, input);

            	            throw nvae;

            	        }
            	        }
            	        break;
            	    case NEW:
            	        {
            	        alt135=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 135, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt135) {
            	        case 1 :
            	            // Java.g:1308:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            {
            	            // Java.g:1308:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
            	            // Java.g:1308:21: ( genericTypeArgumentListSimplified )? IDENT
            	            {
            	            // Java.g:1308:21: ( genericTypeArgumentListSimplified )?
            	            int alt131=2;
            	            int LA131_0 = input.LA(1);

            	            if ( (LA131_0==LESS_THAN) ) {
            	                alt131=1;
            	            }
            	            switch (alt131) {
            	                case 1 :
            	                    // Java.g:1308:21: genericTypeArgumentListSimplified
            	                    {
            	                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression11861);
            	                    genericTypeArgumentListSimplified467=genericTypeArgumentListSimplified();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified467.getTree());

            	                    }
            	                    break;

            	            }


            	            IDENT468=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression11886); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT468);


            	            // AST REWRITE
            	            // elements: DOT, IDENT, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1309:53: -> ^( DOT $postfixedExpression IDENT )
            	            {
            	                // Java.g:1309:57: ^( DOT $postfixedExpression IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(
            	                stream_DOT.nextNode()
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_1, 
            	                stream_IDENT.nextNode()
            	                );

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }


            	            // Java.g:1311:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            int alt132=2;
            	            int LA132_0 = input.LA(1);

            	            if ( (LA132_0==LPAREN) ) {
            	                alt132=1;
            	            }
            	            switch (alt132) {
            	                case 1 :
            	                    // Java.g:1311:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression11965);
            	                    arguments469=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments469.getTree());

            	                    // AST REWRITE
            	                    // elements: postfixedExpression, arguments, genericTypeArgumentListSimplified
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {

            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 1311:53: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                    {
            	                        // Java.g:1311:57: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot(
            	                        (CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL")
            	                        , root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());

            	                        // Java.g:1311:92: ( genericTypeArgumentListSimplified )?
            	                        if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
            	                            adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

            	                        }
            	                        stream_genericTypeArgumentListSimplified.reset();

            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }


            	                    retval.tree = root_0;
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // Java.g:1313:17: THIS
            	            {
            	            THIS470=(Token)match(input,THIS,FOLLOW_THIS_in_postfixedExpression12039); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_THIS.add(THIS470);


            	            // AST REWRITE
            	            // elements: THIS, postfixedExpression, DOT
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1313:53: -> ^( DOT $postfixedExpression THIS )
            	            {
            	                // Java.g:1313:57: ^( DOT $postfixedExpression THIS )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(
            	                stream_DOT.nextNode()
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_1, 
            	                stream_THIS.nextNode()
            	                );

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // Java.g:1314:17: ( genericTypeArgumentListSimplified )? Super= SUPER arguments
            	            {
            	            // Java.g:1314:17: ( genericTypeArgumentListSimplified )?
            	            int alt133=2;
            	            int LA133_0 = input.LA(1);

            	            if ( (LA133_0==LESS_THAN) ) {
            	                alt133=1;
            	            }
            	            switch (alt133) {
            	                case 1 :
            	                    // Java.g:1314:17: genericTypeArgumentListSimplified
            	                    {
            	                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression12100);
            	                    genericTypeArgumentListSimplified471=genericTypeArgumentListSimplified();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified471.getTree());

            	                    }
            	                    break;

            	            }


            	            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12118); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(Super);


            	            pushFollow(FOLLOW_arguments_in_postfixedExpression12120);
            	            arguments472=arguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_arguments.add(arguments472.getTree());

            	            // AST REWRITE
            	            // elements: genericTypeArgumentListSimplified, postfixedExpression, arguments
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1315:50: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	            {
            	                // Java.g:1315:54: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(
            	                (CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                // Java.g:1315:134: ( genericTypeArgumentListSimplified )?
            	                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
            	                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

            	                }
            	                stream_genericTypeArgumentListSimplified.reset();

            	                adaptor.addChild(root_1, stream_arguments.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // Java.g:1316:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            {
            	            // Java.g:1316:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
            	            // Java.g:1316:21: SUPER innerDot= DOT IDENT
            	            {
            	            SUPER473=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12172); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(SUPER473);


            	            innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression12176); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOT.add(innerDot);


            	            IDENT474=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12178); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT474);


            	            // AST REWRITE
            	            // elements: IDENT, outerDot, SUPER, postfixedExpression, innerDot
            	            // token labels: outerDot, innerDot
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
            	            RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1316:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	            {
            	                // Java.g:1316:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_1);

            	                // Java.g:1316:69: ^( $outerDot $postfixedExpression SUPER )
            	                {
            	                CommonTree root_2 = (CommonTree)adaptor.nil();
            	                root_2 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_retval.nextTree());

            	                adaptor.addChild(root_2, 
            	                stream_SUPER.nextNode()
            	                );

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_1, 
            	                stream_IDENT.nextNode()
            	                );

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }


            	            // Java.g:1318:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            int alt134=2;
            	            int LA134_0 = input.LA(1);

            	            if ( (LA134_0==LPAREN) ) {
            	                alt134=1;
            	            }
            	            switch (alt134) {
            	                case 1 :
            	                    // Java.g:1318:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12245);
            	                    arguments475=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments475.getTree());

            	                    // AST REWRITE
            	                    // elements: postfixedExpression, arguments
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {

            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 1318:53: -> ^( METHOD_CALL $postfixedExpression arguments )
            	                    {
            	                        // Java.g:1318:57: ^( METHOD_CALL $postfixedExpression arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot(
            	                        (CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL")
            	                        , root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());

            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }


            	                    retval.tree = root_0;
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // Java.g:1320:17: innerNewExpression
            	            {
            	            pushFollow(FOLLOW_innerNewExpression_in_postfixedExpression12316);
            	            innerNewExpression476=innerNewExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression476.getTree());

            	            // AST REWRITE
            	            // elements: innerNewExpression, postfixedExpression, DOT
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1320:53: -> ^( DOT $postfixedExpression innerNewExpression )
            	            {
            	                // Java.g:1320:57: ^( DOT $postfixedExpression innerNewExpression )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(
            	                stream_DOT.nextNode()
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // Java.g:1322:13: LBRACK expression RBRACK
            	    {
            	    LBRACK477=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_postfixedExpression12373); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK477);


            	    pushFollow(FOLLOW_expression_in_postfixedExpression12375);
            	    expression478=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression478.getTree());

            	    RBRACK479=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_postfixedExpression12377); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK479);


            	    // AST REWRITE
            	    // elements: expression, postfixedExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 1322:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	    {
            	        // Java.g:1322:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_expression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            // Java.g:1325:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            int alt137=3;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==INC) ) {
                alt137=1;
            }
            else if ( (LA137_0==DEC) ) {
                alt137=2;
            }
            switch (alt137) {
                case 1 :
                    // Java.g:1325:13: INC
                    {
                    INC480=(Token)match(input,INC,FOLLOW_INC_in_postfixedExpression12438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC480);


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1325:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                    {
                        // Java.g:1325:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(POST_INC, INC480, "POST_INC")
                        , root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1326:13: DEC
                    {
                    DEC481=(Token)match(input,DEC,FOLLOW_DEC_in_postfixedExpression12462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC481);


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1326:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                    {
                        // Java.g:1326:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(POST_DEC, DEC481, "POST_DEC")
                        , root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 119, postfixedExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "postfixedExpression"


    public static class primaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primaryExpression"
    // Java.g:1330:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
    public final JavaParser.primaryExpression_return primaryExpression() throws RecognitionException {
        JavaParser.primaryExpression_return retval = new JavaParser.primaryExpression_return();
        retval.start = input.LT(1);

        int primaryExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token SUPER487=null;
        Token DOT489=null;
        Token IDENT490=null;
        Token IDENT492=null;
        Token THIS494=null;
        Token THIS496=null;
        Token SUPER498=null;
        Token SUPER500=null;
        Token DOT501=null;
        Token IDENT502=null;
        Token DOT506=null;
        Token CLASS507=null;
        Token VOID508=null;
        Token DOT509=null;
        Token CLASS510=null;
        JavaParser.parenthesizedExpression_return parenthesizedExpression482 =null;

        JavaParser.literal_return literal483 =null;

        JavaParser.newExpression_return newExpression484 =null;

        JavaParser.qualifiedIdentExpression_return qualifiedIdentExpression485 =null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified486 =null;

        JavaParser.arguments_return arguments488 =null;

        JavaParser.arguments_return arguments491 =null;

        JavaParser.arguments_return arguments493 =null;

        JavaParser.arguments_return arguments495 =null;

        JavaParser.arguments_return arguments497 =null;

        JavaParser.arguments_return arguments499 =null;

        JavaParser.arguments_return arguments503 =null;

        JavaParser.primitiveType_return primitiveType504 =null;

        JavaParser.arrayDeclarator_return arrayDeclarator505 =null;


        CommonTree SUPER487_tree=null;
        CommonTree DOT489_tree=null;
        CommonTree IDENT490_tree=null;
        CommonTree IDENT492_tree=null;
        CommonTree THIS494_tree=null;
        CommonTree THIS496_tree=null;
        CommonTree SUPER498_tree=null;
        CommonTree SUPER500_tree=null;
        CommonTree DOT501_tree=null;
        CommonTree IDENT502_tree=null;
        CommonTree DOT506_tree=null;
        CommonTree CLASS507_tree=null;
        CommonTree VOID508_tree=null;
        CommonTree DOT509_tree=null;
        CommonTree CLASS510_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

            // Java.g:1331:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
            int alt143=10;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt143=1;
                }
                break;
            case CHARACTER_LITERAL:
            case DECIMAL_LITERAL:
            case FALSE:
            case FLOATING_POINT_LITERAL:
            case HEX_LITERAL:
            case NULL:
            case OCTAL_LITERAL:
            case STRING_LITERAL:
            case TRUE:
                {
                alt143=2;
                }
                break;
            case NEW:
                {
                alt143=3;
                }
                break;
            case IDENT:
                {
                alt143=4;
                }
                break;
            case LESS_THAN:
                {
                alt143=5;
                }
                break;
            case THIS:
                {
                alt143=6;
                }
                break;
            case SUPER:
                {
                int LA143_7 = input.LA(2);

                if ( (LA143_7==DOT) ) {
                    alt143=8;
                }
                else if ( (LA143_7==LPAREN) ) {
                    alt143=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 143, 7, input);

                    throw nvae;

                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                alt143=9;
                }
                break;
            case VOID:
                {
                alt143=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }

            switch (alt143) {
                case 1 :
                    // Java.g:1331:9: parenthesizedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_parenthesizedExpression_in_primaryExpression12510);
                    parenthesizedExpression482=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpression482.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1332:9: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_literal_in_primaryExpression12520);
                    literal483=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal483.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:1333:9: newExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_newExpression_in_primaryExpression12530);
                    newExpression484=newExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, newExpression484.getTree());

                    }
                    break;
                case 4 :
                    // Java.g:1334:9: qualifiedIdentExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_qualifiedIdentExpression_in_primaryExpression12540);
                    qualifiedIdentExpression485=qualifiedIdentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentExpression485.getTree());

                    }
                    break;
                case 5 :
                    // Java.g:1335:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12550);
                    genericTypeArgumentListSimplified486=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified486.getTree());

                    // Java.g:1336:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    int alt139=3;
                    switch ( input.LA(1) ) {
                    case SUPER:
                        {
                        alt139=1;
                        }
                        break;
                    case IDENT:
                        {
                        alt139=2;
                        }
                        break;
                    case THIS:
                        {
                        alt139=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 139, 0, input);

                        throw nvae;

                    }

                    switch (alt139) {
                        case 1 :
                            // Java.g:1336:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            SUPER487=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression12565); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(SUPER487);


                            // Java.g:1337:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt138=2;
                            int LA138_0 = input.LA(1);

                            if ( (LA138_0==LPAREN) ) {
                                alt138=1;
                            }
                            else if ( (LA138_0==DOT) ) {
                                alt138=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 138, 0, input);

                                throw nvae;

                            }
                            switch (alt138) {
                                case 1 :
                                    // Java.g:1337:17: arguments
                                    {
                                    pushFollow(FOLLOW_arguments_in_primaryExpression12583);
                                    arguments488=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments488.getTree());

                                    // AST REWRITE
                                    // elements: arguments, genericTypeArgumentListSimplified
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1337:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                    {
                                        // Java.g:1337:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER487, "SUPER_CONSTRUCTOR_CALL")
                                        , root_1);

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;
                                case 2 :
                                    // Java.g:1338:17: DOT IDENT arguments
                                    {
                                    DOT489=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression12643); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(DOT489);


                                    IDENT490=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression12645); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT490);


                                    pushFollow(FOLLOW_arguments_in_primaryExpression12647);
                                    arguments491=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments491.getTree());

                                    // AST REWRITE
                                    // elements: IDENT, SUPER, arguments, DOT, genericTypeArgumentListSimplified
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1338:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // Java.g:1338:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL")
                                        , root_1);

                                        // Java.g:1338:75: ^( DOT SUPER IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(
                                        stream_DOT.nextNode()
                                        , root_2);

                                        adaptor.addChild(root_2, 
                                        stream_SUPER.nextNode()
                                        );

                                        adaptor.addChild(root_2, 
                                        stream_IDENT.nextNode()
                                        );

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // Java.g:1340:13: IDENT arguments
                            {
                            IDENT492=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression12714); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT492);


                            pushFollow(FOLLOW_arguments_in_primaryExpression12716);
                            arguments493=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments493.getTree());

                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, arguments, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1340:57: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                            {
                                // Java.g:1340:61: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL")
                                , root_1);

                                adaptor.addChild(root_1, 
                                stream_IDENT.nextNode()
                                );

                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 3 :
                            // Java.g:1341:13: THIS arguments
                            {
                            THIS494=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression12771); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS494);


                            pushFollow(FOLLOW_arguments_in_primaryExpression12773);
                            arguments495=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments495.getTree());

                            // AST REWRITE
                            // elements: arguments, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1341:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                            {
                                // Java.g:1341:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS494, "THIS_CONSTRUCTOR_CALL")
                                , root_1);

                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // Java.g:1343:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    {
                    // Java.g:1343:9: ( THIS -> THIS )
                    // Java.g:1343:13: THIS
                    {
                    THIS496=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression12838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THIS.add(THIS496);


                    // AST REWRITE
                    // elements: THIS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1343:57: -> THIS
                    {
                        adaptor.addChild(root_0, 
                        stream_THIS.nextNode()
                        );

                    }


                    retval.tree = root_0;
                    }

                    }


                    // Java.g:1345:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==LPAREN) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // Java.g:1345:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression12906);
                            arguments497=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments497.getTree());

                            // AST REWRITE
                            // elements: arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1345:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                            {
                                // Java.g:1345:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS496, "THIS_CONSTRUCTOR_CALL")
                                , root_1);

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // Java.g:1347:9: SUPER arguments
                    {
                    SUPER498=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression12971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER498);


                    pushFollow(FOLLOW_arguments_in_primaryExpression12973);
                    arguments499=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments499.getTree());

                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1347:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                    {
                        // Java.g:1347:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER498, "SUPER_CONSTRUCTOR_CALL")
                        , root_1);

                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // Java.g:1348:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    {
                    // Java.g:1348:9: ( SUPER DOT IDENT )
                    // Java.g:1348:13: SUPER DOT IDENT
                    {
                    SUPER500=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER500);


                    DOT501=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT501);


                    IDENT502=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT502);


                    }


                    // Java.g:1350:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==LPAREN) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==EOF||(LA141_0 >= AND && LA141_0 <= AND_ASSIGN)||LA141_0==ASSIGN||(LA141_0 >= BIT_SHIFT_RIGHT && LA141_0 <= BIT_SHIFT_RIGHT_ASSIGN)||(LA141_0 >= COLON && LA141_0 <= COMMA)||LA141_0==DEC||(LA141_0 >= DIV && LA141_0 <= DIV_ASSIGN)||LA141_0==DOT||LA141_0==EQUAL||(LA141_0 >= GREATER_OR_EQUAL && LA141_0 <= GREATER_THAN)||(LA141_0 >= INC && LA141_0 <= INSTANCEOF)||LA141_0==LBRACK||(LA141_0 >= LESS_OR_EQUAL && LA141_0 <= LESS_THAN)||LA141_0==LOGICAL_AND||LA141_0==LOGICAL_OR||(LA141_0 >= MINUS && LA141_0 <= MOD)||LA141_0==MOD_ASSIGN||LA141_0==NOT_EQUAL||(LA141_0 >= OR && LA141_0 <= OR_ASSIGN)||(LA141_0 >= PLUS && LA141_0 <= PLUS_ASSIGN)||(LA141_0 >= QUESTION && LA141_0 <= RCURLY)||(LA141_0 >= RPAREN && LA141_0 <= SHIFT_RIGHT_ASSIGN)||(LA141_0 >= STAR && LA141_0 <= STAR_ASSIGN)||(LA141_0 >= XOR && LA141_0 <= XOR_ASSIGN)) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;

                    }
                    switch (alt141) {
                        case 1 :
                            // Java.g:1350:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13057);
                            arguments503=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments503.getTree());

                            // AST REWRITE
                            // elements: IDENT, arguments, DOT, SUPER
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1350:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                            {
                                // Java.g:1350:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL")
                                , root_1);

                                // Java.g:1350:75: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot(
                                stream_DOT.nextNode()
                                , root_2);

                                adaptor.addChild(root_2, 
                                stream_SUPER.nextNode()
                                );

                                adaptor.addChild(root_2, 
                                stream_IDENT.nextNode()
                                );

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // Java.g:1351:57: 
                            {
                            // AST REWRITE
                            // elements: DOT, IDENT, SUPER
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1351:57: -> ^( DOT SUPER IDENT )
                            {
                                // Java.g:1351:61: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                stream_DOT.nextNode()
                                , root_1);

                                adaptor.addChild(root_1, 
                                stream_SUPER.nextNode()
                                );

                                adaptor.addChild(root_1, 
                                stream_IDENT.nextNode()
                                );

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // Java.g:1353:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
                    {
                    // Java.g:1353:9: ( primitiveType -> primitiveType )
                    // Java.g:1353:13: primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_primaryExpression13199);
                    primitiveType504=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType504.getTree());

                    // AST REWRITE
                    // elements: primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1353:57: -> primitiveType
                    {
                        adaptor.addChild(root_0, stream_primitiveType.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }


                    // Java.g:1355:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==LBRACK) ) {
                            alt142=1;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // Java.g:1355:13: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_primaryExpression13258);
                    	    arrayDeclarator505=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator505.getTree());

                    	    // AST REWRITE
                    	    // elements: primaryExpression, arrayDeclarator
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {

                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 1355:57: -> ^( arrayDeclarator $primaryExpression)
                    	    {
                    	        // Java.g:1355:61: ^( arrayDeclarator $primaryExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }


                    	    retval.tree = root_0;
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);


                    DOT506=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13321); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT506);


                    CLASS507=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS507);


                    // AST REWRITE
                    // elements: primaryExpression, DOT, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1357:57: -> ^( DOT $primaryExpression CLASS )
                    {
                        // Java.g:1357:61: ^( DOT $primaryExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_DOT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_1, 
                        stream_CLASS.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 10 :
                    // Java.g:1358:9: VOID DOT CLASS
                    {
                    VOID508=(Token)match(input,VOID,FOLLOW_VOID_in_primaryExpression13383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID508);


                    DOT509=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13385); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT509);


                    CLASS510=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS510);


                    // AST REWRITE
                    // elements: VOID, DOT, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1358:57: -> ^( DOT VOID CLASS )
                    {
                        // Java.g:1358:61: ^( DOT VOID CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_DOT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_VOID.nextNode()
                        );

                        adaptor.addChild(root_1, 
                        stream_CLASS.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 120, primaryExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primaryExpression"


    public static class qualifiedIdentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualifiedIdentExpression"
    // Java.g:1361:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
    public final JavaParser.qualifiedIdentExpression_return qualifiedIdentExpression() throws RecognitionException {
        JavaParser.qualifiedIdentExpression_return retval = new JavaParser.qualifiedIdentExpression_return();
        retval.start = input.LT(1);

        int qualifiedIdentExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token DOT513=null;
        Token CLASS514=null;
        Token CLASS516=null;
        Token SUPER519=null;
        Token IDENT520=null;
        Token IDENT522=null;
        Token THIS524=null;
        JavaParser.qualifiedIdentifier_return qualifiedIdentifier511 =null;

        JavaParser.arrayDeclarator_return arrayDeclarator512 =null;

        JavaParser.arguments_return arguments515 =null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified517 =null;

        JavaParser.arguments_return arguments518 =null;

        JavaParser.arguments_return arguments521 =null;

        JavaParser.arguments_return arguments523 =null;

        JavaParser.arguments_return arguments525 =null;

        JavaParser.innerNewExpression_return innerNewExpression526 =null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree DOT513_tree=null;
        CommonTree CLASS514_tree=null;
        CommonTree CLASS516_tree=null;
        CommonTree SUPER519_tree=null;
        CommonTree IDENT520_tree=null;
        CommonTree IDENT522_tree=null;
        CommonTree THIS524_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

            // Java.g:1363:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
            // Java.g:1363:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            {
            // Java.g:1363:9: ( qualifiedIdentifier -> qualifiedIdentifier )
            // Java.g:1363:13: qualifiedIdentifier
            {
            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13467);
            qualifiedIdentifier511=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier511.getTree());

            // AST REWRITE
            // elements: qualifiedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1363:61: -> qualifiedIdentifier
            {
                adaptor.addChild(root_0, stream_qualifiedIdentifier.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // Java.g:1366:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) |outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            int alt147=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    int LA147_1 = input.LA(2);

                    if ( (synpred223_Java()) ) {
                        alt147=1;
                    }
                    }
                    break;
                case LPAREN:
                    {
                    alt147=2;
                    }
                    break;
                case DOT:
                    {
                    int LA147_3 = input.LA(2);

                    if ( (synpred231_Java()) ) {
                        alt147=3;
                    }
                    }
                    break;
            }

            switch (alt147) {
                case 1 :
                    // Java.g:1366:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    {
                    // Java.g:1366:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
                    int cnt144=0;
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( (LA144_0==LBRACK) ) {
                            alt144=1;
                        }


                        switch (alt144) {
                    	case 1 :
                    	    // Java.g:1366:17: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13537);
                    	    arrayDeclarator512=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator512.getTree());

                    	    // AST REWRITE
                    	    // elements: qualifiedIdentExpression, arrayDeclarator
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {

                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 1366:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
                    	    {
                    	        // Java.g:1366:61: ^( arrayDeclarator $qualifiedIdentExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }


                    	    retval.tree = root_0;
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt144 >= 1 ) break loop144;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(144, input);
                                throw eee;
                        }
                        cnt144++;
                    } while (true);


                    // Java.g:1368:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    // Java.g:1368:17: DOT CLASS
                    {
                    DOT513=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression13605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT513);


                    CLASS514=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression13607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS514);


                    // AST REWRITE
                    // elements: DOT, qualifiedIdentExpression, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1368:57: -> ^( DOT $qualifiedIdentExpression CLASS )
                    {
                        // Java.g:1368:61: ^( DOT $qualifiedIdentExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_DOT.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_1, 
                        stream_CLASS.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // Java.g:1370:13: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13677);
                    arguments515=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments515.getTree());

                    // AST REWRITE
                    // elements: qualifiedIdentifier, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1370:57: -> ^( METHOD_CALL qualifiedIdentifier arguments )
                    {
                        // Java.g:1370:61: ^( METHOD_CALL qualifiedIdentifier arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL")
                        , root_1);

                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1371:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    {
                    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression13738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(outerDot);


                    // Java.g:1372:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) |Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    int alt146=5;
                    switch ( input.LA(1) ) {
                    case CLASS:
                        {
                        alt146=1;
                        }
                        break;
                    case LESS_THAN:
                        {
                        alt146=2;
                        }
                        break;
                    case THIS:
                        {
                        alt146=3;
                        }
                        break;
                    case SUPER:
                        {
                        alt146=4;
                        }
                        break;
                    case NEW:
                        {
                        alt146=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 0, input);

                        throw nvae;

                    }

                    switch (alt146) {
                        case 1 :
                            // Java.g:1372:17: CLASS
                            {
                            CLASS516=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression13756); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLASS.add(CLASS516);


                            // AST REWRITE
                            // elements: CLASS, DOT, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1372:57: -> ^( DOT qualifiedIdentifier CLASS )
                            {
                                // Java.g:1372:61: ^( DOT qualifiedIdentifier CLASS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                stream_DOT.nextNode()
                                , root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

                                adaptor.addChild(root_1, 
                                stream_CLASS.nextNode()
                                );

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // Java.g:1373:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression13819);
                            genericTypeArgumentListSimplified517=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified517.getTree());

                            // Java.g:1374:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt145=3;
                            int LA145_0 = input.LA(1);

                            if ( (LA145_0==SUPER) ) {
                                int LA145_1 = input.LA(2);

                                if ( (LA145_1==DOT) ) {
                                    alt145=2;
                                }
                                else if ( (LA145_1==LPAREN) ) {
                                    alt145=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 145, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( (LA145_0==IDENT) ) {
                                alt145=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 145, 0, input);

                                throw nvae;

                            }
                            switch (alt145) {
                                case 1 :
                                    // Java.g:1374:21: Super= SUPER arguments
                                    {
                                    Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression13844); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(Super);


                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13846);
                                    arguments518=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments518.getTree());

                                    // AST REWRITE
                                    // elements: qualifiedIdentifier, arguments, genericTypeArgumentListSimplified
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1374:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                    {
                                        // Java.g:1374:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL")
                                        , root_1);

                                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;
                                case 2 :
                                    // Java.g:1375:21: SUPER innerDot= DOT IDENT arguments
                                    {
                                    SUPER519=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression13896); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER519);


                                    innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression13900); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(innerDot);


                                    IDENT520=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression13902); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT520);


                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13904);
                                    arguments521=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments521.getTree());

                                    // AST REWRITE
                                    // elements: qualifiedIdentifier, innerDot, arguments, SUPER, genericTypeArgumentListSimplified, outerDot, IDENT
                                    // token labels: outerDot, innerDot
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
                                    RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1375:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // Java.g:1375:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL")
                                        , root_1);

                                        // Java.g:1375:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_2);

                                        // Java.g:1375:87: ^( $outerDot qualifiedIdentifier SUPER )
                                        {
                                        CommonTree root_3 = (CommonTree)adaptor.nil();
                                        root_3 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_3);

                                        adaptor.addChild(root_3, stream_qualifiedIdentifier.nextTree());

                                        adaptor.addChild(root_3, 
                                        stream_SUPER.nextNode()
                                        );

                                        adaptor.addChild(root_2, root_3);
                                        }

                                        adaptor.addChild(root_2, 
                                        stream_IDENT.nextNode()
                                        );

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;
                                case 3 :
                                    // Java.g:1376:21: IDENT arguments
                                    {
                                    IDENT522=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression13954); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT522);


                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13956);
                                    arguments523=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments523.getTree());

                                    // AST REWRITE
                                    // elements: qualifiedIdentifier, genericTypeArgumentListSimplified, DOT, IDENT, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {

                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1376:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // Java.g:1376:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL")
                                        , root_1);

                                        // Java.g:1376:75: ^( DOT qualifiedIdentifier IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(
                                        stream_DOT.nextNode()
                                        , root_2);

                                        adaptor.addChild(root_2, stream_qualifiedIdentifier.nextTree());

                                        adaptor.addChild(root_2, 
                                        stream_IDENT.nextNode()
                                        );

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }


                                    retval.tree = root_0;
                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // Java.g:1378:17: THIS
                            {
                            THIS524=(Token)match(input,THIS,FOLLOW_THIS_in_qualifiedIdentExpression14031); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS524);


                            // AST REWRITE
                            // elements: DOT, qualifiedIdentifier, THIS
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1378:57: -> ^( DOT qualifiedIdentifier THIS )
                            {
                                // Java.g:1378:61: ^( DOT qualifiedIdentifier THIS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                stream_DOT.nextNode()
                                , root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

                                adaptor.addChild(root_1, 
                                stream_THIS.nextNode()
                                );

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 4 :
                            // Java.g:1379:17: Super= SUPER arguments
                            {
                            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14097); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(Super);


                            pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14099);
                            arguments525=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments525.getTree());

                            // AST REWRITE
                            // elements: arguments, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1379:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                            {
                                // Java.g:1379:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL")
                                , root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 5 :
                            // Java.g:1380:17: innerNewExpression
                            {
                            pushFollow(FOLLOW_innerNewExpression_in_qualifiedIdentExpression14147);
                            innerNewExpression526=innerNewExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression526.getTree());

                            // AST REWRITE
                            // elements: DOT, innerNewExpression, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1380:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
                            {
                                // Java.g:1380:61: ^( DOT qualifiedIdentifier innerNewExpression )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                stream_DOT.nextNode()
                                , root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

                                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 121, qualifiedIdentExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentExpression"


    public static class newExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "newExpression"
    // Java.g:1385:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
    public final JavaParser.newExpression_return newExpression() throws RecognitionException {
        JavaParser.newExpression_return retval = new JavaParser.newExpression_return();
        retval.start = input.LT(1);

        int newExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token NEW527=null;
        JavaParser.primitiveType_return primitiveType528 =null;

        JavaParser.newArrayConstruction_return newArrayConstruction529 =null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified530 =null;

        JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified531 =null;

        JavaParser.newArrayConstruction_return newArrayConstruction532 =null;

        JavaParser.arguments_return arguments533 =null;

        JavaParser.classBody_return classBody534 =null;


        CommonTree NEW527_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

            // Java.g:1386:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
            // Java.g:1386:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            {
            NEW527=(Token)match(input,NEW,FOLLOW_NEW_in_newExpression14223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW527);


            // Java.g:1387:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==BOOLEAN||LA151_0==BYTE||LA151_0==CHAR||LA151_0==DOUBLE||LA151_0==FLOAT||LA151_0==INT||LA151_0==LONG||LA151_0==SHORT) ) {
                alt151=1;
            }
            else if ( (LA151_0==IDENT||LA151_0==LESS_THAN) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;

            }
            switch (alt151) {
                case 1 :
                    // Java.g:1387:13: primitiveType newArrayConstruction
                    {
                    pushFollow(FOLLOW_primitiveType_in_newExpression14239);
                    primitiveType528=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType528.getTree());

                    pushFollow(FOLLOW_newArrayConstruction_in_newExpression14241);
                    newArrayConstruction529=newArrayConstruction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction529.getTree());

                    // AST REWRITE
                    // elements: newArrayConstruction, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1388:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                    {
                        // Java.g:1388:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW527, "STATIC_ARRAY_CREATOR")
                        , root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());

                        adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1389:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    {
                    // Java.g:1389:13: ( genericTypeArgumentListSimplified )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==LESS_THAN) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // Java.g:1389:13: genericTypeArgumentListSimplified
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_newExpression14285);
                            genericTypeArgumentListSimplified530=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified530.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14288);
                    qualifiedTypeIdentSimplified531=qualifiedTypeIdentSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified531.getTree());

                    // Java.g:1390:13: ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==LBRACK) ) {
                        alt150=1;
                    }
                    else if ( (LA150_0==LPAREN) ) {
                        alt150=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 150, 0, input);

                        throw nvae;

                    }
                    switch (alt150) {
                        case 1 :
                            // Java.g:1390:17: newArrayConstruction
                            {
                            pushFollow(FOLLOW_newArrayConstruction_in_newExpression14306);
                            newArrayConstruction532=newArrayConstruction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction532.getTree());

                            // AST REWRITE
                            // elements: newArrayConstruction, qualifiedTypeIdentSimplified, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1391:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                            {
                                // Java.g:1391:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW527, "STATIC_ARRAY_CREATOR")
                                , root_1);

                                // Java.g:1391:74: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();

                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());

                                adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // Java.g:1392:17: arguments ( classBody )?
                            {
                            pushFollow(FOLLOW_arguments_in_newExpression14371);
                            arguments533=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments533.getTree());

                            // Java.g:1392:27: ( classBody )?
                            int alt149=2;
                            int LA149_0 = input.LA(1);

                            if ( (LA149_0==LCURLY) ) {
                                alt149=1;
                            }
                            switch (alt149) {
                                case 1 :
                                    // Java.g:1392:27: classBody
                                    {
                                    pushFollow(FOLLOW_classBody_in_newExpression14373);
                                    classBody534=classBody();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_classBody.add(classBody534.getTree());

                                    }
                                    break;

                            }


                            // AST REWRITE
                            // elements: classBody, arguments, qualifiedTypeIdentSimplified, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1393:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                            {
                                // Java.g:1393:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW527, "STATIC_ARRAY_CREATOR")
                                , root_1);

                                // Java.g:1393:76: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();

                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                // Java.g:1393:150: ( classBody )?
                                if ( stream_classBody.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classBody.nextTree());

                                }
                                stream_classBody.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 122, newExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "newExpression"


    public static class innerNewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "innerNewExpression"
    // Java.g:1398:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
    public final JavaParser.innerNewExpression_return innerNewExpression() throws RecognitionException {
        JavaParser.innerNewExpression_return retval = new JavaParser.innerNewExpression_return();
        retval.start = input.LT(1);

        int innerNewExpression_StartIndex = input.index();

        CommonTree root_0 = null;

        Token NEW535=null;
        Token IDENT537=null;
        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified536 =null;

        JavaParser.arguments_return arguments538 =null;

        JavaParser.classBody_return classBody539 =null;


        CommonTree NEW535_tree=null;
        CommonTree IDENT537_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

            // Java.g:1399:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
            // Java.g:1399:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
            {
            NEW535=(Token)match(input,NEW,FOLLOW_NEW_in_innerNewExpression14472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW535);


            // Java.g:1399:13: ( genericTypeArgumentListSimplified )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==LESS_THAN) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // Java.g:1399:13: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14474);
                    genericTypeArgumentListSimplified536=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified536.getTree());

                    }
                    break;

            }


            IDENT537=(Token)match(input,IDENT,FOLLOW_IDENT_in_innerNewExpression14477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT537);


            pushFollow(FOLLOW_arguments_in_innerNewExpression14479);
            arguments538=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments538.getTree());

            // Java.g:1399:64: ( classBody )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LCURLY) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // Java.g:1399:64: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_innerNewExpression14481);
                    classBody539=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody539.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: arguments, classBody, IDENT, genericTypeArgumentListSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1400:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
            {
                // Java.g:1400:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW535, "STATIC_ARRAY_CREATOR")
                , root_1);

                // Java.g:1400:68: ( genericTypeArgumentListSimplified )?
                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                }
                stream_genericTypeArgumentListSimplified.reset();

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_arguments.nextTree());

                // Java.g:1400:119: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 123, innerNewExpression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "innerNewExpression"


    public static class newArrayConstruction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "newArrayConstruction"
    // Java.g:1403:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? );
    public final JavaParser.newArrayConstruction_return newArrayConstruction() throws RecognitionException {
        JavaParser.newArrayConstruction_return retval = new JavaParser.newArrayConstruction_return();
        retval.start = input.LT(1);

        int newArrayConstruction_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LBRACK542=null;
        Token RBRACK544=null;
        Token LBRACK545=null;
        Token RBRACK547=null;
        JavaParser.arrayDeclaratorList_return arrayDeclaratorList540 =null;

        JavaParser.arrayInitializer_return arrayInitializer541 =null;

        JavaParser.expression_return expression543 =null;

        JavaParser.expression_return expression546 =null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList548 =null;


        CommonTree LBRACK542_tree=null;
        CommonTree RBRACK544_tree=null;
        CommonTree LBRACK545_tree=null;
        CommonTree RBRACK547_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

            // Java.g:1404:5: ( arrayDeclaratorList arrayInitializer | LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )? )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LBRACK) ) {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==RBRACK) ) {
                    alt156=1;
                }
                else if ( (LA156_1==BOOLEAN||LA156_1==BYTE||(LA156_1 >= CHAR && LA156_1 <= CHARACTER_LITERAL)||LA156_1==DEC||LA156_1==DECIMAL_LITERAL||LA156_1==DOUBLE||LA156_1==FALSE||(LA156_1 >= FLOAT && LA156_1 <= FLOATING_POINT_LITERAL)||LA156_1==HEX_LITERAL||LA156_1==IDENT||LA156_1==INC||LA156_1==INT||LA156_1==LESS_THAN||LA156_1==LOGICAL_NOT||(LA156_1 >= LONG && LA156_1 <= LPAREN)||LA156_1==MINUS||LA156_1==NEW||LA156_1==NOT||LA156_1==NULL||LA156_1==OCTAL_LITERAL||LA156_1==PLUS||LA156_1==SHORT||(LA156_1 >= STRING_LITERAL && LA156_1 <= SUPER)||LA156_1==THIS||LA156_1==TRUE||LA156_1==VOID) ) {
                    alt156=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }
            switch (alt156) {
                case 1 :
                    // Java.g:1404:9: arrayDeclaratorList arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14527);
                    arrayDeclaratorList540=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList540.getTree());

                    pushFollow(FOLLOW_arrayInitializer_in_newArrayConstruction14529);
                    arrayInitializer541=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer541.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1405:9: LBRACK ! expression RBRACK ! ( LBRACK ! expression RBRACK !)* ( arrayDeclaratorList )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    LBRACK542=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14539); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_newArrayConstruction14542);
                    expression543=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression543.getTree());

                    RBRACK544=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14544); if (state.failed) return retval;

                    // Java.g:1405:36: ( LBRACK ! expression RBRACK !)*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==LBRACK) ) {
                            int LA154_1 = input.LA(2);

                            if ( (synpred239_Java()) ) {
                                alt154=1;
                            }


                        }


                        switch (alt154) {
                    	case 1 :
                    	    // Java.g:1405:37: LBRACK ! expression RBRACK !
                    	    {
                    	    LBRACK545=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14548); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_expression_in_newArrayConstruction14551);
                    	    expression546=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression546.getTree());

                    	    RBRACK547=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14553); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);


                    // Java.g:1405:66: ( arrayDeclaratorList )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==LBRACK) ) {
                        int LA155_1 = input.LA(2);

                        if ( (LA155_1==RBRACK) ) {
                            alt155=1;
                        }
                    }
                    switch (alt155) {
                        case 1 :
                            // Java.g:1405:66: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14558);
                            arrayDeclaratorList548=arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList548.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 124, newArrayConstruction_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "newArrayConstruction"


    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arguments"
    // Java.g:1408:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
    public final JavaParser.arguments_return arguments() throws RecognitionException {
        JavaParser.arguments_return retval = new JavaParser.arguments_return();
        retval.start = input.LT(1);

        int arguments_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LPAREN549=null;
        Token RPAREN551=null;
        JavaParser.expressionList_return expressionList550 =null;


        CommonTree LPAREN549_tree=null;
        CommonTree RPAREN551_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

            // Java.g:1409:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
            // Java.g:1409:9: LPAREN ( expressionList )? RPAREN
            {
            LPAREN549=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments14578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN549);


            // Java.g:1409:16: ( expressionList )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==BOOLEAN||LA157_0==BYTE||(LA157_0 >= CHAR && LA157_0 <= CHARACTER_LITERAL)||LA157_0==DEC||LA157_0==DECIMAL_LITERAL||LA157_0==DOUBLE||LA157_0==FALSE||(LA157_0 >= FLOAT && LA157_0 <= FLOATING_POINT_LITERAL)||LA157_0==HEX_LITERAL||LA157_0==IDENT||LA157_0==INC||LA157_0==INT||LA157_0==LESS_THAN||LA157_0==LOGICAL_NOT||(LA157_0 >= LONG && LA157_0 <= LPAREN)||LA157_0==MINUS||LA157_0==NEW||LA157_0==NOT||LA157_0==NULL||LA157_0==OCTAL_LITERAL||LA157_0==PLUS||LA157_0==SHORT||(LA157_0 >= STRING_LITERAL && LA157_0 <= SUPER)||LA157_0==THIS||LA157_0==TRUE||LA157_0==VOID) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // Java.g:1409:16: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments14580);
                    expressionList550=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList550.getTree());

                    }
                    break;

            }


            RPAREN551=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments14583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN551);


            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1410:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
            {
                // Java.g:1410:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(ARGUMENT_LIST, LPAREN549, "ARGUMENT_LIST")
                , root_1);

                // Java.g:1410:55: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 125, arguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arguments"


    public static class literal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // Java.g:1413:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);

        int literal_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set552=null;

        CommonTree set552_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

            // Java.g:1414:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
            // Java.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set552=(Token)input.LT(1);

            if ( input.LA(1)==CHARACTER_LITERAL||input.LA(1)==DECIMAL_LITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATING_POINT_LITERAL||input.LA(1)==HEX_LITERAL||input.LA(1)==NULL||input.LA(1)==OCTAL_LITERAL||input.LA(1)==STRING_LITERAL||input.LA(1)==TRUE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set552)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 126, literal_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "literal"

    // $ANTLR start synpred14_Java
    public final void synpred14_Java_fragment() throws RecognitionException {
        // Java.g:625:13: ( GREATER_THAN )
        // Java.g:625:13: GREATER_THAN
        {
        match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_synpred14_Java5158); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Java

    // $ANTLR start synpred15_Java
    public final void synpred15_Java_fragment() throws RecognitionException {
        // Java.g:628:13: ( SHIFT_RIGHT )
        // Java.g:628:13: SHIFT_RIGHT
        {
        match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_synpred15_Java5174); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Java

    // $ANTLR start synpred16_Java
    public final void synpred16_Java_fragment() throws RecognitionException {
        JavaParser.genericTypeListClosing_return count = null;


        // Java.g:635:17: (count= genericTypeListClosing )
        // Java.g:635:17: count= genericTypeListClosing
        {
        pushFollow(FOLLOW_genericTypeListClosing_in_synpred16_Java5227);
        count=genericTypeListClosing();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Java

    // $ANTLR start synpred17_Java
    public final void synpred17_Java_fragment() throws RecognitionException {
        JavaParser.genericTypeListClosing_return count = null;


        // Java.g:631:13: ( BIT_SHIFT_RIGHT (count= genericTypeListClosing )? )
        // Java.g:631:13: BIT_SHIFT_RIGHT (count= genericTypeListClosing )?
        {
        match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_synpred17_Java5190); if (state.failed) return ;

        // Java.g:635:13: (count= genericTypeListClosing )?
        int alt158=2;
        int LA158_0 = input.LA(1);

        if ( (LA158_0==BIT_SHIFT_RIGHT||LA158_0==GREATER_THAN||LA158_0==SHIFT_RIGHT) ) {
            alt158=1;
        }
        else if ( (LA158_0==EOF) ) {
            int LA158_2 = input.LA(2);

            if ( (synpred16_Java()) ) {
                alt158=1;
            }
        }
        switch (alt158) {
            case 1 :
                // Java.g:635:17: count= genericTypeListClosing
                {
                pushFollow(FOLLOW_genericTypeListClosing_in_synpred17_Java5227);
                count=genericTypeListClosing();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred17_Java

    // $ANTLR start synpred18_Java
    public final void synpred18_Java_fragment() throws RecognitionException {
        // Java.g:668:15: ( bound )
        // Java.g:668:15: bound
        {
        pushFollow(FOLLOW_bound_in_synpred18_Java5318);
        bound();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_Java

    // $ANTLR start synpred34_Java
    public final void synpred34_Java_fragment() throws RecognitionException {
        // Java.g:725:9: ( STATIC block )
        // Java.g:725:9: STATIC block
        {
        match(input,STATIC,FOLLOW_STATIC_in_synpred34_Java5852); if (state.failed) return ;

        pushFollow(FOLLOW_block_in_synpred34_Java5854);
        block();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred34_Java

    // $ANTLR start synpred44_Java
    public final void synpred44_Java_fragment() throws RecognitionException {
        Token ident = null;

        // Java.g:727:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) )
        // Java.g:727:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
        {
        // Java.g:727:13: ( genericTypeParameterList )?
        int alt164=2;
        int LA164_0 = input.LA(1);

        if ( (LA164_0==LESS_THAN) ) {
            alt164=1;
        }
        switch (alt164) {
            case 1 :
                // Java.g:727:13: genericTypeParameterList
                {
                pushFollow(FOLLOW_genericTypeParameterList_in_synpred44_Java5891);
                genericTypeParameterList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        // Java.g:728:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
        int alt171=3;
        switch ( input.LA(1) ) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            alt171=1;
            }
            break;
        case IDENT:
            {
            int LA171_2 = input.LA(2);

            if ( (LA171_2==DOT||LA171_2==IDENT||LA171_2==LBRACK||LA171_2==LESS_THAN) ) {
                alt171=1;
            }
            else if ( (LA171_2==LPAREN) ) {
                alt171=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 2, input);

                throw nvae;

            }
            }
            break;
        case VOID:
            {
            alt171=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 171, 0, input);

            throw nvae;

        }

        switch (alt171) {
            case 1 :
                // Java.g:728:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                {
                pushFollow(FOLLOW_type_in_synpred44_Java5910);
                type();

                state._fsp--;
                if (state.failed) return ;

                match(input,IDENT,FOLLOW_IDENT_in_synpred44_Java5912); if (state.failed) return ;

                pushFollow(FOLLOW_formalParameterList_in_synpred44_Java5914);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;

                // Java.g:728:48: ( arrayDeclaratorList )?
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==LBRACK) ) {
                    alt165=1;
                }
                switch (alt165) {
                    case 1 :
                        // Java.g:728:48: arrayDeclaratorList
                        {
                        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred44_Java5916);
                        arrayDeclaratorList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                // Java.g:728:69: ( throwsClause )?
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==THROWS) ) {
                    alt166=1;
                }
                switch (alt166) {
                    case 1 :
                        // Java.g:728:69: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred44_Java5919);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                // Java.g:728:83: ( block | SEMI )
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==LCURLY) ) {
                    alt167=1;
                }
                else if ( (LA167_0==SEMI) ) {
                    alt167=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 167, 0, input);

                    throw nvae;

                }
                switch (alt167) {
                    case 1 :
                        // Java.g:728:84: block
                        {
                        pushFollow(FOLLOW_block_in_synpred44_Java5923);
                        block();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // Java.g:728:92: SEMI
                        {
                        match(input,SEMI,FOLLOW_SEMI_in_synpred44_Java5927); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // Java.g:730:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                {
                match(input,VOID,FOLLOW_VOID_in_synpred44_Java5989); if (state.failed) return ;

                match(input,IDENT,FOLLOW_IDENT_in_synpred44_Java5991); if (state.failed) return ;

                pushFollow(FOLLOW_formalParameterList_in_synpred44_Java5993);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;

                // Java.g:730:48: ( throwsClause )?
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==THROWS) ) {
                    alt168=1;
                }
                switch (alt168) {
                    case 1 :
                        // Java.g:730:48: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred44_Java5995);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                // Java.g:730:62: ( block | SEMI )
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==LCURLY) ) {
                    alt169=1;
                }
                else if ( (LA169_0==SEMI) ) {
                    alt169=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 169, 0, input);

                    throw nvae;

                }
                switch (alt169) {
                    case 1 :
                        // Java.g:730:63: block
                        {
                        pushFollow(FOLLOW_block_in_synpred44_Java5999);
                        block();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // Java.g:730:71: SEMI
                        {
                        match(input,SEMI,FOLLOW_SEMI_in_synpred44_Java6003); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 3 :
                // Java.g:732:17: ident= IDENT formalParameterList ( throwsClause )? block
                {
                ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred44_Java6062); if (state.failed) return ;

                pushFollow(FOLLOW_formalParameterList_in_synpred44_Java6064);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;

                // Java.g:732:49: ( throwsClause )?
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==THROWS) ) {
                    alt170=1;
                }
                switch (alt170) {
                    case 1 :
                        // Java.g:732:49: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred44_Java6066);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                pushFollow(FOLLOW_block_in_synpred44_Java6069);
                block();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred44_Java

    // $ANTLR start synpred45_Java
    public final void synpred45_Java_fragment() throws RecognitionException {
        Token ident = null;

        // Java.g:726:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI ) )
        // Java.g:726:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred45_Java5877);
        modifierList();

        state._fsp--;
        if (state.failed) return ;

        // Java.g:727:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
        int alt180=2;
        switch ( input.LA(1) ) {
        case LESS_THAN:
        case VOID:
            {
            alt180=1;
            }
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            int LA180_2 = input.LA(2);

            if ( (synpred44_Java()) ) {
                alt180=1;
            }
            else if ( (true) ) {
                alt180=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 2, input);

                throw nvae;

            }
            }
            break;
        case IDENT:
            {
            int LA180_3 = input.LA(2);

            if ( (synpred44_Java()) ) {
                alt180=1;
            }
            else if ( (true) ) {
                alt180=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 3, input);

                throw nvae;

            }
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 180, 0, input);

            throw nvae;

        }

        switch (alt180) {
            case 1 :
                // Java.g:727:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
                {
                // Java.g:727:13: ( genericTypeParameterList )?
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==LESS_THAN) ) {
                    alt172=1;
                }
                switch (alt172) {
                    case 1 :
                        // Java.g:727:13: genericTypeParameterList
                        {
                        pushFollow(FOLLOW_genericTypeParameterList_in_synpred45_Java5891);
                        genericTypeParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                // Java.g:728:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) |ident= IDENT formalParameterList ( throwsClause )? block )
                int alt179=3;
                switch ( input.LA(1) ) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    {
                    alt179=1;
                    }
                    break;
                case IDENT:
                    {
                    int LA179_2 = input.LA(2);

                    if ( (LA179_2==DOT||LA179_2==IDENT||LA179_2==LBRACK||LA179_2==LESS_THAN) ) {
                        alt179=1;
                    }
                    else if ( (LA179_2==LPAREN) ) {
                        alt179=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 179, 2, input);

                        throw nvae;

                    }
                    }
                    break;
                case VOID:
                    {
                    alt179=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 179, 0, input);

                    throw nvae;

                }

                switch (alt179) {
                    case 1 :
                        // Java.g:728:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                        {
                        pushFollow(FOLLOW_type_in_synpred45_Java5910);
                        type();

                        state._fsp--;
                        if (state.failed) return ;

                        match(input,IDENT,FOLLOW_IDENT_in_synpred45_Java5912); if (state.failed) return ;

                        pushFollow(FOLLOW_formalParameterList_in_synpred45_Java5914);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        // Java.g:728:48: ( arrayDeclaratorList )?
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==LBRACK) ) {
                            alt173=1;
                        }
                        switch (alt173) {
                            case 1 :
                                // Java.g:728:48: arrayDeclaratorList
                                {
                                pushFollow(FOLLOW_arrayDeclaratorList_in_synpred45_Java5916);
                                arrayDeclaratorList();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }


                        // Java.g:728:69: ( throwsClause )?
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==THROWS) ) {
                            alt174=1;
                        }
                        switch (alt174) {
                            case 1 :
                                // Java.g:728:69: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred45_Java5919);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }


                        // Java.g:728:83: ( block | SEMI )
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==LCURLY) ) {
                            alt175=1;
                        }
                        else if ( (LA175_0==SEMI) ) {
                            alt175=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 175, 0, input);

                            throw nvae;

                        }
                        switch (alt175) {
                            case 1 :
                                // Java.g:728:84: block
                                {
                                pushFollow(FOLLOW_block_in_synpred45_Java5923);
                                block();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;
                            case 2 :
                                // Java.g:728:92: SEMI
                                {
                                match(input,SEMI,FOLLOW_SEMI_in_synpred45_Java5927); if (state.failed) return ;

                                }
                                break;

                        }


                        }
                        break;
                    case 2 :
                        // Java.g:730:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                        {
                        match(input,VOID,FOLLOW_VOID_in_synpred45_Java5989); if (state.failed) return ;

                        match(input,IDENT,FOLLOW_IDENT_in_synpred45_Java5991); if (state.failed) return ;

                        pushFollow(FOLLOW_formalParameterList_in_synpred45_Java5993);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        // Java.g:730:48: ( throwsClause )?
                        int alt176=2;
                        int LA176_0 = input.LA(1);

                        if ( (LA176_0==THROWS) ) {
                            alt176=1;
                        }
                        switch (alt176) {
                            case 1 :
                                // Java.g:730:48: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred45_Java5995);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }


                        // Java.g:730:62: ( block | SEMI )
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==LCURLY) ) {
                            alt177=1;
                        }
                        else if ( (LA177_0==SEMI) ) {
                            alt177=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 177, 0, input);

                            throw nvae;

                        }
                        switch (alt177) {
                            case 1 :
                                // Java.g:730:63: block
                                {
                                pushFollow(FOLLOW_block_in_synpred45_Java5999);
                                block();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;
                            case 2 :
                                // Java.g:730:71: SEMI
                                {
                                match(input,SEMI,FOLLOW_SEMI_in_synpred45_Java6003); if (state.failed) return ;

                                }
                                break;

                        }


                        }
                        break;
                    case 3 :
                        // Java.g:732:17: ident= IDENT formalParameterList ( throwsClause )? block
                        {
                        ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred45_Java6062); if (state.failed) return ;

                        pushFollow(FOLLOW_formalParameterList_in_synpred45_Java6064);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        // Java.g:732:49: ( throwsClause )?
                        int alt178=2;
                        int LA178_0 = input.LA(1);

                        if ( (LA178_0==THROWS) ) {
                            alt178=1;
                        }
                        switch (alt178) {
                            case 1 :
                                // Java.g:732:49: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred45_Java6066);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }


                        pushFollow(FOLLOW_block_in_synpred45_Java6069);
                        block();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // Java.g:735:13: type classFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_type_in_synpred45_Java6133);
                type();

                state._fsp--;
                if (state.failed) return ;

                pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred45_Java6135);
                classFieldDeclaratorList();

                state._fsp--;
                if (state.failed) return ;

                match(input,SEMI,FOLLOW_SEMI_in_synpred45_Java6137); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred45_Java

    // $ANTLR start synpred46_Java
    public final void synpred46_Java_fragment() throws RecognitionException {
        // Java.g:738:9: ( typeDeclaration )
        // Java.g:738:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred46_Java6182);
        typeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred46_Java

    // $ANTLR start synpred52_Java
    public final void synpred52_Java_fragment() throws RecognitionException {
        // Java.g:744:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
        // Java.g:744:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
        {
        // Java.g:744:13: ( genericTypeParameterList )?
        int alt183=2;
        int LA183_0 = input.LA(1);

        if ( (LA183_0==LESS_THAN) ) {
            alt183=1;
        }
        switch (alt183) {
            case 1 :
                // Java.g:744:13: genericTypeParameterList
                {
                pushFollow(FOLLOW_genericTypeParameterList_in_synpred52_Java6238);
                genericTypeParameterList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        // Java.g:745:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
        int alt187=2;
        int LA187_0 = input.LA(1);

        if ( (LA187_0==BOOLEAN||LA187_0==BYTE||LA187_0==CHAR||LA187_0==DOUBLE||LA187_0==FLOAT||LA187_0==IDENT||LA187_0==INT||LA187_0==LONG||LA187_0==SHORT) ) {
            alt187=1;
        }
        else if ( (LA187_0==VOID) ) {
            alt187=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 187, 0, input);

            throw nvae;

        }
        switch (alt187) {
            case 1 :
                // Java.g:745:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                {
                pushFollow(FOLLOW_type_in_synpred52_Java6257);
                type();

                state._fsp--;
                if (state.failed) return ;

                match(input,IDENT,FOLLOW_IDENT_in_synpred52_Java6259); if (state.failed) return ;

                pushFollow(FOLLOW_formalParameterList_in_synpred52_Java6261);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;

                // Java.g:745:48: ( arrayDeclaratorList )?
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==LBRACK) ) {
                    alt184=1;
                }
                switch (alt184) {
                    case 1 :
                        // Java.g:745:48: arrayDeclaratorList
                        {
                        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred52_Java6263);
                        arrayDeclaratorList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                // Java.g:745:69: ( throwsClause )?
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==THROWS) ) {
                    alt185=1;
                }
                switch (alt185) {
                    case 1 :
                        // Java.g:745:69: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred52_Java6266);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                match(input,SEMI,FOLLOW_SEMI_in_synpred52_Java6269); if (state.failed) return ;

                }
                break;
            case 2 :
                // Java.g:747:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                {
                match(input,VOID,FOLLOW_VOID_in_synpred52_Java6327); if (state.failed) return ;

                match(input,IDENT,FOLLOW_IDENT_in_synpred52_Java6329); if (state.failed) return ;

                pushFollow(FOLLOW_formalParameterList_in_synpred52_Java6331);
                formalParameterList();

                state._fsp--;
                if (state.failed) return ;

                // Java.g:747:48: ( throwsClause )?
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==THROWS) ) {
                    alt186=1;
                }
                switch (alt186) {
                    case 1 :
                        // Java.g:747:48: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred52_Java6333);
                        throwsClause();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                match(input,SEMI,FOLLOW_SEMI_in_synpred52_Java6336); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred52_Java

    // $ANTLR start synpred53_Java
    public final void synpred53_Java_fragment() throws RecognitionException {
        // Java.g:743:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
        // Java.g:743:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred53_Java6224);
        modifierList();

        state._fsp--;
        if (state.failed) return ;

        // Java.g:744:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
        int alt193=2;
        switch ( input.LA(1) ) {
        case LESS_THAN:
        case VOID:
            {
            alt193=1;
            }
            break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            int LA193_2 = input.LA(2);

            if ( (synpred52_Java()) ) {
                alt193=1;
            }
            else if ( (true) ) {
                alt193=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 2, input);

                throw nvae;

            }
            }
            break;
        case IDENT:
            {
            int LA193_3 = input.LA(2);

            if ( (synpred52_Java()) ) {
                alt193=1;
            }
            else if ( (true) ) {
                alt193=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 3, input);

                throw nvae;

            }
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 193, 0, input);

            throw nvae;

        }

        switch (alt193) {
            case 1 :
                // Java.g:744:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                {
                // Java.g:744:13: ( genericTypeParameterList )?
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==LESS_THAN) ) {
                    alt188=1;
                }
                switch (alt188) {
                    case 1 :
                        // Java.g:744:13: genericTypeParameterList
                        {
                        pushFollow(FOLLOW_genericTypeParameterList_in_synpred53_Java6238);
                        genericTypeParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                // Java.g:745:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==BOOLEAN||LA192_0==BYTE||LA192_0==CHAR||LA192_0==DOUBLE||LA192_0==FLOAT||LA192_0==IDENT||LA192_0==INT||LA192_0==LONG||LA192_0==SHORT) ) {
                    alt192=1;
                }
                else if ( (LA192_0==VOID) ) {
                    alt192=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 192, 0, input);

                    throw nvae;

                }
                switch (alt192) {
                    case 1 :
                        // Java.g:745:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                        {
                        pushFollow(FOLLOW_type_in_synpred53_Java6257);
                        type();

                        state._fsp--;
                        if (state.failed) return ;

                        match(input,IDENT,FOLLOW_IDENT_in_synpred53_Java6259); if (state.failed) return ;

                        pushFollow(FOLLOW_formalParameterList_in_synpred53_Java6261);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        // Java.g:745:48: ( arrayDeclaratorList )?
                        int alt189=2;
                        int LA189_0 = input.LA(1);

                        if ( (LA189_0==LBRACK) ) {
                            alt189=1;
                        }
                        switch (alt189) {
                            case 1 :
                                // Java.g:745:48: arrayDeclaratorList
                                {
                                pushFollow(FOLLOW_arrayDeclaratorList_in_synpred53_Java6263);
                                arrayDeclaratorList();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }


                        // Java.g:745:69: ( throwsClause )?
                        int alt190=2;
                        int LA190_0 = input.LA(1);

                        if ( (LA190_0==THROWS) ) {
                            alt190=1;
                        }
                        switch (alt190) {
                            case 1 :
                                // Java.g:745:69: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred53_Java6266);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }


                        match(input,SEMI,FOLLOW_SEMI_in_synpred53_Java6269); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // Java.g:747:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                        {
                        match(input,VOID,FOLLOW_VOID_in_synpred53_Java6327); if (state.failed) return ;

                        match(input,IDENT,FOLLOW_IDENT_in_synpred53_Java6329); if (state.failed) return ;

                        pushFollow(FOLLOW_formalParameterList_in_synpred53_Java6331);
                        formalParameterList();

                        state._fsp--;
                        if (state.failed) return ;

                        // Java.g:747:48: ( throwsClause )?
                        int alt191=2;
                        int LA191_0 = input.LA(1);

                        if ( (LA191_0==THROWS) ) {
                            alt191=1;
                        }
                        switch (alt191) {
                            case 1 :
                                // Java.g:747:48: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred53_Java6333);
                                throwsClause();

                                state._fsp--;
                                if (state.failed) return ;

                                }
                                break;

                        }


                        match(input,SEMI,FOLLOW_SEMI_in_synpred53_Java6336); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // Java.g:750:13: type interfaceFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_type_in_synpred53_Java6399);
                type();

                state._fsp--;
                if (state.failed) return ;

                pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_synpred53_Java6401);
                interfaceFieldDeclaratorList();

                state._fsp--;
                if (state.failed) return ;

                match(input,SEMI,FOLLOW_SEMI_in_synpred53_Java6403); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred53_Java

    // $ANTLR start synpred54_Java
    public final void synpred54_Java_fragment() throws RecognitionException {
        // Java.g:753:9: ( typeDeclaration )
        // Java.g:753:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred54_Java6448);
        typeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred54_Java

    // $ANTLR start synpred60_Java
    public final void synpred60_Java_fragment() throws RecognitionException {
        // Java.g:792:9: ( arrayDeclarator )
        // Java.g:792:9: arrayDeclarator
        {
        pushFollow(FOLLOW_arrayDeclarator_in_synpred60_Java6750);
        arrayDeclarator();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred60_Java

    // $ANTLR start synpred78_Java
    public final void synpred78_Java_fragment() throws RecognitionException {
        // Java.g:841:23: ( arrayDeclaratorList )
        // Java.g:841:23: arrayDeclaratorList
        {
        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred78_Java7151);
        arrayDeclaratorList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred78_Java

    // $ANTLR start synpred79_Java
    public final void synpred79_Java_fragment() throws RecognitionException {
        // Java.g:846:28: ( arrayDeclaratorList )
        // Java.g:846:28: arrayDeclaratorList
        {
        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred79_Java7200);
        arrayDeclaratorList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred79_Java

    // $ANTLR start synpred81_Java
    public final void synpred81_Java_fragment() throws RecognitionException {
        // Java.g:856:20: ( DOT typeIdent )
        // Java.g:856:20: DOT typeIdent
        {
        match(input,DOT,FOLLOW_DOT_in_synpred81_Java7285); if (state.failed) return ;

        pushFollow(FOLLOW_typeIdent_in_synpred81_Java7287);
        typeIdent();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred81_Java

    // $ANTLR start synpred92_Java
    public final void synpred92_Java_fragment() throws RecognitionException {
        // Java.g:885:40: ( COMMA genericTypeArgument )
        // Java.g:885:40: COMMA genericTypeArgument
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred92_Java7512); if (state.failed) return ;

        pushFollow(FOLLOW_genericTypeArgument_in_synpred92_Java7514);
        genericTypeArgument();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred92_Java

    // $ANTLR start synpred94_Java
    public final void synpred94_Java_fragment() throws RecognitionException {
        // Java.g:891:18: ( genericWildcardBoundType )
        // Java.g:891:18: genericWildcardBoundType
        {
        pushFollow(FOLLOW_genericWildcardBoundType_in_synpred94_Java7568);
        genericWildcardBoundType();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred94_Java

    // $ANTLR start synpred99_Java
    public final void synpred99_Java_fragment() throws RecognitionException {
        // Java.g:916:42: ( COMMA formalParameterStandardDecl )
        // Java.g:916:42: COMMA formalParameterStandardDecl
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred99_Java7786); if (state.failed) return ;

        pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred99_Java7788);
        formalParameterStandardDecl();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred99_Java

    // $ANTLR start synpred101_Java
    public final void synpred101_Java_fragment() throws RecognitionException {
        // Java.g:916:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
        // Java.g:916:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
        {
        pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred101_Java7783);
        formalParameterStandardDecl();

        state._fsp--;
        if (state.failed) return ;

        // Java.g:916:41: ( COMMA formalParameterStandardDecl )*
        loop196:
        do {
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==COMMA) ) {
                int LA196_1 = input.LA(2);

                if ( (synpred99_Java()) ) {
                    alt196=1;
                }


            }


            switch (alt196) {
        	case 1 :
        	    // Java.g:916:42: COMMA formalParameterStandardDecl
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred101_Java7786); if (state.failed) return ;

        	    pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred101_Java7788);
        	    formalParameterStandardDecl();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop196;
            }
        } while (true);


        // Java.g:916:78: ( COMMA formalParameterVarArgDecl )?
        int alt197=2;
        int LA197_0 = input.LA(1);

        if ( (LA197_0==COMMA) ) {
            alt197=1;
        }
        switch (alt197) {
            case 1 :
                // Java.g:916:79: COMMA formalParameterVarArgDecl
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred101_Java7793); if (state.failed) return ;

                pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred101_Java7795);
                formalParameterVarArgDecl();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred101_Java

    // $ANTLR start synpred102_Java
    public final void synpred102_Java_fragment() throws RecognitionException {
        // Java.g:919:13: ( formalParameterVarArgDecl )
        // Java.g:919:13: formalParameterVarArgDecl
        {
        pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred102_Java7852);
        formalParameterVarArgDecl();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred102_Java

    // $ANTLR start synpred103_Java
    public final void synpred103_Java_fragment() throws RecognitionException {
        Token ident = null;

        // Java.g:940:13: ( DOT ident= IDENT )
        // Java.g:940:13: DOT ident= IDENT
        {
        match(input,DOT,FOLLOW_DOT_in_synpred103_Java8097); if (state.failed) return ;

        ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred103_Java8101); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred103_Java

    // $ANTLR start synpred104_Java
    public final void synpred104_Java_fragment() throws RecognitionException {
        // Java.g:947:9: ( annotation )
        // Java.g:947:9: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred104_Java8154);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred104_Java

    // $ANTLR start synpred117_Java
    public final void synpred117_Java_fragment() throws RecognitionException {
        // Java.g:998:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
        // Java.g:998:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred117_Java8610);
        modifierList();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_type_in_synpred117_Java8612);
        type();

        state._fsp--;
        if (state.failed) return ;

        // Java.g:999:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
        int alt202=2;
        int LA202_0 = input.LA(1);

        if ( (LA202_0==IDENT) ) {
            int LA202_1 = input.LA(2);

            if ( (LA202_1==LPAREN) ) {
                alt202=1;
            }
            else if ( (LA202_1==ASSIGN||LA202_1==COMMA||LA202_1==LBRACK||LA202_1==SEMI) ) {
                alt202=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 1, input);

                throw nvae;

            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 202, 0, input);

            throw nvae;

        }
        switch (alt202) {
            case 1 :
                // Java.g:999:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                {
                match(input,IDENT,FOLLOW_IDENT_in_synpred117_Java8626); if (state.failed) return ;

                match(input,LPAREN,FOLLOW_LPAREN_in_synpred117_Java8628); if (state.failed) return ;

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred117_Java8630); if (state.failed) return ;

                // Java.g:999:33: ( annotationDefaultValue )?
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==DEFAULT) ) {
                    alt201=1;
                }
                switch (alt201) {
                    case 1 :
                        // Java.g:999:33: annotationDefaultValue
                        {
                        pushFollow(FOLLOW_annotationDefaultValue_in_synpred117_Java8632);
                        annotationDefaultValue();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                match(input,SEMI,FOLLOW_SEMI_in_synpred117_Java8635); if (state.failed) return ;

                }
                break;
            case 2 :
                // Java.g:1001:13: classFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred117_Java8677);
                classFieldDeclaratorList();

                state._fsp--;
                if (state.failed) return ;

                match(input,SEMI,FOLLOW_SEMI_in_synpred117_Java8679); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred117_Java

    // $ANTLR start synpred119_Java
    public final void synpred119_Java_fragment() throws RecognitionException {
        // Java.g:1019:9: ( localVariableDeclaration SEMI )
        // Java.g:1019:9: localVariableDeclaration SEMI
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred119_Java8814);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        match(input,SEMI,FOLLOW_SEMI_in_synpred119_Java8816); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred119_Java

    // $ANTLR start synpred120_Java
    public final void synpred120_Java_fragment() throws RecognitionException {
        // Java.g:1020:9: ( typeDeclaration )
        // Java.g:1020:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred120_Java8827);
        typeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred120_Java

    // $ANTLR start synpred124_Java
    public final void synpred124_Java_fragment() throws RecognitionException {
        // Java.g:1036:9: ( forStatement )
        // Java.g:1036:9: forStatement
        {
        pushFollow(FOLLOW_forStatement_in_synpred124_Java8968);
        forStatement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred124_Java

    // $ANTLR start synpred125_Java
    public final void synpred125_Java_fragment() throws RecognitionException {
        // Java.g:1037:7: ( forEachStatement )
        // Java.g:1037:7: forEachStatement
        {
        pushFollow(FOLLOW_forEachStatement_in_synpred125_Java8976);
        forEachStatement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred125_Java

    // $ANTLR start synpred135_Java
    public final void synpred135_Java_fragment() throws RecognitionException {
        // Java.g:1047:9: ( labeledStatement )
        // Java.g:1047:9: labeledStatement
        {
        pushFollow(FOLLOW_labeledStatement_in_synpred135_Java9076);
        labeledStatement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred135_Java

    // $ANTLR start synpred137_Java
    public final void synpred137_Java_fragment() throws RecognitionException {
        JavaParser.statement_return elseStat = null;


        // Java.g:1060:13: ( ELSE elseStat= statement )
        // Java.g:1060:13: ELSE elseStat= statement
        {
        match(input,ELSE,FOLLOW_ELSE_in_synpred137_Java9244); if (state.failed) return ;

        pushFollow(FOLLOW_statement_in_synpred137_Java9248);
        elseStat=statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred137_Java

    // $ANTLR start synpred146_Java
    public final void synpred146_Java_fragment() throws RecognitionException {
        // Java.g:1145:9: ( switchCaseLabel )
        // Java.g:1145:9: switchCaseLabel
        {
        pushFollow(FOLLOW_switchCaseLabel_in_synpred146_Java10004);
        switchCaseLabel();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred146_Java

    // $ANTLR start synpred149_Java
    public final void synpred149_Java_fragment() throws RecognitionException {
        // Java.g:1157:9: ( localVariableDeclaration )
        // Java.g:1157:9: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred149_Java10094);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred149_Java

    // $ANTLR start synpred150_Java
    public final void synpred150_Java_fragment() throws RecognitionException {
        // Java.g:1158:9: ( expressionList )
        // Java.g:1158:9: expressionList
        {
        pushFollow(FOLLOW_expressionList_in_synpred150_Java10116);
        expressionList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred150_Java

    // $ANTLR start synpred193_Java
    public final void synpred193_Java_fragment() throws RecognitionException {
        // Java.g:1295:9: ( LPAREN simpleType RPAREN unaryExpressionAll )
        // Java.g:1295:9: LPAREN simpleType RPAREN unaryExpressionAll
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred193_Java11642); if (state.failed) return ;

        pushFollow(FOLLOW_simpleType_in_synpred193_Java11644);
        simpleType();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred193_Java11646); if (state.failed) return ;

        pushFollow(FOLLOW_unaryExpressionAll_in_synpred193_Java11648);
        unaryExpressionAll();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred193_Java

    // $ANTLR start synpred194_Java
    public final void synpred194_Java_fragment() throws RecognitionException {
        // Java.g:1296:9: ( LPAREN objectType RPAREN unaryExpressionRest )
        // Java.g:1296:9: LPAREN objectType RPAREN unaryExpressionRest
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred194_Java11674); if (state.failed) return ;

        pushFollow(FOLLOW_objectType_in_synpred194_Java11676);
        objectType();

        state._fsp--;
        if (state.failed) return ;

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred194_Java11678); if (state.failed) return ;

        pushFollow(FOLLOW_unaryExpressionRest_in_synpred194_Java11680);
        unaryExpressionRest();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred194_Java

    // $ANTLR start synpred197_Java
    public final void synpred197_Java_fragment() throws RecognitionException {
        // Java.g:1308:17: ( ( ( genericTypeArgumentListSimplified )? IDENT ) ( arguments )? )
        // Java.g:1308:17: ( ( genericTypeArgumentListSimplified )? IDENT ) ( arguments )?
        {
        // Java.g:1308:17: ( ( genericTypeArgumentListSimplified )? IDENT )
        // Java.g:1308:21: ( genericTypeArgumentListSimplified )? IDENT
        {
        // Java.g:1308:21: ( genericTypeArgumentListSimplified )?
        int alt204=2;
        int LA204_0 = input.LA(1);

        if ( (LA204_0==LESS_THAN) ) {
            alt204=1;
        }
        switch (alt204) {
            case 1 :
                // Java.g:1308:21: genericTypeArgumentListSimplified
                {
                pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_synpred197_Java11861);
                genericTypeArgumentListSimplified();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,IDENT,FOLLOW_IDENT_in_synpred197_Java11886); if (state.failed) return ;

        }


        // Java.g:1311:17: ( arguments )?
        int alt205=2;
        int LA205_0 = input.LA(1);

        if ( (LA205_0==LPAREN) ) {
            alt205=1;
        }
        switch (alt205) {
            case 1 :
                // Java.g:1311:21: arguments
                {
                pushFollow(FOLLOW_arguments_in_synpred197_Java11965);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred197_Java

    // $ANTLR start synpred200_Java
    public final void synpred200_Java_fragment() throws RecognitionException {
        Token Super = null;

        // Java.g:1314:17: ( ( genericTypeArgumentListSimplified )? Super= SUPER arguments )
        // Java.g:1314:17: ( genericTypeArgumentListSimplified )? Super= SUPER arguments
        {
        // Java.g:1314:17: ( genericTypeArgumentListSimplified )?
        int alt206=2;
        int LA206_0 = input.LA(1);

        if ( (LA206_0==LESS_THAN) ) {
            alt206=1;
        }
        switch (alt206) {
            case 1 :
                // Java.g:1314:17: genericTypeArgumentListSimplified
                {
                pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_synpred200_Java12100);
                genericTypeArgumentListSimplified();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred200_Java12118); if (state.failed) return ;

        pushFollow(FOLLOW_arguments_in_synpred200_Java12120);
        arguments();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred200_Java

    // $ANTLR start synpred202_Java
    public final void synpred202_Java_fragment() throws RecognitionException {
        Token innerDot = null;

        // Java.g:1316:17: ( ( SUPER innerDot= DOT IDENT ) ( arguments )? )
        // Java.g:1316:17: ( SUPER innerDot= DOT IDENT ) ( arguments )?
        {
        // Java.g:1316:17: ( SUPER innerDot= DOT IDENT )
        // Java.g:1316:21: SUPER innerDot= DOT IDENT
        {
        match(input,SUPER,FOLLOW_SUPER_in_synpred202_Java12172); if (state.failed) return ;

        innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred202_Java12176); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred202_Java12178); if (state.failed) return ;

        }


        // Java.g:1318:17: ( arguments )?
        int alt207=2;
        int LA207_0 = input.LA(1);

        if ( (LA207_0==LPAREN) ) {
            alt207=1;
        }
        switch (alt207) {
            case 1 :
                // Java.g:1318:21: arguments
                {
                pushFollow(FOLLOW_arguments_in_synpred202_Java12245);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred202_Java

    // $ANTLR start synpred223_Java
    public final void synpred223_Java_fragment() throws RecognitionException {
        // Java.g:1366:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
        // Java.g:1366:13: ( arrayDeclarator )+ ( DOT CLASS )
        {
        // Java.g:1366:13: ( arrayDeclarator )+
        int cnt219=0;
        loop219:
        do {
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==LBRACK) ) {
                alt219=1;
            }


            switch (alt219) {
        	case 1 :
        	    // Java.g:1366:17: arrayDeclarator
        	    {
        	    pushFollow(FOLLOW_arrayDeclarator_in_synpred223_Java13537);
        	    arrayDeclarator();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt219 >= 1 ) break loop219;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(219, input);
                    throw eee;
            }
            cnt219++;
        } while (true);


        // Java.g:1368:13: ( DOT CLASS )
        // Java.g:1368:17: DOT CLASS
        {
        match(input,DOT,FOLLOW_DOT_in_synpred223_Java13605); if (state.failed) return ;

        match(input,CLASS,FOLLOW_CLASS_in_synpred223_Java13607); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred223_Java

    // $ANTLR start synpred231_Java
    public final void synpred231_Java_fragment() throws RecognitionException {
        Token innerDot = null;
        Token outerDot = null;
        Token Super = null;

        // Java.g:1371:13: (outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression ) )
        // Java.g:1371:13: outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
        {
        outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred231_Java13738); if (state.failed) return ;

        // Java.g:1372:13: ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS |Super= SUPER arguments | innerNewExpression )
        int alt222=5;
        switch ( input.LA(1) ) {
        case CLASS:
            {
            alt222=1;
            }
            break;
        case LESS_THAN:
            {
            alt222=2;
            }
            break;
        case THIS:
            {
            alt222=3;
            }
            break;
        case SUPER:
            {
            alt222=4;
            }
            break;
        case NEW:
            {
            alt222=5;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 222, 0, input);

            throw nvae;

        }

        switch (alt222) {
            case 1 :
                // Java.g:1372:17: CLASS
                {
                match(input,CLASS,FOLLOW_CLASS_in_synpred231_Java13756); if (state.failed) return ;

                }
                break;
            case 2 :
                // Java.g:1373:17: genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                {
                pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_synpred231_Java13819);
                genericTypeArgumentListSimplified();

                state._fsp--;
                if (state.failed) return ;

                // Java.g:1374:17: (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                int alt221=3;
                int LA221_0 = input.LA(1);

                if ( (LA221_0==SUPER) ) {
                    int LA221_1 = input.LA(2);

                    if ( (LA221_1==DOT) ) {
                        alt221=2;
                    }
                    else if ( (LA221_1==LPAREN) ) {
                        alt221=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 221, 1, input);

                        throw nvae;

                    }
                }
                else if ( (LA221_0==IDENT) ) {
                    alt221=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 221, 0, input);

                    throw nvae;

                }
                switch (alt221) {
                    case 1 :
                        // Java.g:1374:21: Super= SUPER arguments
                        {
                        Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred231_Java13844); if (state.failed) return ;

                        pushFollow(FOLLOW_arguments_in_synpred231_Java13846);
                        arguments();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // Java.g:1375:21: SUPER innerDot= DOT IDENT arguments
                        {
                        match(input,SUPER,FOLLOW_SUPER_in_synpred231_Java13896); if (state.failed) return ;

                        innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred231_Java13900); if (state.failed) return ;

                        match(input,IDENT,FOLLOW_IDENT_in_synpred231_Java13902); if (state.failed) return ;

                        pushFollow(FOLLOW_arguments_in_synpred231_Java13904);
                        arguments();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;
                    case 3 :
                        // Java.g:1376:21: IDENT arguments
                        {
                        match(input,IDENT,FOLLOW_IDENT_in_synpred231_Java13954); if (state.failed) return ;

                        pushFollow(FOLLOW_arguments_in_synpred231_Java13956);
                        arguments();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 3 :
                // Java.g:1378:17: THIS
                {
                match(input,THIS,FOLLOW_THIS_in_synpred231_Java14031); if (state.failed) return ;

                }
                break;
            case 4 :
                // Java.g:1379:17: Super= SUPER arguments
                {
                Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred231_Java14097); if (state.failed) return ;

                pushFollow(FOLLOW_arguments_in_synpred231_Java14099);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 5 :
                // Java.g:1380:17: innerNewExpression
                {
                pushFollow(FOLLOW_innerNewExpression_in_synpred231_Java14147);
                innerNewExpression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred231_Java

    // $ANTLR start synpred239_Java
    public final void synpred239_Java_fragment() throws RecognitionException {
        // Java.g:1405:37: ( LBRACK expression RBRACK )
        // Java.g:1405:37: LBRACK expression RBRACK
        {
        match(input,LBRACK,FOLLOW_LBRACK_in_synpred239_Java14548); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred239_Java14551);
        expression();

        state._fsp--;
        if (state.failed) return ;

        match(input,RBRACK,FOLLOW_RBRACK_in_synpred239_Java14553); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred239_Java

    // Delegated rules

    public final boolean synpred193_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_compilationUnit_in_javaSource4508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_compilationUnit4544 = new BitSet(new long[]{0x0200001000400012L,0x0400000420000008L,0x0100104140207010L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit4555 = new BitSet(new long[]{0x0200001000400012L,0x0400000420000008L,0x0100104140207000L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit4567 = new BitSet(new long[]{0x0200001000400012L,0x0400000420000008L,0x0100104140207000L});
    public static final BitSet FOLLOW_typeDecls_in_compilationUnit4579 = new BitSet(new long[]{0x0200001000400012L,0x0400000400000008L,0x0100104140207000L});
    public static final BitSet FOLLOW_typeDeclaration_in_typeDecls4599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_typeDecls4609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration4629 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_packageDeclaration4632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration4634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration4660 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration4663 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_importDeclaration4666 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOTSTAR_in_importDeclaration4668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration4671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_typeDeclaration4695 = new BitSet(new long[]{0x0200001000400000L,0x0000000400000000L});
    public static final BitSet FOLLOW_classTypeDeclaration_in_typeDeclaration4710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumTypeDeclaration_in_typeDeclaration4740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_typeDeclaration4755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_classTypeDeclaration4790 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_classTypeDeclaration4792 = new BitSet(new long[]{0x8000000000000000L,0x0000140008000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classTypeDeclaration4794 = new BitSet(new long[]{0x8000000000000000L,0x0000040008000000L});
    public static final BitSet FOLLOW_classExtendsClause_in_classTypeDeclaration4797 = new BitSet(new long[]{0x0000000000000000L,0x0000040008000000L});
    public static final BitSet FOLLOW_implementsClause_in_classTypeDeclaration4800 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_classBody_in_classTypeDeclaration4803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_classExtendsClause4856 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_classExtendsClause4858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause4902 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_typeList_in_interfaceExtendsClause4904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_implementsClause4948 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_typeList_in_implementsClause4950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeParameterList4995 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList4997 = new BitSet(new long[]{0x0000040000800000L,0x0000000000100000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeParameterList5000 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList5002 = new BitSet(new long[]{0x0000040000800000L,0x0000000000100000L,0x0000000001000000L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeParameterList5006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_genericTypeListClosing5158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5190 = new BitSet(new long[]{0x0000000000800000L,0x0000000000100000L,0x0000000001000000L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeListClosing5227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_genericTypeParameter5316 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_bound_in_genericTypeParameter5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_bound5364 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_bound5366 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AND_in_bound5369 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_bound5371 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ENUM_in_enumTypeDeclaration5412 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_enumTypeDeclaration5414 = new BitSet(new long[]{0x0000000000000000L,0x0000040008000000L});
    public static final BitSet FOLLOW_implementsClause_in_enumTypeDeclaration5416 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_enumBody_in_enumTypeDeclaration5419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_enumBody5466 = new BitSet(new long[]{0x0000040000400000L,0x0000000002000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_enumScopeDeclarations_in_enumBody5468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RCURLY_in_enumBody5470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstants_in_enumScopeDeclarations5508 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COMMA_in_enumScopeDeclarations5512 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumClassScopeDeclarations5537 = new BitSet(new long[]{0x0240001428400012L,0x0404140502000028L,0x0140104144207000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5539 = new BitSet(new long[]{0x0240001428400012L,0x0404140502000028L,0x0140104144207000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5578 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants5581 = new BitSet(new long[]{0x0000000000400000L,0x0000000002000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5584 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_annotationList_in_enumConstant5609 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_enumConstant5611 = new BitSet(new long[]{0x0000000000000002L,0x0008040000000000L});
    public static final BitSet FOLLOW_arguments_in_enumConstant5614 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_classBody_in_enumConstant5617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceTypeDeclaration5642 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceTypeDeclaration5644 = new BitSet(new long[]{0x8000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5646 = new BitSet(new long[]{0x8000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5649 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceTypeDeclaration5652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5702 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_COMMA_in_typeList5705 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_typeList5708 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_LCURLY_in_classBody5733 = new BitSet(new long[]{0x0240001428400010L,0x0404140502000028L,0x0140104144247000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_classBody5735 = new BitSet(new long[]{0x0240001428400010L,0x0404140502000028L,0x0140104144247000L});
    public static final BitSet FOLLOW_RCURLY_in_classBody5738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_interfaceBody5780 = new BitSet(new long[]{0x0240001428400010L,0x0404100502000028L,0x0140104144247000L});
    public static final BitSet FOLLOW_interfaceScopeDeclarations_in_interfaceBody5782 = new BitSet(new long[]{0x0240001428400010L,0x0404100502000028L,0x0140104144247000L});
    public static final BitSet FOLLOW_RCURLY_in_interfaceBody5785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_classScopeDeclarations5852 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_classScopeDeclarations5877 = new BitSet(new long[]{0x0040000428000000L,0x0004100102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classScopeDeclarations5891 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations5910 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5912 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5914 = new BitSet(new long[]{0x0000000000000000L,0x0000060000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5916 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5919 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations5927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_classScopeDeclarations5989 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5991 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5993 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5995 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6062 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6064 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6066 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations6133 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations6135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_classScopeDeclarations6182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_interfaceScopeDeclarations6224 = new BitSet(new long[]{0x0040000428000000L,0x0004100102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6238 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6257 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6259 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6261 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_interfaceScopeDeclarations6327 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6329 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6399 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6478 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_COMMA_in_classFieldDeclaratorList6481 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6483 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_classFieldDeclarator6522 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_ASSIGN_in_classFieldDeclarator6525 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D140142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_variableInitializer_in_classFieldDeclarator6527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6572 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_COMMA_in_interfaceFieldDeclaratorList6575 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6577 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6616 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_in_interfaceFieldDeclarator6618 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D140142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_variableInitializer_in_interfaceFieldDeclarator6620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variableDeclaratorId6662 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer6685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer6695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_arrayDeclarator6714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACK_in_arrayDeclarator6716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_arrayDeclaratorList6750 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_LCURLY_in_arrayInitializer6795 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D140142800064L,0x0040208604040042L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6798 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6801 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D140142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6803 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayInitializer6812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROWS_in_throwsClause6850 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_qualifiedIdentList_in_throwsClause6852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifierList6889 = new BitSet(new long[]{0x0000000000400012L,0x0400000000000008L,0x0100104140007000L});
    public static final BitSet FOLLOW_PUBLIC_in_modifier6930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_modifier6940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_modifier6950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_modifier6960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_modifier6970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATIVE_in_modifier6980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_modifier6990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRANSIENT_in_modifier7000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_modifier7010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICTFP_in_modifier7020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_modifier7030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_localModifierList7049 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000008L});
    public static final BitSet FOLLOW_FINAL_in_localModifier7090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_localModifier7100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_type7119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectType_in_type7129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_simpleType7149 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_simpleType7151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdent_in_objectType7198 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectType7200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7240 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7282 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdent7285 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7287 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7327 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdentSimplified7330 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7332 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdent7372 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentList_in_typeIdent7375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdentSimplified7395 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentList7507 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004010000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7509 = new BitSet(new long[]{0x0000040000800000L,0x0000000000100000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentList7512 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004010000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7514 = new BitSet(new long[]{0x0000040000800000L,0x0000000000100000L,0x0000000001000000L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgument7556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgument7566 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_genericTypeArgument7568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_genericWildcardBoundType7610 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_genericWildcardBoundType7619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7638 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004010000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7640 = new BitSet(new long[]{0x0000040000800000L,0x0000000000100000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentListSimplified7643 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004010000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7645 = new BitSet(new long[]{0x0000040000800000L,0x0000000000100000L,0x0000000001000000L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgumentSimplified7691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgumentSimplified7701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7724 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_COMMA_in_qualifiedIdentList7727 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7730 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameterList7755 = new BitSet(new long[]{0x0040000428400000L,0x0004000102000028L,0x0000000004100000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7783 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7786 = new BitSet(new long[]{0x0040000428400000L,0x0004000102000028L,0x0000000004000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7788 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7793 = new BitSet(new long[]{0x0040000428400000L,0x0004000102000028L,0x0000000004000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameterList7929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterStandardDecl7952 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_formalParameterStandardDecl7954 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl7956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterVarArgDecl8000 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_formalParameterVarArgDecl8002 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl8004 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl8006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier8054 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentifier8097 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier8101 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotationList8154 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_AT_in_annotation8192 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_annotation8195 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_annotationInit_in_annotation8197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_annotationInit8221 = new BitSet(new long[]{0x0040A00C28400000L,0xA82D140142800064L,0x0040208604100042L});
    public static final BitSet FOLLOW_annotationInitializers_in_annotationInit8223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationInit8226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8264 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_COMMA_in_annotationInitializers8267 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8269 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializers8299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_annotationInitializer8340 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_in_annotationInitializer8343 = new BitSet(new long[]{0x0040A00C28400000L,0xA82D140142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializer8346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueExpression_in_annotationElementValue8369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotationElementValue8379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_annotationElementValueExpression8412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8452 = new BitSet(new long[]{0x0040A40C28400000L,0xA82D140142800064L,0x0040208604040042L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8455 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8458 = new BitSet(new long[]{0x0040A00C28400000L,0xA82D140142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8460 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_annotationTypeDeclaration8514 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationTypeDeclaration8516 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationTypeDeclaration8518 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_annotationBody_in_annotationTypeDeclaration8520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationBody8563 = new BitSet(new long[]{0x0240001428400010L,0x0404000502000028L,0x0100104144047000L});
    public static final BitSet FOLLOW_annotationScopeDeclarations_in_annotationBody8565 = new BitSet(new long[]{0x0240001428400010L,0x0404000502000028L,0x0100104144047000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationBody8568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_annotationScopeDeclarations8610 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_annotationScopeDeclarations8612 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationScopeDeclarations8626 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationScopeDeclarations8628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationScopeDeclarations8630 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_annotationScopeDeclarations8724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_annotationDefaultValue8747 = new BitSet(new long[]{0x0040A00C28400000L,0xA82D140142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationDefaultValue8750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_block8771 = new BitSet(new long[]{0x0248B01C38500010L,0xAC2D14054680016CL,0x034072D7442C7042L});
    public static final BitSet FOLLOW_blockStatement_in_block8773 = new BitSet(new long[]{0x0248B01C38500010L,0xAC2D14054680016CL,0x034072D7442C7042L});
    public static final BitSet FOLLOW_RCURLY_in_block8776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement8814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_blockStatement8816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_blockStatement8827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement8837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_localVariableDeclaration8878 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration8880 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement8935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assertStatement_in_statement8945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifStatement_in_statement8955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forStatement_in_statement8968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forEachStatement_in_statement8976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileStatement_in_statement8986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doWhileStatement_in_statement8996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryStatement_in_statement9006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchStatement_in_statement9016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronizedStatement_in_statement9026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returnStatement_in_statement9036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throwStatement_in_statement9046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_breakStatement_in_statement9056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continueStatement_in_statement9066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labeledStatement_in_statement9076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionStatement_in_statement9086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_assertStatement9111 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_assertStatement9115 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_assertStatement9130 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_assertStatement9134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_assertStatement9136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_assertStatement9162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifStatement9223 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_ifStatement9225 = new BitSet(new long[]{0x0048B00C38100000L,0xA82D140146800164L,0x024062D604280042L});
    public static final BitSet FOLLOW_statement_in_ifStatement9229 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_ELSE_in_ifStatement9244 = new BitSet(new long[]{0x0048B00C38100000L,0xA82D140146800164L,0x024062D604280042L});
    public static final BitSet FOLLOW_statement_in_ifStatement9248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forStatement9338 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forStatement9340 = new BitSet(new long[]{0x0040A00C28400000L,0xA82D10014280006CL,0x0040208604200042L});
    public static final BitSet FOLLOW_forInit_in_forStatement9342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_forStatement9344 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604200042L});
    public static final BitSet FOLLOW_forCondition_in_forStatement9346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_forStatement9348 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604100042L});
    public static final BitSet FOLLOW_forUpdater_in_forStatement9350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_forStatement9352 = new BitSet(new long[]{0x0048B00C38100000L,0xA82D140146800164L,0x024062D604280042L});
    public static final BitSet FOLLOW_statement_in_forStatement9354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forEachStatement9389 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forEachStatement9391 = new BitSet(new long[]{0x0040000428400000L,0x0004000102000028L,0x0000000004000000L});
    public static final BitSet FOLLOW_localModifierList_in_forEachStatement9393 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_forEachStatement9395 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_forEachStatement9397 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_forEachStatement9399 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_forEachStatement9401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_forEachStatement9403 = new BitSet(new long[]{0x0048B00C38100000L,0xA82D140146800164L,0x024062D604280042L});
    public static final BitSet FOLLOW_statement_in_forEachStatement9405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_whileStatement9443 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_whileStatement9445 = new BitSet(new long[]{0x0048B00C38100000L,0xA82D140146800164L,0x024062D604280042L});
    public static final BitSet FOLLOW_statement_in_whileStatement9447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_doWhileStatement9478 = new BitSet(new long[]{0x0048B00C38100000L,0xA82D140146800164L,0x024062D604280042L});
    public static final BitSet FOLLOW_statement_in_doWhileStatement9480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_WHILE_in_doWhileStatement9482 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_doWhileStatement9484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_doWhileStatement9486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_tryStatement9517 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_block_in_tryStatement9519 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_catches_in_tryStatement9522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_finallyClause_in_tryStatement9524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finallyClause_in_tryStatement9529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_switchStatement9565 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_switchStatement9567 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LCURLY_in_switchStatement9569 = new BitSet(new long[]{0x0001000040000000L});
    public static final BitSet FOLLOW_switchBlockLabels_in_switchStatement9571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RCURLY_in_switchStatement9573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_synchronizedStatement9604 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_synchronizedStatement9606 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_block_in_synchronizedStatement9608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_returnStatement9639 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604200042L});
    public static final BitSet FOLLOW_expression_in_returnStatement9641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_returnStatement9644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_throwStatement9672 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_throwStatement9674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_throwStatement9676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_breakStatement9703 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_breakStatement9705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_breakStatement9708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_continueStatement9736 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_continueStatement9738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_continueStatement9741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_labeledStatement9769 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_labeledStatement9771 = new BitSet(new long[]{0x0048B00C38100000L,0xA82D140146800164L,0x024062D604280042L});
    public static final BitSet FOLLOW_statement_in_labeledStatement9773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionStatement9802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_expressionStatement9804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_expressionStatement9815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches9840 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_CATCH_in_catchClause9882 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause9885 = new BitSet(new long[]{0x0040000428400000L,0x0004000102000028L,0x0000000004000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_catchClause9888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause9890 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_block_in_catchClause9893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finallyClause9912 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_block_in_finallyClause9914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels9948 = new BitSet(new long[]{0x0001000040000000L});
    public static final BitSet FOLLOW_switchDefaultLabel_in_switchBlockLabels9950 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels9955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_switchCaseLabels10004 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_CASE_in_switchCaseLabel10032 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_switchCaseLabel10035 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_switchCaseLabel10037 = new BitSet(new long[]{0x0248B01C38500012L,0xAC2D14054680016CL,0x034072D744287042L});
    public static final BitSet FOLLOW_blockStatement_in_switchCaseLabel10040 = new BitSet(new long[]{0x0248B01C38500012L,0xAC2D14054680016CL,0x034072D744287042L});
    public static final BitSet FOLLOW_DEFAULT_in_switchDefaultLabel10064 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_switchDefaultLabel10067 = new BitSet(new long[]{0x0248B01C38500012L,0xAC2D14054680016CL,0x034072D744287042L});
    public static final BitSet FOLLOW_blockStatement_in_switchDefaultLabel10070 = new BitSet(new long[]{0x0248B01C38500012L,0xAC2D14054680016CL,0x034072D744287042L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit10094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit10116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_forCondition10204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdater10246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parenthesizedExpression10286 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_parenthesizedExpression10288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_parenthesizedExpression10290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList10331 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10334 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_expressionList10337 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression10363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_assignmentExpression10399 = new BitSet(new long[]{0x0004000001200042L,0x0240000000000000L,0x1000000022800088L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentExpression10418 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentExpression10437 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentExpression10456 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_STAR_ASSIGN_in_assignmentExpression10475 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentExpression10494 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentExpression10513 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentExpression10532 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentExpression10551 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentExpression10570 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10589 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10608 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10627 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_assignmentExpression_in_assignmentExpression10649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOrExpression_in_conditionalExpression10674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression10677 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpression10680 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression10682 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression10685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression10706 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_logicalOrExpression10709 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression10712 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression10733 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_logicalAndExpression10736 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression10739 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_OR_in_inclusiveOrExpression10763 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression10787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression10790 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression10793 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression10814 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AND_in_andExpression10817 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression10820 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression10841 = new BitSet(new long[]{0x0800000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_equalityExpression10860 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_equalityExpression10879 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression10909 = new BitSet(new long[]{0x0800000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression10939 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_INSTANCEOF_in_instanceOfExpression10942 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression10945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression10966 = new BitSet(new long[]{0x0000000000000002L,0x0000180000180000L});
    public static final BitSet FOLLOW_LESS_OR_EQUAL_in_relationalExpression10985 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11004 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_LESS_THAN_in_relationalExpression11023 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_GREATER_THAN_in_relationalExpression11042 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11071 = new BitSet(new long[]{0x0000000000000002L,0x0000180000180000L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11105 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11123 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_shiftExpression11142 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_shiftExpression11161 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11190 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11220 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression11238 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression11257 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11286 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_unaryExpressionAll_in_multiplicativeExpression11316 = new BitSet(new long[]{0x0002000000000002L,0x0080000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_STAR_in_multiplicativeExpression11335 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_DIV_in_multiplicativeExpression11354 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_MOD_in_multiplicativeExpression11373 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_unaryExpressionAll_in_multiplicativeExpression11402 = new BitSet(new long[]{0x0002000000000002L,0x0080000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpressionAll11436 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_unaryExpressionAll_in_unaryExpressionAll11438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpressionAll11462 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_unaryExpressionAll_in_unaryExpressionAll11464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INC_in_unaryExpressionAll11487 = new BitSet(new long[]{0x0040800C28000000L,0x880C100102800064L,0x0040208604000002L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpressionAll11489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_unaryExpressionAll11513 = new BitSet(new long[]{0x0040800C28000000L,0x880C100102800064L,0x0040208604000002L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpressionAll11515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionRest_in_unaryExpressionAll11539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unaryExpressionRest11558 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_unaryExpressionAll_in_unaryExpressionRest11560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGICAL_NOT_in_unaryExpressionRest11604 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_unaryExpressionAll_in_unaryExpressionRest11606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpressionRest11642 = new BitSet(new long[]{0x0040000428000000L,0x0004000100000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_simpleType_in_unaryExpressionRest11644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpressionRest11646 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_unaryExpressionAll_in_unaryExpressionRest11648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpressionRest11674 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objectType_in_unaryExpressionRest11676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpressionRest11678 = new BitSet(new long[]{0x0040800C28000000L,0xA80D100102800064L,0x0040208604000002L});
    public static final BitSet FOLLOW_unaryExpressionRest_in_unaryExpressionRest11680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpressionRest11705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_postfixedExpression11741 = new BitSet(new long[]{0x0010200000000002L,0x0000020040000000L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression11803 = new BitSet(new long[]{0x0000000000000000L,0x0800100002000000L,0x0000008400000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression11861 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression11886 = new BitSet(new long[]{0x0010200000000002L,0x0008020040000000L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression11965 = new BitSet(new long[]{0x0010200000000002L,0x0000020040000000L});
    public static final BitSet FOLLOW_THIS_in_postfixedExpression12039 = new BitSet(new long[]{0x0010200000000002L,0x0000020040000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression12100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12118 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12120 = new BitSet(new long[]{0x0010200000000002L,0x0000020040000000L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12172 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression12176 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12178 = new BitSet(new long[]{0x0010200000000002L,0x0008020040000000L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12245 = new BitSet(new long[]{0x0010200000000002L,0x0000020040000000L});
    public static final BitSet FOLLOW_innerNewExpression_in_postfixedExpression12316 = new BitSet(new long[]{0x0010200000000002L,0x0000020040000000L});
    public static final BitSet FOLLOW_LBRACK_in_postfixedExpression12373 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_postfixedExpression12375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACK_in_postfixedExpression12377 = new BitSet(new long[]{0x0010200000000002L,0x0000020040000000L});
    public static final BitSet FOLLOW_INC_in_postfixedExpression12438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_postfixedExpression12462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_primaryExpression12510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpression12520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpression_in_primaryExpression12530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentExpression_in_primaryExpression12540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12550 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000008400000000L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression12565 = new BitSet(new long[]{0x0010000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression12643 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression12645 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression12714 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression12771 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression12838 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression12971 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13029 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13031 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13033 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primaryExpression13199 = new BitSet(new long[]{0x0010000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_arrayDeclarator_in_primaryExpression13258 = new BitSet(new long[]{0x0010000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13321 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_primaryExpression13383 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13385 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13467 = new BitSet(new long[]{0x0010000000000002L,0x0008020000000000L});
    public static final BitSet FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13537 = new BitSet(new long[]{0x0010000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression13605 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression13607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression13677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression13738 = new BitSet(new long[]{0x0000001000000000L,0x0800100000000000L,0x0000008400000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression13756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression13819 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression13844 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression13846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression13896 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression13900 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression13902 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression13904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression13954 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression13956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_qualifiedIdentExpression14031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14097 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_qualifiedIdentExpression14147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newExpression14223 = new BitSet(new long[]{0x0040000428000000L,0x0004100102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_primitiveType_in_newExpression14239 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_newExpression14285 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14288 = new BitSet(new long[]{0x0000000000000000L,0x0008020000000000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_newExpression14371 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_classBody_in_newExpression14373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_innerNewExpression14472 = new BitSet(new long[]{0x0000000000000000L,0x0000100002000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14474 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_innerNewExpression14477 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_innerNewExpression14479 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_classBody_in_innerNewExpression14481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14527 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_newArrayConstruction14529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14539 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14544 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14548 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14553 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments14578 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604100042L});
    public static final BitSet FOLLOW_expressionList_in_arguments14580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments14583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_synpred14_Java5158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_synpred15_Java5174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_synpred16_Java5227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_synpred17_Java5190 = new BitSet(new long[]{0x0000000000800000L,0x0000000000100000L,0x0000000001000000L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_synpred17_Java5227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bound_in_synpred18_Java5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_synpred34_Java5852 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_block_in_synpred34_Java5854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred44_Java5891 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_type_in_synpred44_Java5910 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred44_Java5912 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred44_Java5914 = new BitSet(new long[]{0x0000000000000000L,0x0000060000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred44_Java5916 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred44_Java5919 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_in_synpred44_Java5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred44_Java5927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred44_Java5989 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred44_Java5991 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred44_Java5993 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred44_Java5995 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_in_synpred44_Java5999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred44_Java6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred44_Java6062 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred44_Java6064 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred44_Java6066 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_block_in_synpred44_Java6069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred45_Java5877 = new BitSet(new long[]{0x0040000428000000L,0x0004100102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred45_Java5891 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_type_in_synpred45_Java5910 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred45_Java5912 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred45_Java5914 = new BitSet(new long[]{0x0000000000000000L,0x0000060000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred45_Java5916 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred45_Java5919 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_in_synpred45_Java5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred45_Java5927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred45_Java5989 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred45_Java5991 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred45_Java5993 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred45_Java5995 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_block_in_synpred45_Java5999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred45_Java6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred45_Java6062 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred45_Java6064 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred45_Java6066 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_block_in_synpred45_Java6069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred45_Java6133 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred45_Java6135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_synpred45_Java6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred46_Java6182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred52_Java6238 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_type_in_synpred52_Java6257 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred52_Java6259 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred52_Java6261 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred52_Java6263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred52_Java6266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_synpred52_Java6269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred52_Java6327 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred52_Java6329 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred52_Java6331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred52_Java6333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_synpred52_Java6336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred53_Java6224 = new BitSet(new long[]{0x0040000428000000L,0x0004100102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred53_Java6238 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0040000004000000L});
    public static final BitSet FOLLOW_type_in_synpred53_Java6257 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred53_Java6259 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred53_Java6261 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred53_Java6263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred53_Java6266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_synpred53_Java6269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred53_Java6327 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred53_Java6329 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred53_Java6331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000200000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred53_Java6333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_synpred53_Java6336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred53_Java6399 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_synpred53_Java6401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_synpred53_Java6403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred54_Java6448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred60_Java6750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred78_Java7151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred79_Java7200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred81_Java7285 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_typeIdent_in_synpred81_Java7287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred92_Java7512 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004010000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_synpred92_Java7514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_synpred94_Java7568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred99_Java7786 = new BitSet(new long[]{0x0040000428400000L,0x0004000102000028L,0x0000000004000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred99_Java7788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred101_Java7783 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred101_Java7786 = new BitSet(new long[]{0x0040000428400000L,0x0004000102000028L,0x0000000004000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred101_Java7788 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred101_Java7793 = new BitSet(new long[]{0x0040000428400000L,0x0004000102000028L,0x0000000004000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred101_Java7795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred102_Java7852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred103_Java8097 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred103_Java8101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred104_Java8154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred117_Java8610 = new BitSet(new long[]{0x0040000428000000L,0x0004000102000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_in_synpred117_Java8612 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred117_Java8626 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred117_Java8628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred117_Java8630 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_synpred117_Java8632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_synpred117_Java8635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred117_Java8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_synpred117_Java8679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred119_Java8814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SEMI_in_synpred119_Java8816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred120_Java8827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forStatement_in_synpred124_Java8968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forEachStatement_in_synpred125_Java8976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labeledStatement_in_synpred135_Java9076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred137_Java9244 = new BitSet(new long[]{0x0048B00C38100000L,0xA82D140146800164L,0x024062D604280042L});
    public static final BitSet FOLLOW_statement_in_synpred137_Java9248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_synpred146_Java10004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred149_Java10094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_synpred150_Java10116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred193_Java11642 = new BitSet(new long[]{0x0040000428000000L,0x0004000100000020L,0x0000000004000000L});
    public static final BitSet FOLLOW_simpleType_in_synpred193_Java11644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred193_Java11646 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_unaryExpressionAll_in_synpred193_Java11648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred194_Java11674 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objectType_in_synpred194_Java11676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred194_Java11678 = new BitSet(new long[]{0x0040800C28000000L,0xA80D100102800064L,0x0040208604000002L});
    public static final BitSet FOLLOW_unaryExpressionRest_in_synpred194_Java11680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_synpred197_Java11861 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred197_Java11886 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred197_Java11965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_synpred200_Java12100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SUPER_in_synpred200_Java12118 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred200_Java12120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred202_Java12172 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred202_Java12176 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred202_Java12178 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred202_Java12245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred223_Java13537 = new BitSet(new long[]{0x0010000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred223_Java13605 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred223_Java13607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred231_Java13738 = new BitSet(new long[]{0x0000001000000000L,0x0800100000000000L,0x0000008400000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred231_Java13756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_synpred231_Java13819 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SUPER_in_synpred231_Java13844 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred231_Java13846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred231_Java13896 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred231_Java13900 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred231_Java13902 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred231_Java13904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred231_Java13954 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred231_Java13956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_synpred231_Java14031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred231_Java14097 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred231_Java14099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_synpred231_Java14147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred239_Java14548 = new BitSet(new long[]{0x0040A00C28000000L,0xA82D100142800064L,0x0040208604000042L});
    public static final BitSet FOLLOW_expression_in_synpred239_Java14551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RBRACK_in_synpred239_Java14553 = new BitSet(new long[]{0x0000000000000002L});

}
